{"version":3,"file":"useOwnDevices.js","names":["isDeviceVerified","matrixClient","crossSigningInfo","device","deviceInfo","getStoredDevice","getUserId","device_id","checkDeviceTrust","isCrossSigningVerified","error","logger","fetchDevicesWithVerification","devices","getDevices","getStoredCrossSigningForUser","devicesDict","reduce","acc","isVerified","OwnDevicesError","useOwnDevices","useContext","MatrixClientContext","currentDeviceId","getDeviceId","setDevices","useState","isLoading","setIsLoading","setError","useEffect","getDevicesAsync","httpStatus","Unsupported","Default"],"sources":["../../../../../src/components/views/settings/devices/useOwnDevices.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { IMyDevice, MatrixClient } from \"matrix-js-sdk/src/matrix\";\nimport { CrossSigningInfo } from \"matrix-js-sdk/src/crypto/CrossSigning\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport MatrixClientContext from \"../../../../contexts/MatrixClientContext\";\nimport { DevicesDictionary } from \"./types\";\n\nconst isDeviceVerified = (\n    matrixClient: MatrixClient,\n    crossSigningInfo: CrossSigningInfo,\n    device: IMyDevice,\n): boolean | null => {\n    try {\n        const deviceInfo = matrixClient.getStoredDevice(matrixClient.getUserId(), device.device_id);\n        return crossSigningInfo.checkDeviceTrust(\n            crossSigningInfo,\n            deviceInfo,\n            false,\n            true,\n        ).isCrossSigningVerified();\n    } catch (error) {\n        logger.error(\"Error getting device cross-signing info\", error);\n        return null;\n    }\n};\n\nconst fetchDevicesWithVerification = async (matrixClient: MatrixClient): Promise<DevicesState['devices']> => {\n    const { devices } = await matrixClient.getDevices();\n    const crossSigningInfo = matrixClient.getStoredCrossSigningForUser(matrixClient.getUserId());\n\n    const devicesDict = devices.reduce((acc, device: IMyDevice) => ({\n        ...acc,\n        [device.device_id]: {\n            ...device,\n            isVerified: isDeviceVerified(matrixClient, crossSigningInfo, device),\n        },\n    }), {});\n\n    return devicesDict;\n};\n\nexport enum OwnDevicesError {\n    Unsupported = 'Unsupported',\n    Default = 'Default',\n}\ntype DevicesState = {\n    devices: DevicesDictionary;\n    currentDeviceId: string;\n    isLoading: boolean;\n    error?: OwnDevicesError;\n};\nexport const useOwnDevices = (): DevicesState => {\n    const matrixClient = useContext(MatrixClientContext);\n\n    const currentDeviceId = matrixClient.getDeviceId();\n\n    const [devices, setDevices] = useState<DevicesState['devices']>({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState<OwnDevicesError>();\n\n    useEffect(() => {\n        const getDevicesAsync = async () => {\n            setIsLoading(true);\n            try {\n                const devices = await fetchDevicesWithVerification(matrixClient);\n                setDevices(devices);\n                setIsLoading(false);\n            } catch (error) {\n                if (error.httpStatus == 404) {\n                    // 404 probably means the HS doesn't yet support the API.\n                    setError(OwnDevicesError.Unsupported);\n                } else {\n                    logger.error(\"Error loading sessions:\", error);\n                    setError(OwnDevicesError.Default);\n                }\n                setIsLoading(false);\n            }\n        };\n        getDevicesAsync();\n    }, [matrixClient]);\n\n    return {\n        devices,\n        currentDeviceId,\n        isLoading,\n        error,\n    };\n};\n"],"mappings":";;;;;;;;;;;AAgBA;;AAGA;;AAEA;;;;;;AAGA,MAAMA,gBAAgB,GAAG,CACrBC,YADqB,EAErBC,gBAFqB,EAGrBC,MAHqB,KAIJ;EACjB,IAAI;IACA,MAAMC,UAAU,GAAGH,YAAY,CAACI,eAAb,CAA6BJ,YAAY,CAACK,SAAb,EAA7B,EAAuDH,MAAM,CAACI,SAA9D,CAAnB;IACA,OAAOL,gBAAgB,CAACM,gBAAjB,CACHN,gBADG,EAEHE,UAFG,EAGH,KAHG,EAIH,IAJG,EAKLK,sBALK,EAAP;EAMH,CARD,CAQE,OAAOC,KAAP,EAAc;IACZC,cAAA,CAAOD,KAAP,CAAa,yCAAb,EAAwDA,KAAxD;;IACA,OAAO,IAAP;EACH;AACJ,CAjBD;;AAmBA,MAAME,4BAA4B,GAAG,MAAOX,YAAP,IAAwE;EACzG,MAAM;IAAEY;EAAF,IAAc,MAAMZ,YAAY,CAACa,UAAb,EAA1B;EACA,MAAMZ,gBAAgB,GAAGD,YAAY,CAACc,4BAAb,CAA0Cd,YAAY,CAACK,SAAb,EAA1C,CAAzB;EAEA,MAAMU,WAAW,GAAGH,OAAO,CAACI,MAAR,CAAe,CAACC,GAAD,EAAMf,MAAN,qCAC5Be,GAD4B;IAE/B,CAACf,MAAM,CAACI,SAAR,mCACOJ,MADP;MAEIgB,UAAU,EAAEnB,gBAAgB,CAACC,YAAD,EAAeC,gBAAf,EAAiCC,MAAjC;IAFhC;EAF+B,EAAf,EAMhB,EANgB,CAApB;EAQA,OAAOa,WAAP;AACH,CAbD;;IAeYI,e;;;WAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,+BAAAA,e;;AAUL,MAAMC,aAAa,GAAG,MAAoB;EAC7C,MAAMpB,YAAY,GAAG,IAAAqB,iBAAA,EAAWC,4BAAX,CAArB;EAEA,MAAMC,eAAe,GAAGvB,YAAY,CAACwB,WAAb,EAAxB;EAEA,MAAM,CAACZ,OAAD,EAAUa,UAAV,IAAwB,IAAAC,eAAA,EAAkC,EAAlC,CAA9B;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B,IAAAF,eAAA,EAAS,IAAT,CAAlC;EACA,MAAM,CAACjB,KAAD,EAAQoB,QAAR,IAAoB,IAAAH,eAAA,GAA1B;EAEA,IAAAI,gBAAA,EAAU,MAAM;IACZ,MAAMC,eAAe,GAAG,YAAY;MAChCH,YAAY,CAAC,IAAD,CAAZ;;MACA,IAAI;QACA,MAAMhB,OAAO,GAAG,MAAMD,4BAA4B,CAACX,YAAD,CAAlD;QACAyB,UAAU,CAACb,OAAD,CAAV;QACAgB,YAAY,CAAC,KAAD,CAAZ;MACH,CAJD,CAIE,OAAOnB,KAAP,EAAc;QACZ,IAAIA,KAAK,CAACuB,UAAN,IAAoB,GAAxB,EAA6B;UACzB;UACAH,QAAQ,CAACV,eAAe,CAACc,WAAjB,CAAR;QACH,CAHD,MAGO;UACHvB,cAAA,CAAOD,KAAP,CAAa,yBAAb,EAAwCA,KAAxC;;UACAoB,QAAQ,CAACV,eAAe,CAACe,OAAjB,CAAR;QACH;;QACDN,YAAY,CAAC,KAAD,CAAZ;MACH;IACJ,CAhBD;;IAiBAG,eAAe;EAClB,CAnBD,EAmBG,CAAC/B,YAAD,CAnBH;EAqBA,OAAO;IACHY,OADG;IAEHW,eAFG;IAGHI,SAHG;IAIHlB;EAJG,CAAP;AAMH,CApCM"}