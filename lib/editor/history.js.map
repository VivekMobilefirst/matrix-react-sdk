{"version":3,"file":"history.js","names":["MAX_STEP_LENGTH","HistoryManager","clear","stack","newlyTypedCharCount","currentIndex","changedSinceLastPush","lastCaret","nonWordBoundarySinceLastPush","addedSinceLastPush","removedSinceLastPush","shouldPush","inputType","diff","isNonBulkInput","added","removed","str","isWordBoundary","length","pushState","model","caret","pop","parts","serializeParts","push","tryPush","ensureLastChangesPushed","canUndo","canRedo","undo","redo"],"sources":["../../src/editor/history.ts"],"sourcesContent":["/*\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport EditorModel from \"./model\";\nimport { IDiff } from \"./diff\";\nimport { SerializedPart } from \"./parts\";\nimport { Caret } from \"./caret\";\n\ninterface IHistory {\n    parts: SerializedPart[];\n    caret: Caret;\n}\n\nexport const MAX_STEP_LENGTH = 10;\n\nexport default class HistoryManager {\n    private stack: IHistory[] = [];\n    private newlyTypedCharCount = 0;\n    private currentIndex = -1;\n    private changedSinceLastPush = false;\n    private lastCaret: Caret = null;\n    private nonWordBoundarySinceLastPush = false;\n    private addedSinceLastPush = false;\n    private removedSinceLastPush = false;\n\n    public clear(): void {\n        this.stack = [];\n        this.newlyTypedCharCount = 0;\n        this.currentIndex = -1;\n        this.changedSinceLastPush = false;\n        this.lastCaret = null;\n        this.nonWordBoundarySinceLastPush = false;\n        this.addedSinceLastPush = false;\n        this.removedSinceLastPush = false;\n    }\n\n    private shouldPush(inputType, diff) {\n        // right now we can only push a step after\n        // the input has been applied to the model,\n        // so we can't push the state before something happened.\n        // not ideal but changing this would be harder to fit cleanly into\n        // the editor model.\n        const isNonBulkInput = inputType === \"insertText\" ||\n                               inputType === \"deleteContentForward\" ||\n                               inputType === \"deleteContentBackward\";\n        if (diff && isNonBulkInput) {\n            if (diff.added) {\n                this.addedSinceLastPush = true;\n            }\n            if (diff.removed) {\n                this.removedSinceLastPush = true;\n            }\n            // as long as you've only been adding or removing since the last push\n            if (this.addedSinceLastPush !== this.removedSinceLastPush) {\n                // add steps by word boundary, up to MAX_STEP_LENGTH characters\n                const str = diff.added ? diff.added : diff.removed;\n                const isWordBoundary = str === \" \" || str === \"\\t\" || str === \"\\n\";\n                if (this.nonWordBoundarySinceLastPush && isWordBoundary) {\n                    return true;\n                }\n                if (!isWordBoundary) {\n                    this.nonWordBoundarySinceLastPush = true;\n                }\n                this.newlyTypedCharCount += str.length;\n                return this.newlyTypedCharCount > MAX_STEP_LENGTH;\n            } else {\n                // if starting to remove while adding before, or the opposite, push\n                return true;\n            }\n        } else {\n            // bulk input (paste, ...) should be pushed every time\n            return true;\n        }\n    }\n\n    private pushState(model: EditorModel, caret: Caret) {\n        // remove all steps after current step\n        while (this.currentIndex < (this.stack.length - 1)) {\n            this.stack.pop();\n        }\n        const parts = model.serializeParts();\n        this.stack.push({ parts, caret });\n        this.currentIndex = this.stack.length - 1;\n        this.lastCaret = null;\n        this.changedSinceLastPush = false;\n        this.newlyTypedCharCount = 0;\n        this.nonWordBoundarySinceLastPush = false;\n        this.addedSinceLastPush = false;\n        this.removedSinceLastPush = false;\n    }\n\n    // needs to persist parts and caret position\n    public tryPush(model: EditorModel, caret: Caret, inputType: string, diff: IDiff): boolean {\n        // ignore state restoration echos.\n        // these respect the inputType values of the input event,\n        // but are actually passed in from MessageEditor calling model.reset()\n        // in the keydown event handler.\n        if (inputType === \"historyUndo\" || inputType === \"historyRedo\") {\n            return false;\n        }\n        const shouldPush = this.shouldPush(inputType, diff);\n        if (shouldPush) {\n            this.pushState(model, caret);\n        } else {\n            this.lastCaret = caret;\n            this.changedSinceLastPush = true;\n        }\n        return shouldPush;\n    }\n\n    public ensureLastChangesPushed(model: EditorModel): void {\n        if (this.changedSinceLastPush) {\n            this.pushState(model, this.lastCaret);\n        }\n    }\n\n    public canUndo(): boolean {\n        return this.currentIndex >= 1 || this.changedSinceLastPush;\n    }\n\n    public canRedo(): boolean {\n        return this.currentIndex < (this.stack.length - 1);\n    }\n\n    // returns state that should be applied to model\n    public undo(model: EditorModel): IHistory {\n        if (this.canUndo()) {\n            this.ensureLastChangesPushed(model);\n            this.currentIndex -= 1;\n            return this.stack[this.currentIndex];\n        }\n    }\n\n    // returns state that should be applied to model\n    public redo(): IHistory {\n        if (this.canRedo()) {\n            this.changedSinceLastPush = false;\n            this.currentIndex += 1;\n            return this.stack[this.currentIndex];\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYO,MAAMA,eAAe,GAAG,EAAxB;;;AAEQ,MAAMC,cAAN,CAAqB;EAAA;IAAA,6CACJ,EADI;IAAA,2DAEF,CAFE;IAAA,oDAGT,CAAC,CAHQ;IAAA,4DAID,KAJC;IAAA,iDAKL,IALK;IAAA,oEAMO,KANP;IAAA,0DAOH,KAPG;IAAA,4DAQD,KARC;EAAA;;EAUzBC,KAAK,GAAS;IACjB,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,mBAAL,GAA2B,CAA3B;IACA,KAAKC,YAAL,GAAoB,CAAC,CAArB;IACA,KAAKC,oBAAL,GAA4B,KAA5B;IACA,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,4BAAL,GAAoC,KAApC;IACA,KAAKC,kBAAL,GAA0B,KAA1B;IACA,KAAKC,oBAAL,GAA4B,KAA5B;EACH;;EAEOC,UAAU,CAACC,SAAD,EAAYC,IAAZ,EAAkB;IAChC;IACA;IACA;IACA;IACA;IACA,MAAMC,cAAc,GAAGF,SAAS,KAAK,YAAd,IACAA,SAAS,KAAK,sBADd,IAEAA,SAAS,KAAK,uBAFrC;;IAGA,IAAIC,IAAI,IAAIC,cAAZ,EAA4B;MACxB,IAAID,IAAI,CAACE,KAAT,EAAgB;QACZ,KAAKN,kBAAL,GAA0B,IAA1B;MACH;;MACD,IAAII,IAAI,CAACG,OAAT,EAAkB;QACd,KAAKN,oBAAL,GAA4B,IAA5B;MACH,CANuB,CAOxB;;;MACA,IAAI,KAAKD,kBAAL,KAA4B,KAAKC,oBAArC,EAA2D;QACvD;QACA,MAAMO,GAAG,GAAGJ,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAlB,GAA0BF,IAAI,CAACG,OAA3C;QACA,MAAME,cAAc,GAAGD,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,IAAvB,IAA+BA,GAAG,KAAK,IAA9D;;QACA,IAAI,KAAKT,4BAAL,IAAqCU,cAAzC,EAAyD;UACrD,OAAO,IAAP;QACH;;QACD,IAAI,CAACA,cAAL,EAAqB;UACjB,KAAKV,4BAAL,GAAoC,IAApC;QACH;;QACD,KAAKJ,mBAAL,IAA4Ba,GAAG,CAACE,MAAhC;QACA,OAAO,KAAKf,mBAAL,GAA2BJ,eAAlC;MACH,CAZD,MAYO;QACH;QACA,OAAO,IAAP;MACH;IACJ,CAxBD,MAwBO;MACH;MACA,OAAO,IAAP;IACH;EACJ;;EAEOoB,SAAS,CAACC,KAAD,EAAqBC,KAArB,EAAmC;IAChD;IACA,OAAO,KAAKjB,YAAL,GAAqB,KAAKF,KAAL,CAAWgB,MAAX,GAAoB,CAAhD,EAAoD;MAChD,KAAKhB,KAAL,CAAWoB,GAAX;IACH;;IACD,MAAMC,KAAK,GAAGH,KAAK,CAACI,cAAN,EAAd;IACA,KAAKtB,KAAL,CAAWuB,IAAX,CAAgB;MAAEF,KAAF;MAASF;IAAT,CAAhB;IACA,KAAKjB,YAAL,GAAoB,KAAKF,KAAL,CAAWgB,MAAX,GAAoB,CAAxC;IACA,KAAKZ,SAAL,GAAiB,IAAjB;IACA,KAAKD,oBAAL,GAA4B,KAA5B;IACA,KAAKF,mBAAL,GAA2B,CAA3B;IACA,KAAKI,4BAAL,GAAoC,KAApC;IACA,KAAKC,kBAAL,GAA0B,KAA1B;IACA,KAAKC,oBAAL,GAA4B,KAA5B;EACH,CA1E+B,CA4EhC;;;EACOiB,OAAO,CAACN,KAAD,EAAqBC,KAArB,EAAmCV,SAAnC,EAAsDC,IAAtD,EAA4E;IACtF;IACA;IACA;IACA;IACA,IAAID,SAAS,KAAK,aAAd,IAA+BA,SAAS,KAAK,aAAjD,EAAgE;MAC5D,OAAO,KAAP;IACH;;IACD,MAAMD,UAAU,GAAG,KAAKA,UAAL,CAAgBC,SAAhB,EAA2BC,IAA3B,CAAnB;;IACA,IAAIF,UAAJ,EAAgB;MACZ,KAAKS,SAAL,CAAeC,KAAf,EAAsBC,KAAtB;IACH,CAFD,MAEO;MACH,KAAKf,SAAL,GAAiBe,KAAjB;MACA,KAAKhB,oBAAL,GAA4B,IAA5B;IACH;;IACD,OAAOK,UAAP;EACH;;EAEMiB,uBAAuB,CAACP,KAAD,EAA2B;IACrD,IAAI,KAAKf,oBAAT,EAA+B;MAC3B,KAAKc,SAAL,CAAeC,KAAf,EAAsB,KAAKd,SAA3B;IACH;EACJ;;EAEMsB,OAAO,GAAY;IACtB,OAAO,KAAKxB,YAAL,IAAqB,CAArB,IAA0B,KAAKC,oBAAtC;EACH;;EAEMwB,OAAO,GAAY;IACtB,OAAO,KAAKzB,YAAL,GAAqB,KAAKF,KAAL,CAAWgB,MAAX,GAAoB,CAAhD;EACH,CA3G+B,CA6GhC;;;EACOY,IAAI,CAACV,KAAD,EAA+B;IACtC,IAAI,KAAKQ,OAAL,EAAJ,EAAoB;MAChB,KAAKD,uBAAL,CAA6BP,KAA7B;MACA,KAAKhB,YAAL,IAAqB,CAArB;MACA,OAAO,KAAKF,KAAL,CAAW,KAAKE,YAAhB,CAAP;IACH;EACJ,CApH+B,CAsHhC;;;EACO2B,IAAI,GAAa;IACpB,IAAI,KAAKF,OAAL,EAAJ,EAAoB;MAChB,KAAKxB,oBAAL,GAA4B,KAA5B;MACA,KAAKD,YAAL,IAAqB,CAArB;MACA,OAAO,KAAKF,KAAL,CAAW,KAAKE,YAAhB,CAAP;IACH;EACJ;;AA7H+B"}