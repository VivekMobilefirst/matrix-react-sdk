{"version":3,"file":"serialize.js","names":["mdSerialize","model","parts","reduce","html","part","type","Type","Newline","Plain","Emoji","Command","PillCandidate","AtRoomPill","text","RoomPill","resourceId","replace","c","makeGenericPermalink","UserPill","htmlSerializeIfNeeded","forceHTML","useMarkdown","escapeHtml","textSerialize","md","htmlSerializeFromMdIfNeeded","orig","SettingsStore","getValue","patternNames","patternTypes","patternDefaults","forEach","patternName","patternType","pattern","SdkConfig","get","RegExp","m","p1","p2","p2e","AllHtmlEntities","encode","parser","Markdown","isPlainText","phtml","cheerio","load","toHTML","_useHtmlParser2","decodeEntities","parserOrig","phtmlOrig","each","i","eq","e","tex","attr","indexOf","toPlaintext","containsEmote","hasCommand","startsWith","hasArgument","length","prefix","caseSensitive","firstPart","toLowerCase","stripEmoteCommand","stripPrefix","clone","removeText","index","offset","unescapeMessage"],"sources":["../../src/editor/serialize.ts"],"sourcesContent":["/*\nCopyright 2019 New Vector Ltd\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { AllHtmlEntities } from 'html-entities';\nimport cheerio from 'cheerio';\nimport escapeHtml from \"escape-html\";\n\nimport Markdown from '../Markdown';\nimport { makeGenericPermalink } from \"../utils/permalinks/Permalinks\";\nimport EditorModel from \"./model\";\nimport SettingsStore from '../settings/SettingsStore';\nimport SdkConfig from '../SdkConfig';\nimport { Type } from './parts';\n\nexport function mdSerialize(model: EditorModel): string {\n    return model.parts.reduce((html, part) => {\n        switch (part.type) {\n            case Type.Newline:\n                return html + \"\\n\";\n            case Type.Plain:\n            case Type.Emoji:\n            case Type.Command:\n            case Type.PillCandidate:\n            case Type.AtRoomPill:\n                return html + part.text;\n            case Type.RoomPill:\n                // Here we use the resourceId for compatibility with non-rich text clients\n                // See https://github.com/vector-im/element-web/issues/16660\n                return html +\n                    `[${part.resourceId.replace(/[[\\\\\\]]/g, c => \"\\\\\" + c)}](${makeGenericPermalink(part.resourceId)})`;\n            case Type.UserPill:\n                return html +\n                    `[${part.text.replace(/[[\\\\\\]]/g, c => \"\\\\\" + c)}](${makeGenericPermalink(part.resourceId)})`;\n        }\n    }, \"\");\n}\n\ninterface ISerializeOpts {\n    forceHTML?: boolean;\n    useMarkdown?: boolean;\n}\n\nexport function htmlSerializeIfNeeded(\n    model: EditorModel,\n    { forceHTML = false, useMarkdown = true }: ISerializeOpts = {},\n): string {\n    if (!useMarkdown) {\n        return escapeHtml(textSerialize(model)).replace(/\\n/g, '<br/>');\n    }\n\n    const md = mdSerialize(model);\n    return htmlSerializeFromMdIfNeeded(md, { forceHTML });\n}\n\nexport function htmlSerializeFromMdIfNeeded(md: string, { forceHTML = false } = {}): string {\n    // copy of raw input to remove unwanted math later\n    const orig = md;\n\n    if (SettingsStore.getValue(\"feature_latex_maths\")) {\n        const patternNames = ['tex', 'latex'];\n        const patternTypes = ['display', 'inline'];\n        const patternDefaults = {\n            \"tex\": {\n                // detect math with tex delimiters, inline: $...$, display $$...$$\n                // preferably use negative lookbehinds, not supported in all major browsers:\n                // const displayPattern = \"^(?<!\\\\\\\\)\\\\$\\\\$(?![ \\\\t])(([^$]|\\\\\\\\\\\\$)+?)\\\\$\\\\$$\";\n                // const inlinePattern = \"(?:^|\\\\s)(?<!\\\\\\\\)\\\\$(?!\\\\s)(([^$]|\\\\\\\\\\\\$)+?)(?<!\\\\\\\\|\\\\s)\\\\$\";\n\n                // conditions for display math detection $$...$$:\n                // - pattern starts and ends on a new line\n                // - left delimiter ($$) is not escaped by backslash\n                \"display\": \"(^)\\\\$\\\\$(([^$]|\\\\\\\\\\\\$)+?)\\\\$\\\\$$\",\n\n                // conditions for inline math detection $...$:\n                // - pattern starts at beginning of line, follows whitespace character or punctuation\n                // - pattern is on a single line\n                // - left and right delimiters ($) are not escaped by backslashes\n                // - left delimiter is not followed by whitespace character\n                // - right delimiter is not prefixed with whitespace character\n                \"inline\":\n                    \"(^|\\\\s|[.,!?:;])(?!\\\\\\\\)\\\\$(?!\\\\s)(([^$\\\\n]|\\\\\\\\\\\\$)*([^\\\\\\\\\\\\s\\\\$]|\\\\\\\\\\\\$)(?:\\\\\\\\\\\\$)?)\\\\$\",\n            },\n            \"latex\": {\n                // detect math with latex delimiters, inline: \\(...\\), display \\[...\\]\n\n                // conditions for display math detection \\[...\\]:\n                // - pattern starts and ends on a new line\n                // - pattern is not empty\n                \"display\": \"(^)\\\\\\\\\\\\[(?!\\\\\\\\\\\\])(.*?)\\\\\\\\\\\\]$\",\n\n                // conditions for inline math detection \\(...\\):\n                // - pattern starts at beginning of line or is not prefixed with backslash\n                // - pattern is not empty\n                \"inline\": \"(^|[^\\\\\\\\])\\\\\\\\\\\\((?!\\\\\\\\\\\\))(.*?)\\\\\\\\\\\\)\",\n            },\n        };\n\n        patternNames.forEach(function(patternName) {\n            patternTypes.forEach(function(patternType) {\n                // get the regex replace pattern from config or use the default\n                const pattern = (((SdkConfig.get(\"latex_maths_delims\") ||\n                    {})[patternType] || {})[\"pattern\"] || {})[patternName] ||\n                    patternDefaults[patternName][patternType];\n\n                md = md.replace(RegExp(pattern, \"gms\"), function(m, p1, p2) {\n                    const p2e = AllHtmlEntities.encode(p2);\n                    switch (patternType) {\n                        case \"display\":\n                            return `${p1}<div data-mx-maths=\"${p2e}\">\\n\\n</div>\\n\\n`;\n                        case \"inline\":\n                            return `${p1}<span data-mx-maths=\"${p2e}\"></span>`;\n                    }\n                });\n            });\n        });\n\n        // make sure div tags always start on a new line, otherwise it will confuse\n        // the markdown parser\n        md = md.replace(/(.)<div/g, function(m, p1) { return `${p1}\\n<div`; });\n    }\n\n    const parser = new Markdown(md);\n    if (!parser.isPlainText() || forceHTML) {\n        // feed Markdown output to HTML parser\n        const phtml = cheerio.load(parser.toHTML(), {\n            // @ts-ignore: The `_useHtmlParser2` internal option is the\n            // simplest way to both parse and render using `htmlparser2`.\n            _useHtmlParser2: true,\n            decodeEntities: false,\n        });\n\n        if (SettingsStore.getValue(\"feature_latex_maths\")) {\n            // original Markdown without LaTeX replacements\n            const parserOrig = new Markdown(orig);\n            const phtmlOrig = cheerio.load(parserOrig.toHTML(), {\n                // @ts-ignore: The `_useHtmlParser2` internal option is the\n                // simplest way to both parse and render using `htmlparser2`.\n                _useHtmlParser2: true,\n                decodeEntities: false,\n            });\n\n            // since maths delimiters are handled before Markdown,\n            // code blocks could contain mangled content.\n            // replace code blocks with original content\n            phtmlOrig('code').each(function(i) {\n                phtml('code').eq(i).text(phtmlOrig('code').eq(i).text());\n            });\n\n            // add fallback output for latex math, which should not be interpreted as markdown\n            phtml('div, span').each(function(i, e) {\n                const tex = phtml(e).attr('data-mx-maths');\n                if (tex) {\n                    phtml(e).html(`<code>${tex}</code>`);\n                }\n            });\n        }\n        return phtml.html();\n    }\n    // ensure removal of escape backslashes in non-Markdown messages\n    if (md.indexOf(\"\\\\\") > -1) {\n        return parser.toPlaintext();\n    }\n}\n\nexport function textSerialize(model: EditorModel): string {\n    return model.parts.reduce((text, part) => {\n        switch (part.type) {\n            case Type.Newline:\n                return text + \"\\n\";\n            case Type.Plain:\n            case Type.Emoji:\n            case Type.Command:\n            case Type.PillCandidate:\n            case Type.AtRoomPill:\n                return text + part.text;\n            case Type.RoomPill:\n                // Here we use the resourceId for compatibility with non-rich text clients\n                // See https://github.com/vector-im/element-web/issues/16660\n                return text + `${part.resourceId}`;\n            case Type.UserPill:\n                return text + `${part.text}`;\n        }\n    }, \"\");\n}\n\nexport function containsEmote(model: EditorModel): boolean {\n    const hasCommand = startsWith(model, \"/me \", false);\n    const hasArgument = model.parts[0]?.text?.length > 4 || model.parts.length > 1;\n    return hasCommand && hasArgument;\n}\n\nexport function startsWith(model: EditorModel, prefix: string, caseSensitive = true): boolean {\n    const firstPart = model.parts[0];\n    // part type will be \"plain\" while editing,\n    // and \"command\" while composing a message.\n    let text = firstPart?.text || '';\n    if (!caseSensitive) {\n        prefix = prefix.toLowerCase();\n        text = text.toLowerCase();\n    }\n\n    return firstPart && (firstPart.type === Type.Plain || firstPart.type === Type.Command) && text.startsWith(prefix);\n}\n\nexport function stripEmoteCommand(model: EditorModel): EditorModel {\n    // trim \"/me \"\n    return stripPrefix(model, \"/me \");\n}\n\nexport function stripPrefix(model: EditorModel, prefix: string): EditorModel {\n    model = model.clone();\n    model.removeText({ index: 0, offset: 0 }, prefix.length);\n    return model;\n}\n\nexport function unescapeMessage(model: EditorModel): EditorModel {\n    const { parts } = model;\n    if (parts.length) {\n        const firstPart = parts[0];\n        // only unescape \\/ to / at start of editor\n        if (firstPart.type === Type.Plain && firstPart.text.startsWith(\"\\\\/\")) {\n            model = model.clone();\n            model.removeText({ index: 0, offset: 0 }, 1);\n        }\n    }\n    return model;\n}\n"],"mappings":"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"}