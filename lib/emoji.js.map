{"version":3,"file":"emoji.js","names":["UNICODE_TO_EMOJI","Map","EMOTICON_TO_EMOJI","getEmojiFromUnicode","unicode","get","stripVariation","isRegionalIndicator","x","Array","from","length","EMOJIBASE_GROUP_ID_TO_CATEGORY","DATA_BY_CATEGORY","EMOJI","EMOJIBASE","map","emojiData","shortcodeData","SHORTCODES","hexcode","label","toLowerCase","replace","emoji","shortcodes","categoryId","group","hasOwnProperty","push","set","emoticon","isArray","forEach","str"],"sources":["../src/emoji.ts"],"sourcesContent":["/*\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport EMOJIBASE from 'emojibase-data/en/compact.json';\nimport SHORTCODES from 'emojibase-data/en/shortcodes/iamcal.json';\n\nexport interface IEmoji {\n    label: string;\n    group?: number;\n    hexcode: string;\n    order?: number;\n    shortcodes: string[];\n    tags?: string[];\n    unicode: string;\n    skins?: Omit<IEmoji, \"shortcodes\" | \"tags\">[]; // Currently unused\n    emoticon?: string | string[];\n}\n\n// The unicode is stored without the variant selector\nconst UNICODE_TO_EMOJI = new Map<string, IEmoji>(); // not exported as gets for it are handled by getEmojiFromUnicode\nexport const EMOTICON_TO_EMOJI = new Map<string, IEmoji>();\n\nexport const getEmojiFromUnicode = unicode => UNICODE_TO_EMOJI.get(stripVariation(unicode));\n\nconst isRegionalIndicator = (x: string): boolean => {\n    // First verify that the string is a single character. We use Array.from\n    // to make sure we count by characters, not UTF-8 code units.\n    return Array.from(x).length === 1 &&\n        // Next verify that the character is within the code point range for\n        // regional indicators.\n        // http://unicode.org/charts/PDF/Unicode-6.0/U60-1F100.pdf\n        x >= '\\u{1f1e6}' && x <= '\\u{1f1ff}';\n};\n\nconst EMOJIBASE_GROUP_ID_TO_CATEGORY = [\n    \"people\", // smileys\n    \"people\", // actually people\n    \"control\", // modifiers and such, not displayed in picker\n    \"nature\",\n    \"foods\",\n    \"places\",\n    \"activity\",\n    \"objects\",\n    \"symbols\",\n    \"flags\",\n];\n\nexport const DATA_BY_CATEGORY = {\n    \"people\": [],\n    \"nature\": [],\n    \"foods\": [],\n    \"places\": [],\n    \"activity\": [],\n    \"objects\": [],\n    \"symbols\": [],\n    \"flags\": [],\n};\n\n// Store various mappings from unicode/emoticon/shortcode to the Emoji objects\nexport const EMOJI: IEmoji[] = EMOJIBASE.map((emojiData: Omit<IEmoji, \"shortcodes\">) => {\n    // If there's ever a gap in shortcode coverage, we fudge it by\n    // filling it in with the emoji's CLDR annotation\n    const shortcodeData = SHORTCODES[emojiData.hexcode] ??\n        [emojiData.label.toLowerCase().replace(/\\W+/g, \"_\")];\n\n    const emoji: IEmoji = {\n        ...emojiData,\n        // Homogenize shortcodes by ensuring that everything is an array\n        shortcodes: typeof shortcodeData === \"string\" ? [shortcodeData] : shortcodeData,\n    };\n\n    // We manually include regional indicators in the symbols group, since\n    // Emojibase intentionally leaves them uncategorized\n    const categoryId = EMOJIBASE_GROUP_ID_TO_CATEGORY[emoji.group] ??\n        (isRegionalIndicator(emoji.unicode) ? \"symbols\" : null);\n\n    if (DATA_BY_CATEGORY.hasOwnProperty(categoryId)) {\n        DATA_BY_CATEGORY[categoryId].push(emoji);\n    }\n\n    // Add mapping from unicode to Emoji object\n    // The 'unicode' field that we use in emojibase has either\n    // VS15 or VS16 appended to any characters that can take\n    // variation selectors. Which one it appends depends\n    // on whether emojibase considers their type to be 'text' or\n    // 'emoji'. We therefore strip any variation chars from strings\n    // both when building the map and when looking up.\n    UNICODE_TO_EMOJI.set(stripVariation(emoji.unicode), emoji);\n\n    if (emoji.emoticon) {\n        // Add mapping from emoticon to Emoji object\n        Array.isArray(emoji.emoticon)\n            ? emoji.emoticon.forEach((x) => EMOTICON_TO_EMOJI.set(x, emoji))\n            : EMOTICON_TO_EMOJI.set(emoji.emoticon, emoji);\n    }\n\n    return emoji;\n});\n\n/**\n * Strips variation selectors from the end of given string\n * NB. Skin tone modifiers are not variation selectors:\n * this function does not touch them. (Should it?)\n *\n * @param {string} str string to strip\n * @returns {string} stripped string\n */\nfunction stripVariation(str) {\n    return str.replace(/[\\uFE00-\\uFE0F]$/, \"\");\n}\n"],"mappings":";;;;;;;;;;;AAgBA;;AACA;;;;;;AAcA;AACA,MAAMA,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB,C,CAAoD;;AAC7C,MAAMC,iBAAiB,GAAG,IAAID,GAAJ,EAA1B;;;AAEA,MAAME,mBAAmB,GAAGC,OAAO,IAAIJ,gBAAgB,CAACK,GAAjB,CAAqBC,cAAc,CAACF,OAAD,CAAnC,CAAvC;;;;AAEP,MAAMG,mBAAmB,GAAIC,CAAD,IAAwB;EAChD;EACA;EACA,OAAOC,KAAK,CAACC,IAAN,CAAWF,CAAX,EAAcG,MAAd,KAAyB,CAAzB,IACH;EACA;EACA;EACAH,CAAC,IAAI,WAJF,IAIiBA,CAAC,IAAI,WAJ7B;AAKH,CARD;;AAUA,MAAMI,8BAA8B,GAAG,CACnC,QADmC,EACzB;AACV,QAFmC,EAEzB;AACV,SAHmC,EAGxB;AACX,QAJmC,EAKnC,OALmC,EAMnC,QANmC,EAOnC,UAPmC,EAQnC,SARmC,EASnC,SATmC,EAUnC,OAVmC,CAAvC;AAaO,MAAMC,gBAAgB,GAAG;EAC5B,UAAU,EADkB;EAE5B,UAAU,EAFkB;EAG5B,SAAS,EAHmB;EAI5B,UAAU,EAJkB;EAK5B,YAAY,EALgB;EAM5B,WAAW,EANiB;EAO5B,WAAW,EAPiB;EAQ5B,SAAS;AARmB,CAAzB,C,CAWP;;;;AACO,MAAMC,KAAe,GAAGC,gBAAA,CAAUC,GAAV,CAAeC,SAAD,IAA2C;EACpF;EACA;EACA,MAAMC,aAAa,GAAGC,eAAA,CAAWF,SAAS,CAACG,OAArB,KAClB,CAACH,SAAS,CAACI,KAAV,CAAgBC,WAAhB,GAA8BC,OAA9B,CAAsC,MAAtC,EAA8C,GAA9C,CAAD,CADJ;;EAGA,MAAMC,KAAa,mCACZP,SADY;IAEf;IACAQ,UAAU,EAAE,OAAOP,aAAP,KAAyB,QAAzB,GAAoC,CAACA,aAAD,CAApC,GAAsDA;EAHnD,EAAnB,CANoF,CAYpF;EACA;;;EACA,MAAMQ,UAAU,GAAGd,8BAA8B,CAACY,KAAK,CAACG,KAAP,CAA9B,KACdpB,mBAAmB,CAACiB,KAAK,CAACpB,OAAP,CAAnB,GAAqC,SAArC,GAAiD,IADnC,CAAnB;;EAGA,IAAIS,gBAAgB,CAACe,cAAjB,CAAgCF,UAAhC,CAAJ,EAAiD;IAC7Cb,gBAAgB,CAACa,UAAD,CAAhB,CAA6BG,IAA7B,CAAkCL,KAAlC;EACH,CAnBmF,CAqBpF;EACA;EACA;EACA;EACA;EACA;EACA;;;EACAxB,gBAAgB,CAAC8B,GAAjB,CAAqBxB,cAAc,CAACkB,KAAK,CAACpB,OAAP,CAAnC,EAAoDoB,KAApD;;EAEA,IAAIA,KAAK,CAACO,QAAV,EAAoB;IAChB;IACAtB,KAAK,CAACuB,OAAN,CAAcR,KAAK,CAACO,QAApB,IACMP,KAAK,CAACO,QAAN,CAAeE,OAAf,CAAwBzB,CAAD,IAAON,iBAAiB,CAAC4B,GAAlB,CAAsBtB,CAAtB,EAAyBgB,KAAzB,CAA9B,CADN,GAEMtB,iBAAiB,CAAC4B,GAAlB,CAAsBN,KAAK,CAACO,QAA5B,EAAsCP,KAAtC,CAFN;EAGH;;EAED,OAAOA,KAAP;AACH,CAtC8B,CAAxB;AAwCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,SAASlB,cAAT,CAAwB4B,GAAxB,EAA6B;EACzB,OAAOA,GAAG,CAACX,OAAJ,CAAY,kBAAZ,EAAgC,EAAhC,CAAP;AACH"}