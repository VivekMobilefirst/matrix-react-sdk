{"version":3,"file":"index.js","names":["PerformanceMonitor","instance","_instance","start","name","id","supportsPerformanceApi","key","buildKey","performance","getEntriesByName","START_PREFIX","length","logger","warn","mark","stop","STOP_PREFIX","measure","clear","measurement","pop","entries","push","listeners","forEach","listener","shouldEmit","callback","clearMarks","getEntries","type","filter","entry","satisfiesName","satisfiedType","entryType","addPerformanceDataCallback","buffer","toEmit","removePerformanceDataCallback","splice","findIndex","undefined","entryNames","includes","suffix","window","mxPerformanceMonitor","mxPerformanceEntryNames","PerformanceEntryNames"],"sources":["../../src/performance/index.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { PerformanceEntryNames } from \"./entry-names\";\n\ninterface GetEntriesOptions {\n    name?: string;\n    type?: string;\n}\n\ntype PerformanceCallbackFunction = (entry: PerformanceEntry[]) => void;\n\ninterface PerformanceDataListener {\n    entryNames?: string[];\n    callback: PerformanceCallbackFunction;\n}\n\nexport default class PerformanceMonitor {\n    static _instance: PerformanceMonitor;\n\n    private START_PREFIX = \"start:\";\n    private STOP_PREFIX = \"stop:\";\n\n    private listeners: PerformanceDataListener[] = [];\n    private entries: PerformanceEntry[] = [];\n\n    public static get instance(): PerformanceMonitor {\n        if (!PerformanceMonitor._instance) {\n            PerformanceMonitor._instance = new PerformanceMonitor();\n        }\n        return PerformanceMonitor._instance;\n    }\n\n    /**\n     * Starts a performance recording\n     * @param name Name of the recording\n     * @param id Specify an identifier appended to the measurement name\n     * @returns {void}\n     */\n    start(name: string, id?: string): void {\n        if (!this.supportsPerformanceApi()) {\n            return;\n        }\n        const key = this.buildKey(name, id);\n\n        if (performance.getEntriesByName(this.START_PREFIX + key).length > 0) {\n            logger.warn(`Recording already started for: ${name}`);\n            return;\n        }\n\n        performance.mark(this.START_PREFIX + key);\n    }\n\n    /**\n     * Stops a performance recording and stores delta duration\n     * with the start marker\n     * @param name Name of the recording\n     * @param id Specify an identifier appended to the measurement name\n     * @returns The measurement\n     */\n    stop(name: string, id?: string): PerformanceEntry {\n        if (!this.supportsPerformanceApi()) {\n            return;\n        }\n        const key = this.buildKey(name, id);\n        if (performance.getEntriesByName(this.START_PREFIX + key).length === 0) {\n            logger.warn(`No recording started for: ${name}`);\n            return;\n        }\n\n        performance.mark(this.STOP_PREFIX + key);\n        performance.measure(\n            key,\n            this.START_PREFIX + key,\n            this.STOP_PREFIX + key,\n        );\n\n        this.clear(name, id);\n\n        const measurement = performance.getEntriesByName(key).pop();\n\n        // Keeping a reference to all PerformanceEntry created\n        // by this abstraction for historical events collection\n        // when adding a data callback\n        this.entries.push(measurement);\n\n        this.listeners.forEach(listener => {\n            if (this.shouldEmit(listener, measurement)) {\n                listener.callback([measurement]);\n            }\n        });\n\n        return measurement;\n    }\n\n    clear(name: string, id?: string): void {\n        if (!this.supportsPerformanceApi()) {\n            return;\n        }\n        const key = this.buildKey(name, id);\n        performance.clearMarks(this.START_PREFIX + key);\n        performance.clearMarks(this.STOP_PREFIX + key);\n    }\n\n    getEntries({ name, type }: GetEntriesOptions = {}): PerformanceEntry[] {\n        return this.entries.filter(entry => {\n            const satisfiesName = !name || entry.name === name;\n            const satisfiedType = !type || entry.entryType === type;\n            return satisfiesName && satisfiedType;\n        });\n    }\n\n    addPerformanceDataCallback(listener: PerformanceDataListener, buffer = false) {\n        this.listeners.push(listener);\n        if (buffer) {\n            const toEmit = this.entries.filter(entry => this.shouldEmit(listener, entry));\n            if (toEmit.length > 0) {\n                listener.callback(toEmit);\n            }\n        }\n    }\n\n    removePerformanceDataCallback(callback?: PerformanceCallbackFunction) {\n        if (!callback) {\n            this.listeners = [];\n        } else {\n            this.listeners.splice(\n                this.listeners.findIndex(listener => listener.callback === callback),\n                1,\n            );\n        }\n    }\n\n    /**\n     * Tor browser does not support the Performance API\n     * @returns {boolean} true if the Performance API is supported\n     */\n    private supportsPerformanceApi(): boolean {\n        return performance !== undefined && performance.mark !== undefined;\n    }\n\n    private shouldEmit(listener: PerformanceDataListener, entry: PerformanceEntry): boolean {\n        return !listener.entryNames || listener.entryNames.includes(entry.name);\n    }\n\n    /**\n     * Internal utility to ensure consistent name for the recording\n     * @param name Name of the recording\n     * @param id Specify an identifier appended to the measurement name\n     * @returns {string} a compound of the name and identifier if present\n     */\n    private buildKey(name: string, id?: string): string {\n        const suffix = id ? `:${id}` : '';\n        return `${name}${suffix}`;\n    }\n}\n\n// Convenience exports\nexport {\n    PerformanceEntryNames,\n};\n\n// Exposing those to the window object to bridge them from tests\nwindow.mxPerformanceMonitor = PerformanceMonitor.instance;\nwindow.mxPerformanceEntryNames = PerformanceEntryNames;\n"],"mappings":"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"}