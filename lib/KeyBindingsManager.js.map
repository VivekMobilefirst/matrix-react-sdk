{"version":3,"file":"KeyBindingsManager.js","names":["isKeyComboMatch","ev","combo","onMac","key","undefined","shiftKey","toLowerCase","comboCtrl","ctrlKey","comboAlt","altKey","comboShift","comboMeta","metaKey","evCtrl","evAlt","evShift","evMeta","ctrlOrCmdKey","KeyBindingsManager","defaultBindingsProvider","getAction","getters","getter","bindings","binding","find","it","keyCombo","IS_MAC","action","getMessageComposerAction","bindingsProviders","map","getMessageComposerBindings","getAutocompleteAction","getAutocompleteBindings","getRoomListAction","getRoomListBindings","getRoomAction","getRoomBindings","getNavigationAction","getNavigationBindings","getAccessibilityAction","getAccessibilityBindings","getCallAction","getCallBindings","getLabsAction","getLabsBindings","manager","getKeyBindingsManager"],"sources":["../src/KeyBindingsManager.ts"],"sourcesContent":["/*\nCopyright 2021 Clemens Zeidler\nCopyright 2022 Å imon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { KeyBindingAction } from \"./accessibility/KeyboardShortcuts\";\nimport { defaultBindingsProvider } from './KeyBindingsDefaults';\nimport { IS_MAC } from './Keyboard';\n\n/**\n * Represent a key combination.\n *\n * The combo is evaluated strictly, i.e. the KeyboardEvent must match exactly what is specified in the KeyCombo.\n */\nexport type KeyCombo = {\n    key?: string;\n\n    /** On PC: ctrl is pressed; on Mac: meta is pressed */\n    ctrlOrCmdKey?: boolean;\n\n    altKey?: boolean;\n    ctrlKey?: boolean;\n    metaKey?: boolean;\n    shiftKey?: boolean;\n};\n\nexport type KeyBinding = {\n    action: KeyBindingAction;\n    keyCombo: KeyCombo;\n};\n\n/**\n * Helper method to check if a KeyboardEvent matches a KeyCombo\n *\n * Note, this method is only exported for testing.\n */\nexport function isKeyComboMatch(ev: KeyboardEvent | React.KeyboardEvent, combo: KeyCombo, onMac: boolean): boolean {\n    if (combo.key !== undefined) {\n        // When shift is pressed, letters are returned as upper case chars. In this case do a lower case comparison.\n        // This works for letter combos such as shift + U as well for none letter combos such as shift + Escape.\n        // If shift is not pressed, the toLowerCase conversion can be avoided.\n        if (ev.shiftKey) {\n            if (ev.key.toLowerCase() !== combo.key.toLowerCase()) {\n                return false;\n            }\n        } else if (ev.key !== combo.key) {\n            return false;\n        }\n    }\n\n    const comboCtrl = combo.ctrlKey ?? false;\n    const comboAlt = combo.altKey ?? false;\n    const comboShift = combo.shiftKey ?? false;\n    const comboMeta = combo.metaKey ?? false;\n    // Tests mock events may keep the modifiers undefined; convert them to booleans\n    const evCtrl = ev.ctrlKey ?? false;\n    const evAlt = ev.altKey ?? false;\n    const evShift = ev.shiftKey ?? false;\n    const evMeta = ev.metaKey ?? false;\n    // When ctrlOrCmd is set, the keys need do evaluated differently on PC and Mac\n    if (combo.ctrlOrCmdKey) {\n        if (onMac) {\n            if (!evMeta\n                || evCtrl !== comboCtrl\n                || evAlt !== comboAlt\n                || evShift !== comboShift) {\n                return false;\n            }\n        } else {\n            if (!evCtrl\n                || evMeta !== comboMeta\n                || evAlt !== comboAlt\n                || evShift !== comboShift) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (evMeta !== comboMeta\n        || evCtrl !== comboCtrl\n        || evAlt !== comboAlt\n        || evShift !== comboShift) {\n        return false;\n    }\n\n    return true;\n}\n\nexport type KeyBindingGetter = () => KeyBinding[];\n\nexport interface IKeyBindingsProvider {\n    [key: string]: KeyBindingGetter;\n}\n\nexport class KeyBindingsManager {\n    /**\n     * List of key bindings providers.\n     *\n     * Key bindings from the first provider(s) in the list will have precedence over key bindings from later providers.\n     *\n     * To overwrite the default key bindings add a new providers before the default provider, e.g. a provider for\n     * customized key bindings.\n     */\n    bindingsProviders: IKeyBindingsProvider[] = [\n        defaultBindingsProvider,\n    ];\n\n    /**\n     * Finds a matching KeyAction for a given KeyboardEvent\n     */\n    private getAction(\n        getters: KeyBindingGetter[],\n        ev: KeyboardEvent | React.KeyboardEvent,\n    ): KeyBindingAction | undefined {\n        for (const getter of getters) {\n            const bindings = getter();\n            const binding = bindings.find(it => isKeyComboMatch(ev, it.keyCombo, IS_MAC));\n            if (binding) {\n                return binding.action;\n            }\n        }\n        return undefined;\n    }\n\n    getMessageComposerAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getMessageComposerBindings), ev);\n    }\n\n    getAutocompleteAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getAutocompleteBindings), ev);\n    }\n\n    getRoomListAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getRoomListBindings), ev);\n    }\n\n    getRoomAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getRoomBindings), ev);\n    }\n\n    getNavigationAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getNavigationBindings), ev);\n    }\n\n    getAccessibilityAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getAccessibilityBindings), ev);\n    }\n\n    getCallAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getCallBindings), ev);\n    }\n\n    getLabsAction(ev: KeyboardEvent | React.KeyboardEvent): KeyBindingAction | undefined {\n        return this.getAction(this.bindingsProviders.map(it => it.getLabsBindings), ev);\n    }\n}\n\nconst manager = new KeyBindingsManager();\n\nexport function getKeyBindingsManager(): KeyBindingsManager {\n    return manager;\n}\n"],"mappings":"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"}