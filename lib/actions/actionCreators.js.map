{"version":3,"file":"actionCreators.js","names":["asyncAction","id","fn","pendingFn","helper","dispatch","action","request","undefined","then","result","catch","err","AsyncActionPayload"],"sources":["../../src/actions/actionCreators.ts"],"sourcesContent":["/*\nCopyright 2017 New Vector Ltd\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { AsyncActionPayload } from \"../dispatcher/payloads\";\n\n/**\n * Create an action thunk that will dispatch actions indicating the current\n * status of the Promise returned by fn.\n *\n * @param {string} id the id to give the dispatched actions. This is given a\n *                    suffix determining whether it is pending, successful or\n *                    a failure.\n * @param {function} fn a function that returns a Promise.\n * @param {function?} pendingFn a function that returns an object to assign\n *                              to the `request` key of the ${id}.pending\n *                              payload.\n * @returns {AsyncActionPayload} an async action payload. Includes a function\n *                     that uses its single argument as a dispatch function\n *                     to dispatch the following actions:\n *                         `${id}.pending` and either\n *                         `${id}.success` or\n *                         `${id}.failure`.\n *\n *                     The shape of each are:\n *                     { action: '${id}.pending', request }\n *                     { action: '${id}.success', result }\n *                     { action: '${id}.failure', err }\n *\n *                     where `request` is returned by `pendingFn` and\n *                     result is the result of the promise returned by\n *                     `fn`.\n */\nexport function asyncAction(id: string, fn: () => Promise<any>, pendingFn: () => any | null): AsyncActionPayload {\n    const helper = (dispatch) => {\n        dispatch({\n            action: id + '.pending',\n            request: typeof pendingFn === 'function' ? pendingFn() : undefined,\n        });\n        fn().then((result) => {\n            dispatch({ action: id + '.success', result });\n        }).catch((err) => {\n            dispatch({ action: id + '.failure', err });\n        });\n    };\n    return new AsyncActionPayload(helper);\n}\n"],"mappings":";;;;;;;AAiBA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAT,CAAqBC,EAArB,EAAiCC,EAAjC,EAAyDC,SAAzD,EAA0G;EAC7G,MAAMC,MAAM,GAAIC,QAAD,IAAc;IACzBA,QAAQ,CAAC;MACLC,MAAM,EAAEL,EAAE,GAAG,UADR;MAELM,OAAO,EAAE,OAAOJ,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDK;IAFpD,CAAD,CAAR;IAIAN,EAAE,GAAGO,IAAL,CAAWC,MAAD,IAAY;MAClBL,QAAQ,CAAC;QAAEC,MAAM,EAAEL,EAAE,GAAG,UAAf;QAA2BS;MAA3B,CAAD,CAAR;IACH,CAFD,EAEGC,KAFH,CAEUC,GAAD,IAAS;MACdP,QAAQ,CAAC;QAAEC,MAAM,EAAEL,EAAE,GAAG,UAAf;QAA2BW;MAA3B,CAAD,CAAR;IACH,CAJD;EAKH,CAVD;;EAWA,OAAO,IAAIC,4BAAJ,CAAuBT,MAAvB,CAAP;AACH"}