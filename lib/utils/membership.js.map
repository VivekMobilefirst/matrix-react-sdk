{"version":3,"file":"membership.js","names":["EffectiveMembership","splitRoomsByMembership","rooms","split","Invite","Join","Leave","room","getEffectiveMembership","getMyMembership","push","membership","isJoinedOrNearlyJoined","effective","waitForMember","client","roomId","userId","opts","timeout","handler","Promise","resolve","_","__","member","on","RoomStateEvent","NewMember","setTimeout","finally","removeListener"],"sources":["../../src/utils/membership.ts"],"sourcesContent":["/*\nCopyright 2020 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { RoomMember } from \"matrix-js-sdk/src/models/room-member\";\nimport { RoomStateEvent } from \"matrix-js-sdk/src/models/room-state\";\n\n/**\n * Approximation of a membership status for a given room.\n */\nexport enum EffectiveMembership {\n    /**\n     * The user is effectively joined to the room. For example, actually joined\n     * or knocking on the room (when that becomes possible).\n     */\n    Join = \"JOIN\",\n\n    /**\n     * The user is effectively invited to the room. Currently this is a direct map\n     * to the invite membership as no other membership states are effectively\n     * invites.\n     */\n    Invite = \"INVITE\",\n\n    /**\n     * The user is effectively no longer in the room. For example, kicked,\n     * banned, or voluntarily left.\n     */\n    Leave = \"LEAVE\",\n}\n\nexport interface MembershipSplit {\n    // @ts-ignore - TS wants this to be a string key, but we know better.\n    [state: EffectiveMembership]: Room[];\n}\n\nexport function splitRoomsByMembership(rooms: Room[]): MembershipSplit {\n    const split: MembershipSplit = {\n        [EffectiveMembership.Invite]: [],\n        [EffectiveMembership.Join]: [],\n        [EffectiveMembership.Leave]: [],\n    };\n\n    for (const room of rooms) {\n        split[getEffectiveMembership(room.getMyMembership())].push(room);\n    }\n\n    return split;\n}\n\nexport function getEffectiveMembership(membership: string): EffectiveMembership {\n    if (membership === 'invite') {\n        return EffectiveMembership.Invite;\n    } else if (membership === 'join') {\n        // TODO: Include knocks? Update docs as needed in the enum. https://github.com/vector-im/element-web/issues/14237\n        return EffectiveMembership.Join;\n    } else {\n        // Probably a leave, kick, or ban\n        return EffectiveMembership.Leave;\n    }\n}\n\nexport function isJoinedOrNearlyJoined(membership: string): boolean {\n    const effective = getEffectiveMembership(membership);\n    return effective === EffectiveMembership.Join || effective === EffectiveMembership.Invite;\n}\n\n/**\n * Try to ensure the user is already in the megolm session before continuing\n * NOTE: this assumes you've just created the room and there's not been an opportunity\n * for other code to run, so we shouldn't miss RoomState.newMember when it comes by.\n */\nexport async function waitForMember(client: MatrixClient, roomId: string, userId: string, opts = { timeout: 1500 }) {\n    const { timeout } = opts;\n    let handler;\n    return new Promise((resolve) => {\n        handler = function(_, __, member: RoomMember) { // eslint-disable-line @typescript-eslint/naming-convention\n            if (member.userId !== userId) return;\n            if (member.roomId !== roomId) return;\n            resolve(true);\n        };\n        client.on(RoomStateEvent.NewMember, handler);\n\n        /* We don't want to hang if this goes wrong, so we proceed and hope the other\n           user is already in the megolm session */\n        setTimeout(resolve, timeout, false);\n    }).finally(() => {\n        client.removeListener(RoomStateEvent.NewMember, handler);\n    });\n}\n"],"mappings":";;;;;;;;;;;AAmBA;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;IACYA,mB;;;WAAAA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,mCAAAA,mB;;AA0BL,SAASC,sBAAT,CAAgCC,KAAhC,EAAgE;EACnE,MAAMC,KAAsB,GAAG;IAC3B,CAACH,mBAAmB,CAACI,MAArB,GAA8B,EADH;IAE3B,CAACJ,mBAAmB,CAACK,IAArB,GAA4B,EAFD;IAG3B,CAACL,mBAAmB,CAACM,KAArB,GAA6B;EAHF,CAA/B;;EAMA,KAAK,MAAMC,IAAX,IAAmBL,KAAnB,EAA0B;IACtBC,KAAK,CAACK,sBAAsB,CAACD,IAAI,CAACE,eAAL,EAAD,CAAvB,CAAL,CAAsDC,IAAtD,CAA2DH,IAA3D;EACH;;EAED,OAAOJ,KAAP;AACH;;AAEM,SAASK,sBAAT,CAAgCG,UAAhC,EAAyE;EAC5E,IAAIA,UAAU,KAAK,QAAnB,EAA6B;IACzB,OAAOX,mBAAmB,CAACI,MAA3B;EACH,CAFD,MAEO,IAAIO,UAAU,KAAK,MAAnB,EAA2B;IAC9B;IACA,OAAOX,mBAAmB,CAACK,IAA3B;EACH,CAHM,MAGA;IACH;IACA,OAAOL,mBAAmB,CAACM,KAA3B;EACH;AACJ;;AAEM,SAASM,sBAAT,CAAgCD,UAAhC,EAA6D;EAChE,MAAME,SAAS,GAAGL,sBAAsB,CAACG,UAAD,CAAxC;EACA,OAAOE,SAAS,KAAKb,mBAAmB,CAACK,IAAlC,IAA0CQ,SAAS,KAAKb,mBAAmB,CAACI,MAAnF;AACH;AAED;AACA;AACA;AACA;AACA;;;AACO,eAAeU,aAAf,CAA6BC,MAA7B,EAAmDC,MAAnD,EAAmEC,MAAnE,EAA6G;EAAA,IAA1BC,IAA0B,uEAAnB;IAAEC,OAAO,EAAE;EAAX,CAAmB;EAChH,MAAM;IAAEA;EAAF,IAAcD,IAApB;EACA,IAAIE,OAAJ;EACA,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;IAC5BF,OAAO,GAAG,UAASG,CAAT,EAAYC,EAAZ,EAAgBC,MAAhB,EAAoC;MAAE;MAC5C,IAAIA,MAAM,CAACR,MAAP,KAAkBA,MAAtB,EAA8B;MAC9B,IAAIQ,MAAM,CAACT,MAAP,KAAkBA,MAAtB,EAA8B;MAC9BM,OAAO,CAAC,IAAD,CAAP;IACH,CAJD;;IAKAP,MAAM,CAACW,EAAP,CAAUC,yBAAA,CAAeC,SAAzB,EAAoCR,OAApC;IAEA;AACR;;IACQS,UAAU,CAACP,OAAD,EAAUH,OAAV,EAAmB,KAAnB,CAAV;EACH,CAXM,EAWJW,OAXI,CAWI,MAAM;IACbf,MAAM,CAACgB,cAAP,CAAsBJ,yBAAA,CAAeC,SAArC,EAAgDR,OAAhD;EACH,CAbM,CAAP;AAcH"}