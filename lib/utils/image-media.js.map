{"version":3,"file":"image-media.js","names":["BLURHASH_FIELD","MAX_WIDTH","MAX_HEIGHT","createThumbnail","element","inputWidth","inputHeight","mimeType","calculateBlurhash","targetWidth","targetHeight","Math","floor","canvas","context","window","OffscreenCanvas","getContext","e","document","createElement","width","height","drawImage","thumbnailPromise","convertToBlob","type","Promise","resolve","toBlob","imageData","getImageData","blurhash","BlurhashEncoder","instance","getBlurhash","undefined","thumbnail","info","thumbnail_info","w","h","mimetype","size"],"sources":["../../src/utils/image-media.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { BlurhashEncoder } from \"../BlurhashEncoder\";\n\ntype ThumbnailableElement = HTMLImageElement | HTMLVideoElement;\n\ninterface IThumbnail {\n    info: {\n        // eslint-disable-next-line camelcase\n        thumbnail_info: {\n            w: number;\n            h: number;\n            mimetype: string;\n            size: number;\n        };\n        w: number;\n        h: number;\n        [BLURHASH_FIELD]: string;\n    };\n    thumbnail: Blob;\n}\n\nexport const BLURHASH_FIELD = \"xyz.amorgan.blurhash\"; // MSC2448\n\nconst MAX_WIDTH = 800;\nconst MAX_HEIGHT = 600;\n\n/**\n * Create a thumbnail for a image DOM element.\n * The image will be smaller than MAX_WIDTH and MAX_HEIGHT.\n * The thumbnail will have the same aspect ratio as the original.\n * Draws the element into a canvas using CanvasRenderingContext2D.drawImage\n * Then calls Canvas.toBlob to get a blob object for the image data.\n *\n * Since it needs to calculate the dimensions of the source image and the\n * thumbnailed image it returns an info object filled out with information\n * about the original image and the thumbnail.\n *\n * @param {HTMLElement} element The element to thumbnail.\n * @param {number} inputWidth The width of the image in the input element.\n * @param {number} inputHeight the width of the image in the input element.\n * @param {string} mimeType The mimeType to save the blob as.\n * @param {boolean} calculateBlurhash Whether to calculate a blurhash of the given image too.\n * @return {Promise} A promise that resolves with an object with an info key\n *  and a thumbnail key.\n */\nexport async function createThumbnail(\n    element: ThumbnailableElement,\n    inputWidth: number,\n    inputHeight: number,\n    mimeType: string,\n    calculateBlurhash = true,\n): Promise<IThumbnail> {\n    let targetWidth = inputWidth;\n    let targetHeight = inputHeight;\n    if (targetHeight > MAX_HEIGHT) {\n        targetWidth = Math.floor(targetWidth * (MAX_HEIGHT / targetHeight));\n        targetHeight = MAX_HEIGHT;\n    }\n    if (targetWidth > MAX_WIDTH) {\n        targetHeight = Math.floor(targetHeight * (MAX_WIDTH / targetWidth));\n        targetWidth = MAX_WIDTH;\n    }\n\n    let canvas: HTMLCanvasElement | OffscreenCanvas;\n    let context: CanvasRenderingContext2D;\n    try {\n        canvas = new window.OffscreenCanvas(targetWidth, targetHeight);\n        context = canvas.getContext(\"2d\");\n    } catch (e) {\n        // Fallback support for other browsers (Safari and Firefox for now)\n        canvas = document.createElement(\"canvas\");\n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n        context = canvas.getContext(\"2d\");\n    }\n\n    context.drawImage(element, 0, 0, targetWidth, targetHeight);\n\n    let thumbnailPromise: Promise<Blob>;\n\n    if (window.OffscreenCanvas) {\n        thumbnailPromise = (canvas as OffscreenCanvas).convertToBlob({ type: mimeType });\n    } else {\n        thumbnailPromise = new Promise<Blob>(resolve => (canvas as HTMLCanvasElement).toBlob(resolve, mimeType));\n    }\n\n    const imageData = context.getImageData(0, 0, targetWidth, targetHeight);\n    // thumbnailPromise and blurhash promise are being awaited concurrently\n    const blurhash = calculateBlurhash ? await BlurhashEncoder.instance.getBlurhash(imageData) : undefined;\n    const thumbnail = await thumbnailPromise;\n\n    return {\n        info: {\n            thumbnail_info: {\n                w: targetWidth,\n                h: targetHeight,\n                mimetype: thumbnail.type,\n                size: thumbnail.size,\n            },\n            w: inputWidth,\n            h: inputHeight,\n            [BLURHASH_FIELD]: blurhash,\n        },\n        thumbnail,\n    };\n}\n"],"mappings":";;;;;;;;AAgBA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBO,MAAMA,cAAc,GAAG,sBAAvB,C,CAA+C;;;AAEtD,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,UAAU,GAAG,GAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeC,eAAf,CACHC,OADG,EAEHC,UAFG,EAGHC,WAHG,EAIHC,QAJG,EAMgB;EAAA,IADnBC,iBACmB,uEADC,IACD;EACnB,IAAIC,WAAW,GAAGJ,UAAlB;EACA,IAAIK,YAAY,GAAGJ,WAAnB;;EACA,IAAII,YAAY,GAAGR,UAAnB,EAA+B;IAC3BO,WAAW,GAAGE,IAAI,CAACC,KAAL,CAAWH,WAAW,IAAIP,UAAU,GAAGQ,YAAjB,CAAtB,CAAd;IACAA,YAAY,GAAGR,UAAf;EACH;;EACD,IAAIO,WAAW,GAAGR,SAAlB,EAA6B;IACzBS,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWF,YAAY,IAAIT,SAAS,GAAGQ,WAAhB,CAAvB,CAAf;IACAA,WAAW,GAAGR,SAAd;EACH;;EAED,IAAIY,MAAJ;EACA,IAAIC,OAAJ;;EACA,IAAI;IACAD,MAAM,GAAG,IAAIE,MAAM,CAACC,eAAX,CAA2BP,WAA3B,EAAwCC,YAAxC,CAAT;IACAI,OAAO,GAAGD,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;EACH,CAHD,CAGE,OAAOC,CAAP,EAAU;IACR;IACAL,MAAM,GAAGM,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;IACAP,MAAM,CAACQ,KAAP,GAAeZ,WAAf;IACAI,MAAM,CAACS,MAAP,GAAgBZ,YAAhB;IACAI,OAAO,GAAGD,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;EACH;;EAEDH,OAAO,CAACS,SAAR,CAAkBnB,OAAlB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCK,WAAjC,EAA8CC,YAA9C;EAEA,IAAIc,gBAAJ;;EAEA,IAAIT,MAAM,CAACC,eAAX,EAA4B;IACxBQ,gBAAgB,GAAIX,MAAD,CAA4BY,aAA5B,CAA0C;MAAEC,IAAI,EAAEnB;IAAR,CAA1C,CAAnB;EACH,CAFD,MAEO;IACHiB,gBAAgB,GAAG,IAAIG,OAAJ,CAAkBC,OAAO,IAAKf,MAAD,CAA8BgB,MAA9B,CAAqCD,OAArC,EAA8CrB,QAA9C,CAA7B,CAAnB;EACH;;EAED,MAAMuB,SAAS,GAAGhB,OAAO,CAACiB,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2BtB,WAA3B,EAAwCC,YAAxC,CAAlB,CAnCmB,CAoCnB;;EACA,MAAMsB,QAAQ,GAAGxB,iBAAiB,GAAG,MAAMyB,gCAAA,CAAgBC,QAAhB,CAAyBC,WAAzB,CAAqCL,SAArC,CAAT,GAA2DM,SAA7F;EACA,MAAMC,SAAS,GAAG,MAAMb,gBAAxB;EAEA,OAAO;IACHc,IAAI,EAAE;MACFC,cAAc,EAAE;QACZC,CAAC,EAAE/B,WADS;QAEZgC,CAAC,EAAE/B,YAFS;QAGZgC,QAAQ,EAAEL,SAAS,CAACX,IAHR;QAIZiB,IAAI,EAAEN,SAAS,CAACM;MAJJ,CADd;MAOFH,CAAC,EAAEnC,UAPD;MAQFoC,CAAC,EAAEnC,WARD;MASF,CAACN,cAAD,GAAkBgC;IAThB,CADH;IAYHK;EAZG,CAAP;AAcH"}