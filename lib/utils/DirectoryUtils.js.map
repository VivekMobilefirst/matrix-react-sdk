{"version":3,"file":"DirectoryUtils.js","names":["ALL_ROOMS","instanceForInstanceId","protocols","instanceId","proto","Object","keys","instances","Array","instance","instance_id","protocolNameForInstanceId"],"sources":["../../src/utils/DirectoryUtils.ts"],"sourcesContent":["/*\nCopyright 2018, 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IInstance, IProtocol } from \"matrix-js-sdk/src/client\";\n\n// XXX: We would ideally use a symbol here but we can't since we save this value to localStorage\nexport const ALL_ROOMS = \"ALL_ROOMS\";\n\nexport type Protocols = Record<string, IProtocol>;\n\n// Find a protocol 'instance' with a given instance_id\n// in the supplied protocols dict\nexport function instanceForInstanceId(protocols: Protocols, instanceId: string | null | undefined): IInstance | null {\n    if (!instanceId) return null;\n    for (const proto of Object.keys(protocols)) {\n        if (!protocols[proto].instances && protocols[proto].instances instanceof Array) continue;\n        for (const instance of protocols[proto].instances) {\n            if (instance.instance_id == instanceId) return instance;\n        }\n    }\n    return null;\n}\n\n// given an instance_id, return the name of the protocol for\n// that instance ID in the supplied protocols dict\nexport function protocolNameForInstanceId(protocols: Protocols, instanceId: string | null | undefined): string | null {\n    if (!instanceId) return null;\n    for (const proto of Object.keys(protocols)) {\n        if (!protocols[proto].instances && protocols[proto].instances instanceof Array) continue;\n        for (const instance of protocols[proto].instances) {\n            if (instance.instance_id == instanceId) return proto;\n        }\n    }\n    return null;\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACO,MAAMA,SAAS,GAAG,WAAlB;;;AAIP;AACA;AACO,SAASC,qBAAT,CAA+BC,SAA/B,EAAqDC,UAArD,EAA8G;EACjH,IAAI,CAACA,UAAL,EAAiB,OAAO,IAAP;;EACjB,KAAK,MAAMC,KAAX,IAAoBC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAApB,EAA4C;IACxC,IAAI,CAACA,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAlB,IAA+BL,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAjB,YAAsCC,KAAzE,EAAgF;;IAChF,KAAK,MAAMC,QAAX,IAAuBP,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAxC,EAAmD;MAC/C,IAAIE,QAAQ,CAACC,WAAT,IAAwBP,UAA5B,EAAwC,OAAOM,QAAP;IAC3C;EACJ;;EACD,OAAO,IAAP;AACH,C,CAED;AACA;;;AACO,SAASE,yBAAT,CAAmCT,SAAnC,EAAyDC,UAAzD,EAA+G;EAClH,IAAI,CAACA,UAAL,EAAiB,OAAO,IAAP;;EACjB,KAAK,MAAMC,KAAX,IAAoBC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAApB,EAA4C;IACxC,IAAI,CAACA,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAlB,IAA+BL,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAjB,YAAsCC,KAAzE,EAAgF;;IAChF,KAAK,MAAMC,QAAX,IAAuBP,SAAS,CAACE,KAAD,CAAT,CAAiBG,SAAxC,EAAmD;MAC/C,IAAIE,QAAQ,CAACC,WAAT,IAAwBP,UAA5B,EAAwC,OAAOC,KAAP;IAC3C;EACJ;;EACD,OAAO,IAAP;AACH"}