{"version":3,"file":"exportCSS.js","names":["cssSelectorTextClassesRegex","mutateCssText","css","replace","isLightTheme","sheet","ownerNode","dataset","mxTheme","toLowerCase","getRulesFromCssFile","path","doc","document","implementation","createHTMLDocument","styleElement","createElement","res","fetch","textContent","text","body","appendChild","getExportCSS","usedClasses","stylesheets","Array","from","styleSheets","filter","s","href","endsWith","some","querySelector","push","stylesheet","rule","cssRules","CSSFontFaceRule","selectorText","split","every","selector","classes","match","c","has","substring","cssText","customCSS"],"sources":["../../../src/utils/exportUtils/exportCSS.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport customCSS from \"!!raw-loader!./exportCustomCSS.css\";\n\nconst cssSelectorTextClassesRegex = /\\.[\\w-]+/g;\n\nfunction mutateCssText(css: string): string {\n    // replace used fonts so that we don't have to bundle Inter & Inconsalata\n    return css\n        .replace(\n            /font-family: ?(Inter|'Inter'|\"Inter\")/g,\n            `font-family: -apple-system, BlinkMacSystemFont, avenir next,\n            avenir, segoe ui, helvetica neue, helvetica, Ubuntu, roboto, noto, arial, sans-serif`,\n        )\n        .replace(\n            /font-family: ?Inconsolata/g,\n            \"font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace\",\n        );\n}\n\nfunction isLightTheme(sheet: CSSStyleSheet): boolean {\n    return (<HTMLStyleElement>sheet.ownerNode).dataset.mxTheme?.toLowerCase() === \"light\";\n}\n\nasync function getRulesFromCssFile(path: string): Promise<CSSStyleSheet> {\n    const doc = document.implementation.createHTMLDocument(\"\");\n    const styleElement = document.createElement(\"style\");\n\n    const res = await fetch(path);\n    styleElement.textContent = await res.text();\n    // the style will only be parsed once it is added to a document\n    doc.body.appendChild(styleElement);\n\n    return styleElement.sheet;\n}\n\n// naively culls unused css rules based on which classes are present in the html,\n// doesn't cull rules which won't apply due to the full selector not matching but gets rid of a LOT of cruft anyway.\nconst getExportCSS = async (usedClasses: Set<string>): Promise<string> => {\n    // only include bundle.css and the data-mx-theme=light styling\n    const stylesheets = Array.from(document.styleSheets).filter(s => {\n        return s.href?.endsWith(\"bundle.css\") || isLightTheme(s);\n    });\n\n    // If the light theme isn't loaded we will have to fetch & parse it manually\n    if (!stylesheets.some(isLightTheme)) {\n        const href = document.querySelector<HTMLLinkElement>('link[rel=\"stylesheet\"][href$=\"theme-light.css\"]').href;\n        stylesheets.push(await getRulesFromCssFile(href));\n    }\n\n    let css = \"\";\n    for (const stylesheet of stylesheets) {\n        for (const rule of stylesheet.cssRules) {\n            if (rule instanceof CSSFontFaceRule) continue; // we don't want to bundle any fonts\n\n            const selectorText = (rule as CSSStyleRule).selectorText;\n\n            // only skip the rule if all branches (,) of the selector are redundant\n            if (selectorText?.split(\",\").every(selector => {\n                const classes = selector.match(cssSelectorTextClassesRegex);\n                if (classes && !classes.every(c => usedClasses.has(c.substring(1)))) {\n                    return true; // signal as a redundant selector\n                }\n            })) {\n                continue; // skip this rule as it is redundant\n            }\n\n            css += mutateCssText(rule.cssText) + \"\\n\";\n        }\n    }\n\n    return css + customCSS;\n};\n\nexport default getExportCSS;\n"],"mappings":";;;;;;;;;AAgBA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,MAAMA,2BAA2B,GAAG,WAApC;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4C;EACxC;EACA,OAAOA,GAAG,CACLC,OADE,CAEC,wCAFD,EAGE;AACb,iGAJW,EAMFA,OANE,CAOC,4BAPD,EAQC,kFARD,CAAP;AAUH;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAAqD;EACjD,OAA0BA,KAAK,CAACC,SAAzB,CAAoCC,OAApC,CAA4CC,OAA5C,EAAqDC,WAArD,OAAuE,OAA9E;AACH;;AAED,eAAeC,mBAAf,CAAmCC,IAAnC,EAAyE;EACrE,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwBC,kBAAxB,CAA2C,EAA3C,CAAZ;EACA,MAAMC,YAAY,GAAGH,QAAQ,CAACI,aAAT,CAAuB,OAAvB,CAArB;EAEA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACR,IAAD,CAAvB;EACAK,YAAY,CAACI,WAAb,GAA2B,MAAMF,GAAG,CAACG,IAAJ,EAAjC,CALqE,CAMrE;;EACAT,GAAG,CAACU,IAAJ,CAASC,WAAT,CAAqBP,YAArB;EAEA,OAAOA,YAAY,CAACX,KAApB;AACH,C,CAED;AACA;;;AACA,MAAMmB,YAAY,GAAG,MAAOC,WAAP,IAAqD;EACtE;EACA,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWf,QAAQ,CAACgB,WAApB,EAAiCC,MAAjC,CAAwCC,CAAC,IAAI;IAC7D,OAAOA,CAAC,CAACC,IAAF,EAAQC,QAAR,CAAiB,YAAjB,KAAkC7B,YAAY,CAAC2B,CAAD,CAArD;EACH,CAFmB,CAApB,CAFsE,CAMtE;;EACA,IAAI,CAACL,WAAW,CAACQ,IAAZ,CAAiB9B,YAAjB,CAAL,EAAqC;IACjC,MAAM4B,IAAI,GAAGnB,QAAQ,CAACsB,aAAT,CAAwC,iDAAxC,EAA2FH,IAAxG;IACAN,WAAW,CAACU,IAAZ,CAAiB,MAAM1B,mBAAmB,CAACsB,IAAD,CAA1C;EACH;;EAED,IAAI9B,GAAG,GAAG,EAAV;;EACA,KAAK,MAAMmC,UAAX,IAAyBX,WAAzB,EAAsC;IAClC,KAAK,MAAMY,IAAX,IAAmBD,UAAU,CAACE,QAA9B,EAAwC;MACpC,IAAID,IAAI,YAAYE,eAApB,EAAqC,SADD,CACW;;MAE/C,MAAMC,YAAY,GAAIH,IAAD,CAAuBG,YAA5C,CAHoC,CAKpC;;MACA,IAAIA,YAAY,EAAEC,KAAd,CAAoB,GAApB,EAAyBC,KAAzB,CAA+BC,QAAQ,IAAI;QAC3C,MAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAT,CAAe9C,2BAAf,CAAhB;;QACA,IAAI6C,OAAO,IAAI,CAACA,OAAO,CAACF,KAAR,CAAcI,CAAC,IAAItB,WAAW,CAACuB,GAAZ,CAAgBD,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAhB,CAAnB,CAAhB,EAAqE;UACjE,OAAO,IAAP,CADiE,CACpD;QAChB;MACJ,CALG,CAAJ,EAKI;QACA,SADA,CACU;MACb;;MAED/C,GAAG,IAAID,aAAa,CAACqC,IAAI,CAACY,OAAN,CAAb,GAA8B,IAArC;IACH;EACJ;;EAED,OAAOhD,GAAG,GAAGiD,wBAAb;AACH,CAlCD;;eAoCe3B,Y"}