{"version":3,"file":"GroupCallUtils.js","names":["STUCK_DEVICE_TIMEOUT_MS","CALL_STATE_EVENT_TYPE","UnstableValue","CALL_MEMBER_STATE_EVENT_TYPE","CALL_STATE_EVENT_TERMINATED","getRoomState","client","roomId","getRoom","getLiveTimeline","getState","EventTimeline","FORWARDS","getRoomStateEvents","type","roomState","getStateEvents","name","altName","getGroupCall","sort","a","b","getTs","find","event","getContent","useConnectedMembers","callEvent","matches","getType","callId","getStateKey","now","Date","getRoomId","filter","callMemberEvent","expiresTs","calls","call","removeDevices","deviceIds","getUserId","callMemberEventContent","Array","isArray","length","newContent","deepCopy","changed","forEach","device","includes","sendStateEvent","removeOurDevice","getDeviceId","fixStuckDevices","includeCurrentDevice","devices","myDevices","getDevices","currentDeviceId","devicesToBeRemoved","last_seen_ts","lastSeenTs","device_id","deviceId","map","d"],"sources":["../../src/utils/GroupCallUtils.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { EventTimeline, MatrixClient, MatrixEvent, RoomState } from \"matrix-js-sdk/src/matrix\";\nimport { UnstableValue } from \"matrix-js-sdk/src/NamespacedValue\";\nimport { deepCopy } from \"matrix-js-sdk/src/utils\";\n\nexport const STUCK_DEVICE_TIMEOUT_MS = 1000 * 60 * 60; // 1 hour\n\nexport const CALL_STATE_EVENT_TYPE = new UnstableValue(\"m.call\", \"org.matrix.msc3401.call\");\nexport const CALL_MEMBER_STATE_EVENT_TYPE = new UnstableValue(\"m.call.member\", \"org.matrix.msc3401.call.member\");\nconst CALL_STATE_EVENT_TERMINATED = \"m.terminated\";\n\ninterface MDevice {\n    [\"m.device_id\"]: string;\n}\n\ninterface MCall {\n    [\"m.call_id\"]: string;\n    [\"m.devices\"]: Array<MDevice>;\n}\n\ninterface MCallMemberContent {\n    [\"m.expires_ts\"]: number;\n    [\"m.calls\"]: Array<MCall>;\n}\n\nconst getRoomState = (client: MatrixClient, roomId: string): RoomState => {\n    return client.getRoom(roomId)\n        ?.getLiveTimeline()\n        ?.getState?.(EventTimeline.FORWARDS);\n};\n\n/**\n * Returns all room state events for the stable and unstable type value.\n */\nconst getRoomStateEvents = (\n    client: MatrixClient,\n    roomId: string,\n    type: UnstableValue<string, string>,\n): MatrixEvent[] => {\n    const roomState = getRoomState(client, roomId);\n    if (!roomState) return [];\n\n    return [\n        ...roomState.getStateEvents(type.name),\n        ...roomState.getStateEvents(type.altName),\n    ];\n};\n\n/**\n * Finds the latest, non-terminated call state event.\n */\nexport const getGroupCall = (client: MatrixClient, roomId: string): MatrixEvent => {\n    return getRoomStateEvents(client, roomId, CALL_STATE_EVENT_TYPE)\n        .sort((a: MatrixEvent, b: MatrixEvent) => b.getTs() - a.getTs())\n        .find((event: MatrixEvent) => {\n            return !(CALL_STATE_EVENT_TERMINATED in event.getContent());\n        });\n};\n\n/**\n * Finds the \"m.call.member\" events for an \"m.call\" event.\n *\n * @returns {MatrixEvent[]} non-expired \"m.call.member\" events for the call\n */\nexport const useConnectedMembers = (client: MatrixClient, callEvent: MatrixEvent): MatrixEvent[] => {\n    if (!CALL_STATE_EVENT_TYPE.matches(callEvent.getType())) return [];\n\n    const callId = callEvent.getStateKey();\n    const now = Date.now();\n\n    return getRoomStateEvents(client, callEvent.getRoomId(), CALL_MEMBER_STATE_EVENT_TYPE)\n        .filter((callMemberEvent: MatrixEvent): boolean => {\n            const {\n                [\"m.expires_ts\"]: expiresTs,\n                [\"m.calls\"]: calls,\n            } = callMemberEvent.getContent<MCallMemberContent>();\n\n            // state event expired\n            if (expiresTs && expiresTs < now) return false;\n\n            return !!calls?.find((call: MCall) => call[\"m.call_id\"] === callId);\n        }) || [];\n};\n\n/**\n * Removes a list of devices from a call.\n * Only works for the current user's devices.\n */\nconst removeDevices = async (client: MatrixClient, callEvent: MatrixEvent, deviceIds: string[]): Promise<void> => {\n    if (!CALL_STATE_EVENT_TYPE.matches(callEvent.getType())) return;\n\n    const roomId = callEvent.getRoomId();\n    const roomState = getRoomState(client, roomId);\n    if (!roomState) return;\n\n    const callMemberEvent = roomState.getStateEvents(CALL_MEMBER_STATE_EVENT_TYPE.name, client.getUserId())\n        ?? roomState.getStateEvents(CALL_MEMBER_STATE_EVENT_TYPE.altName, client.getUserId());\n    const callMemberEventContent = callMemberEvent?.getContent<MCallMemberContent>();\n    if (\n        !Array.isArray(callMemberEventContent?.[\"m.calls\"])\n        || callMemberEventContent?.[\"m.calls\"].length === 0\n    ) {\n        return;\n    }\n\n    // copy the content to prevent mutations\n    const newContent = deepCopy(callMemberEventContent);\n    const callId = callEvent.getStateKey();\n    let changed = false;\n\n    newContent[\"m.calls\"].forEach((call: MCall) => {\n        // skip other calls\n        if (call[\"m.call_id\"] !== callId) return;\n\n        call[\"m.devices\"] = call[\"m.devices\"]?.filter((device: MDevice) => {\n            if (deviceIds.includes(device[\"m.device_id\"])) {\n                changed = true;\n                return false;\n            }\n\n            return true;\n        });\n    });\n\n    if (changed) {\n        // only send a new state event if there has been a change\n        newContent[\"m.expires_ts\"] = Date.now() + STUCK_DEVICE_TIMEOUT_MS;\n        await client.sendStateEvent(\n            roomId,\n            CALL_MEMBER_STATE_EVENT_TYPE.name,\n            newContent,\n            client.getUserId(),\n        );\n    }\n};\n\n/**\n * Removes the current device from a call.\n */\nexport const removeOurDevice = async (client: MatrixClient, callEvent: MatrixEvent) => {\n    return removeDevices(client, callEvent, [client.getDeviceId()]);\n};\n\n/**\n * Removes all devices of the current user that have not been seen within the STUCK_DEVICE_TIMEOUT_MS.\n * Does per default not remove the current device unless includeCurrentDevice is true.\n *\n * @param {boolean} includeCurrentDevice - Whether to include the current device of this session here.\n */\nexport const fixStuckDevices = async (client: MatrixClient, callEvent: MatrixEvent, includeCurrentDevice: boolean) => {\n    const now = Date.now();\n    const { devices: myDevices } = await client.getDevices();\n    const currentDeviceId = client.getDeviceId();\n    const devicesToBeRemoved = myDevices.filter(({ last_seen_ts: lastSeenTs, device_id: deviceId }) => {\n        return lastSeenTs\n            && (deviceId !== currentDeviceId || includeCurrentDevice)\n            && (now - lastSeenTs) > STUCK_DEVICE_TIMEOUT_MS;\n    }).map(d => d.device_id);\n    return removeDevices(client, callEvent, devicesToBeRemoved);\n};\n"],"mappings":"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"}