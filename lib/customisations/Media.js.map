{"version":3,"file":"Media.js","names":["Media","constructor","prepared","client","MatrixClientPeg","get","Error","isEncrypted","file","srcMxc","mxc","thumbnailMxc","thumbnail","hasThumbnail","srcHttp","mxcUrlToHttp","thumbnailHttp","getThumbnailHttp","width","height","mode","Math","floor","window","devicePixelRatio","getThumbnailOfSourceHttp","getSquareThumbnailHttp","dim","downloadSource","fetch","mediaFromContent","content","prepEventContentAsMedia","mediaFromMxc","url"],"sources":["../../src/customisations/Media.ts"],"sourcesContent":["/*\n * Copyright 2021 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { ResizeMethod } from \"matrix-js-sdk/src/@types/partials\";\nimport { Optional } from \"matrix-events-sdk\";\n\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\nimport { IMediaEventContent, IPreparedMedia, prepEventContentAsMedia } from \"./models/IMediaEventContent\";\n\n// Populate this class with the details of your customisations when copying it.\n\n// Implementation note: The Media class must complete the contract as shown here, though\n// the constructor can be whatever is relevant to your implementation. The mediaForX\n// functions below create an instance of the Media class and are used throughout the\n// project.\n\n/**\n * A media object is a representation of a \"source media\" and an optional\n * \"thumbnail media\", derived from event contents or external sources.\n */\nexport class Media {\n    private client: MatrixClient;\n\n    // Per above, this constructor signature can be whatever is helpful for you.\n    constructor(private prepared: IPreparedMedia, client?: MatrixClient) {\n        this.client = client ?? MatrixClientPeg.get();\n        if (!this.client) {\n            throw new Error(\"No possible MatrixClient for media resolution. Please provide one or log in.\");\n        }\n    }\n\n    /**\n     * True if the media appears to be encrypted. Actual file contents may vary.\n     */\n    public get isEncrypted(): boolean {\n        return !!this.prepared.file;\n    }\n\n    /**\n     * The MXC URI of the source media.\n     */\n    public get srcMxc(): string {\n        return this.prepared.mxc;\n    }\n\n    /**\n     * The MXC URI of the thumbnail media, if a thumbnail is recorded. Null/undefined\n     * otherwise.\n     */\n    public get thumbnailMxc(): Optional<string> {\n        return this.prepared.thumbnail?.mxc;\n    }\n\n    /**\n     * Whether or not a thumbnail is recorded for this media.\n     */\n    public get hasThumbnail(): boolean {\n        return !!this.thumbnailMxc;\n    }\n\n    /**\n     * The HTTP URL for the source media.\n     */\n    public get srcHttp(): string {\n        // eslint-disable-next-line no-restricted-properties\n        return this.client.mxcUrlToHttp(this.srcMxc);\n    }\n\n    /**\n     * The HTTP URL for the thumbnail media (without any specified width, height, etc). Null/undefined\n     * if no thumbnail media recorded.\n     */\n    public get thumbnailHttp(): string | undefined | null {\n        if (!this.hasThumbnail) return null;\n        // eslint-disable-next-line no-restricted-properties\n        return this.client.mxcUrlToHttp(this.thumbnailMxc);\n    }\n\n    /**\n     * Gets the HTTP URL for the thumbnail media with the requested characteristics, if a thumbnail\n     * is recorded for this media. Returns null/undefined otherwise.\n     * @param {number} width The desired width of the thumbnail.\n     * @param {number} height The desired height of the thumbnail.\n     * @param {\"scale\"|\"crop\"} mode The desired thumbnailing mode. Defaults to scale.\n     * @returns {string} The HTTP URL which points to the thumbnail.\n     */\n    public getThumbnailHttp(width: number, height: number, mode: ResizeMethod = \"scale\"): string | null | undefined {\n        if (!this.hasThumbnail) return null;\n        // scale using the device pixel ratio to keep images clear\n        width = Math.floor(width * window.devicePixelRatio);\n        height = Math.floor(height * window.devicePixelRatio);\n        // eslint-disable-next-line no-restricted-properties\n        return this.client.mxcUrlToHttp(this.thumbnailMxc, width, height, mode);\n    }\n\n    /**\n     * Gets the HTTP URL for a thumbnail of the source media with the requested characteristics.\n     * @param {number} width The desired width of the thumbnail.\n     * @param {number} height The desired height of the thumbnail.\n     * @param {\"scale\"|\"crop\"} mode The desired thumbnailing mode. Defaults to scale.\n     * @returns {string} The HTTP URL which points to the thumbnail.\n     */\n    public getThumbnailOfSourceHttp(width: number, height: number, mode: ResizeMethod = \"scale\"): string {\n        // scale using the device pixel ratio to keep images clear\n        width = Math.floor(width * window.devicePixelRatio);\n        height = Math.floor(height * window.devicePixelRatio);\n        // eslint-disable-next-line no-restricted-properties\n        return this.client.mxcUrlToHttp(this.srcMxc, width, height, mode);\n    }\n\n    /**\n     * Creates a square thumbnail of the media. If the media has a thumbnail recorded, that MXC will\n     * be used, otherwise the source media will be used.\n     * @param {number} dim The desired width and height.\n     * @returns {string} An HTTP URL for the thumbnail.\n     */\n    public getSquareThumbnailHttp(dim: number): string {\n        dim = Math.floor(dim * window.devicePixelRatio); // scale using the device pixel ratio to keep images clear\n        if (this.hasThumbnail) {\n            return this.getThumbnailHttp(dim, dim, 'crop');\n        }\n        return this.getThumbnailOfSourceHttp(dim, dim, 'crop');\n    }\n\n    /**\n     * Downloads the source media.\n     * @returns {Promise<Response>} Resolves to the server's response for chaining.\n     */\n    public downloadSource(): Promise<Response> {\n        return fetch(this.srcHttp);\n    }\n}\n\n/**\n * Creates a media object from event content.\n * @param {IMediaEventContent} content The event content.\n * @param {MatrixClient} client? Optional client to use.\n * @returns {Media} The media object.\n */\nexport function mediaFromContent(content: IMediaEventContent, client?: MatrixClient): Media {\n    return new Media(prepEventContentAsMedia(content), client);\n}\n\n/**\n * Creates a media object from an MXC URI.\n * @param {string} mxc The MXC URI.\n * @param {MatrixClient} client? Optional client to use.\n * @returns {Media} The media object.\n */\nexport function mediaFromMxc(mxc: string, client?: MatrixClient): Media {\n    return mediaFromContent({ url: mxc }, client);\n}\n"],"mappings":"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"}