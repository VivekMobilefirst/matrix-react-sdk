{"version":3,"file":"WidgetPermissions.js","names":["preapproveCapabilities","widget","requestedCapabilities","Set","WidgetPermissionCustomisations"],"sources":["../../src/customisations/WidgetPermissions.ts"],"sourcesContent":["/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Populate this class with the details of your customisations when copying it.\nimport { Capability, Widget } from \"matrix-widget-api\";\n\n/**\n * Approves the widget for capabilities that it requested, if any can be\n * approved. Typically this will be used to give certain widgets capabilities\n * without having to prompt the user to approve them. This cannot reject\n * capabilities that Element will be automatically granting, such as the\n * ability for Jitsi widgets to stay on screen - those will be approved\n * regardless.\n * @param {Widget} widget The widget to approve capabilities for.\n * @param {Set<Capability>} requestedCapabilities The capabilities the widget requested.\n * @returns {Set<Capability>} Resolves to the capabilities that are approved for use\n * by the widget. If none are approved, this should return an empty Set.\n */\nasync function preapproveCapabilities(\n    widget: Widget,\n    requestedCapabilities: Set<Capability>,\n): Promise<Set<Capability>> {\n    return new Set(); // no additional capabilities approved\n}\n\n// This interface summarises all available customisation points and also marks\n// them all as optional. This allows customisers to only define and export the\n// customisations they need while still maintaining type safety.\nexport interface IWidgetPermissionCustomisations {\n    preapproveCapabilities?: typeof preapproveCapabilities;\n}\n\n// A real customisation module will define and export one or more of the\n// customisation points that make up the interface above.\nexport const WidgetPermissionCustomisations: IWidgetPermissionCustomisations = {};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,sBAAf,CACIC,MADJ,EAEIC,qBAFJ,EAG4B;EACxB,OAAO,IAAIC,GAAJ,EAAP,CADwB,CACN;AACrB,C,CAED;AACA;AACA;;;AAKA;AACA;AACO,MAAMC,8BAA+D,GAAG,EAAxE"}