{"version":3,"file":"Jitsi.js","names":["JITSI_WK_PROPERTY","Jitsi","discoveryResponse","domain","SdkConfig","getObject","get","logger","log","wkPreferredDomain","preferredDomain","getJitsiAuth","data","response","fetch","json","error","auth","start","cli","MatrixClientPeg","on","ClientEvent","ClientWellKnown","update","getClientWellKnown","parsePreferredConferenceUrl","url","parsed","URL","hostname","conferenceId","pathname","substring","isAudioOnly","getInstance","instance"],"sources":["../../src/widgets/Jitsi.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { ClientEvent, IClientWellKnown } from \"matrix-js-sdk/src/client\";\n\nimport SdkConfig from \"../SdkConfig\";\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\n\nconst JITSI_WK_PROPERTY = \"im.vector.riot.jitsi\";\n\nexport interface JitsiWidgetData {\n    conferenceId: string;\n    isAudioOnly: boolean;\n    domain: string;\n}\n\nexport class Jitsi {\n    private static instance: Jitsi;\n\n    private domain: string;\n\n    public get preferredDomain(): string {\n        return this.domain || \"meet.element.io\";\n    }\n\n    /**\n     * Checks for auth needed by looking up a well-known file\n     *\n     * If the file does not exist, we assume no auth.\n     *\n     * See https://github.com/matrix-org/prosody-mod-auth-matrix-user-verification\n     */\n    public async getJitsiAuth(): Promise<string|null> {\n        if (!this.preferredDomain) {\n            return null;\n        }\n        let data;\n        try {\n            const response = await fetch(`https://${this.preferredDomain}/.well-known/element/jitsi`);\n            data = await response.json();\n        } catch (error) {\n            return null;\n        }\n        if (data.auth) {\n            return data.auth;\n        }\n        return null;\n    }\n\n    public start() {\n        const cli = MatrixClientPeg.get();\n        cli.on(ClientEvent.ClientWellKnown, this.update);\n        // call update initially in case we missed the first WellKnown.client event and for if no well-known present\n        this.update(cli.getClientWellKnown());\n    }\n\n    private update = async (discoveryResponse: IClientWellKnown): Promise<any> => {\n        // Start with a default of the config's domain\n        let domain = SdkConfig.getObject(\"jitsi\")?.get(\"preferred_domain\") || \"meet.element.io\";\n\n        logger.log(\"Attempting to get Jitsi conference information from homeserver\");\n        const wkPreferredDomain = discoveryResponse?.[JITSI_WK_PROPERTY]?.['preferredDomain'];\n        if (wkPreferredDomain) domain = wkPreferredDomain;\n\n        // Put the result into memory for us to use later\n        this.domain = domain;\n        logger.log(\"Jitsi conference domain:\", this.preferredDomain);\n    };\n\n    /**\n     * Parses the given URL into the data needed for a Jitsi widget, if the widget\n     * URL matches the preferredDomain for the app.\n     * @param {string} url The URL to parse.\n     * @returns {JitsiWidgetData} The widget data if eligible, otherwise null.\n     */\n    public parsePreferredConferenceUrl(url: string): JitsiWidgetData {\n        const parsed = new URL(url);\n        if (parsed.hostname !== this.preferredDomain) return null; // invalid\n        return {\n            // URL pathnames always contain a leading slash.\n            // Remove it to be left with just the conference name.\n            conferenceId: parsed.pathname.substring(1),\n            domain: parsed.hostname,\n            isAudioOnly: false,\n        };\n    }\n\n    public static getInstance(): Jitsi {\n        if (!Jitsi.instance) {\n            Jitsi.instance = new Jitsi();\n        }\n        return Jitsi.instance;\n    }\n}\n"],"mappings":";;;;;;;;;;;AAgBA;;AACA;;AAEA;;AACA;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA,MAAMA,iBAAiB,GAAG,sBAA1B;;AAQO,MAAMC,KAAN,CAAY;EAAA;IAAA;IAAA,8CAwCE,MAAOC,iBAAP,IAA6D;MAC1E;MACA,IAAIC,MAAM,GAAGC,kBAAA,CAAUC,SAAV,CAAoB,OAApB,GAA8BC,GAA9B,CAAkC,kBAAlC,KAAyD,iBAAtE;;MAEAC,cAAA,CAAOC,GAAP,CAAW,gEAAX;;MACA,MAAMC,iBAAiB,GAAGP,iBAAiB,GAAGF,iBAAH,CAAjB,GAAyC,iBAAzC,CAA1B;MACA,IAAIS,iBAAJ,EAAuBN,MAAM,GAAGM,iBAAT,CANmD,CAQ1E;;MACA,KAAKN,MAAL,GAAcA,MAAd;;MACAI,cAAA,CAAOC,GAAP,CAAW,0BAAX,EAAuC,KAAKE,eAA5C;IACH,CAnDc;EAAA;;EAKW,IAAfA,eAAe,GAAW;IACjC,OAAO,KAAKP,MAAL,IAAe,iBAAtB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EAC6B,MAAZQ,YAAY,GAAyB;IAC9C,IAAI,CAAC,KAAKD,eAAV,EAA2B;MACvB,OAAO,IAAP;IACH;;IACD,IAAIE,IAAJ;;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,WAAU,KAAKJ,eAAgB,4BAAjC,CAA5B;MACAE,IAAI,GAAG,MAAMC,QAAQ,CAACE,IAAT,EAAb;IACH,CAHD,CAGE,OAAOC,KAAP,EAAc;MACZ,OAAO,IAAP;IACH;;IACD,IAAIJ,IAAI,CAACK,IAAT,EAAe;MACX,OAAOL,IAAI,CAACK,IAAZ;IACH;;IACD,OAAO,IAAP;EACH;;EAEMC,KAAK,GAAG;IACX,MAAMC,GAAG,GAAGC,gCAAA,CAAgBd,GAAhB,EAAZ;;IACAa,GAAG,CAACE,EAAJ,CAAOC,mBAAA,CAAYC,eAAnB,EAAoC,KAAKC,MAAzC,EAFW,CAGX;;IACA,KAAKA,MAAL,CAAYL,GAAG,CAACM,kBAAJ,EAAZ;EACH;;EAeD;AACJ;AACA;AACA;AACA;AACA;EACWC,2BAA2B,CAACC,GAAD,EAA+B;IAC7D,MAAMC,MAAM,GAAG,IAAIC,GAAJ,CAAQF,GAAR,CAAf;IACA,IAAIC,MAAM,CAACE,QAAP,KAAoB,KAAKpB,eAA7B,EAA8C,OAAO,IAAP,CAFe,CAEF;;IAC3D,OAAO;MACH;MACA;MACAqB,YAAY,EAAEH,MAAM,CAACI,QAAP,CAAgBC,SAAhB,CAA0B,CAA1B,CAHX;MAIH9B,MAAM,EAAEyB,MAAM,CAACE,QAJZ;MAKHI,WAAW,EAAE;IALV,CAAP;EAOH;;EAEwB,OAAXC,WAAW,GAAU;IAC/B,IAAI,CAAClC,KAAK,CAACmC,QAAX,EAAqB;MACjBnC,KAAK,CAACmC,QAAN,GAAiB,IAAInC,KAAJ,EAAjB;IACH;;IACD,OAAOA,KAAK,CAACmC,QAAb;EACH;;AA5Ec;;;8BAANnC,K"}