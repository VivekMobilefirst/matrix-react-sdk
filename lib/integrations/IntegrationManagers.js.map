{"version":3,"file":"IntegrationManagers.js","names":["KIND_PREFERENCE","Kind","Account","Homeserver","Config","IntegrationManagers","sharedInstance","instance","constructor","discoveryResponse","logger","log","managers","Array","isArray","length","filter","m","kind","hsManager","push","IntegrationManagerInstance","primaryManager","ev","getType","compileManagers","startWatching","stopWatching","client","MatrixClientPeg","get","on","ClientEvent","AccountData","onAccountData","ClientWellKnown","setupHomeserverManagers","removeListener","setupConfiguredManager","setupAccountManagers","apiUrl","SdkConfig","uiUrl","getUserId","widgets","WidgetUtils","getIntegrationManagerWidgets","forEach","w","data","content","manager","hasManager","getOrderedManagers","ordered","sort","a","b","compare","id","getPrimaryManager","openNoManagerDialog","Modal","createDialog","IntegrationsImpossibleDialog","showDisabledDialog","IntegrationsDisabledDialog","overwriteManagerOnAccount","removeIntegrationManagerWidgets","addIntegrationManagerWidget","name","tryDiscoverManager","domainName","startsWith","url","parse","host","wkConfig","result","fetch","json","e","error","warn","widget","window","mxIntegrationManagers"],"sources":["../../src/integrations/IntegrationManagers.ts"],"sourcesContent":["/*\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport url from 'url';\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { ClientEvent, MatrixClient } from \"matrix-js-sdk/src/client\";\n\nimport type { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\nimport SdkConfig from '../SdkConfig';\nimport Modal from '../Modal';\nimport { IntegrationManagerInstance, Kind } from \"./IntegrationManagerInstance\";\nimport IntegrationsImpossibleDialog from \"../components/views/dialogs/IntegrationsImpossibleDialog\";\nimport IntegrationsDisabledDialog from \"../components/views/dialogs/IntegrationsDisabledDialog\";\nimport WidgetUtils from \"../utils/WidgetUtils\";\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\nimport { compare } from \"../utils/strings\";\n\nconst KIND_PREFERENCE = [\n    // Ordered: first is most preferred, last is least preferred.\n    Kind.Account,\n    Kind.Homeserver,\n    Kind.Config,\n];\n\nexport class IntegrationManagers {\n    private static instance;\n\n    private managers: IntegrationManagerInstance[] = [];\n    private client: MatrixClient;\n    private primaryManager: IntegrationManagerInstance;\n\n    public static sharedInstance(): IntegrationManagers {\n        if (!IntegrationManagers.instance) {\n            IntegrationManagers.instance = new IntegrationManagers();\n        }\n        return IntegrationManagers.instance;\n    }\n\n    constructor() {\n        this.compileManagers();\n    }\n\n    startWatching(): void {\n        this.stopWatching();\n        this.client = MatrixClientPeg.get();\n        this.client.on(ClientEvent.AccountData, this.onAccountData);\n        this.client.on(ClientEvent.ClientWellKnown, this.setupHomeserverManagers);\n        this.compileManagers();\n    }\n\n    stopWatching(): void {\n        if (!this.client) return;\n        this.client.removeListener(ClientEvent.AccountData, this.onAccountData);\n        this.client.removeListener(ClientEvent.ClientWellKnown, this.setupHomeserverManagers);\n    }\n\n    private compileManagers() {\n        this.managers = [];\n        this.setupConfiguredManager();\n        this.setupAccountManagers();\n    }\n\n    private setupConfiguredManager() {\n        const apiUrl: string = SdkConfig.get(\"integrations_rest_url\");\n        const uiUrl: string = SdkConfig.get(\"integrations_ui_url\");\n\n        if (apiUrl && uiUrl) {\n            this.managers.push(new IntegrationManagerInstance(Kind.Config, apiUrl, uiUrl));\n            this.primaryManager = null; // reset primary\n        }\n    }\n\n    private setupHomeserverManagers = async (discoveryResponse) => {\n        logger.log(\"Updating homeserver-configured integration managers...\");\n        if (discoveryResponse && discoveryResponse['m.integrations']) {\n            let managers = discoveryResponse['m.integrations']['managers'];\n            if (!Array.isArray(managers)) managers = []; // make it an array so we can wipe the HS managers\n\n            logger.log(`Homeserver has ${managers.length} integration managers`);\n\n            // Clear out any known managers for the homeserver\n            // TODO: Log out of the scalar clients\n            this.managers = this.managers.filter(m => m.kind !== Kind.Homeserver);\n\n            // Now add all the managers the homeserver wants us to have\n            for (const hsManager of managers) {\n                if (!hsManager[\"api_url\"]) continue;\n                this.managers.push(new IntegrationManagerInstance(\n                    Kind.Homeserver,\n                    hsManager[\"api_url\"],\n                    hsManager[\"ui_url\"], // optional\n                ));\n            }\n\n            this.primaryManager = null; // reset primary\n        } else {\n            logger.log(\"Homeserver has no integration managers\");\n        }\n    };\n\n    private setupAccountManagers() {\n        if (!this.client || !this.client.getUserId()) return; // not logged in\n        const widgets = WidgetUtils.getIntegrationManagerWidgets();\n        widgets.forEach(w => {\n            const data = w.content['data'];\n            if (!data) return;\n\n            const uiUrl = w.content['url'];\n            const apiUrl = data['api_url'] as string;\n            if (!apiUrl || !uiUrl) return;\n\n            const manager = new IntegrationManagerInstance(\n                Kind.Account,\n                apiUrl,\n                uiUrl,\n                w['id'] || w['state_key'] || '',\n            );\n            this.managers.push(manager);\n        });\n        this.primaryManager = null; // reset primary\n    }\n\n    private onAccountData = (ev: MatrixEvent): void => {\n        if (ev.getType() === 'm.widgets') {\n            this.compileManagers();\n        }\n    };\n\n    hasManager(): boolean {\n        return this.managers.length > 0;\n    }\n\n    getOrderedManagers(): IntegrationManagerInstance[] {\n        const ordered = [];\n        for (const kind of KIND_PREFERENCE) {\n            const managers = this.managers.filter(m => m.kind === kind);\n            if (!managers || !managers.length) continue;\n\n            if (kind === Kind.Account) {\n                // Order by state_keys (IDs)\n                managers.sort((a, b) => compare(a.id, b.id));\n            }\n\n            ordered.push(...managers);\n        }\n        return ordered;\n    }\n\n    getPrimaryManager(): IntegrationManagerInstance {\n        if (this.hasManager()) {\n            if (this.primaryManager) return this.primaryManager;\n\n            this.primaryManager = this.getOrderedManagers()[0];\n            return this.primaryManager;\n        } else {\n            return null;\n        }\n    }\n\n    openNoManagerDialog(): void {\n        Modal.createDialog(IntegrationsImpossibleDialog);\n    }\n\n    showDisabledDialog(): void {\n        Modal.createDialog(IntegrationsDisabledDialog);\n    }\n\n    async overwriteManagerOnAccount(manager: IntegrationManagerInstance) {\n        // TODO: TravisR - We should be logging out of scalar clients.\n        await WidgetUtils.removeIntegrationManagerWidgets();\n\n        // TODO: TravisR - We should actually be carrying over the discovery response verbatim.\n        await WidgetUtils.addIntegrationManagerWidget(manager.name, manager.uiUrl, manager.apiUrl);\n    }\n\n    /**\n     * Attempts to discover an integration manager using only its name. This will not validate that\n     * the integration manager is functional - that is the caller's responsibility.\n     * @param {string} domainName The domain name to look up.\n     * @returns {Promise<IntegrationManagerInstance>} Resolves to an integration manager instance,\n     * or null if none was found.\n     */\n    async tryDiscoverManager(domainName: string): Promise<IntegrationManagerInstance> {\n        logger.log(\"Looking up integration manager via .well-known\");\n        if (domainName.startsWith(\"http:\") || domainName.startsWith(\"https:\")) {\n            // trim off the scheme and just use the domain\n            domainName = url.parse(domainName).host;\n        }\n\n        let wkConfig: object;\n        try {\n            const result = await fetch(`https://${domainName}/.well-known/matrix/integrations`);\n            wkConfig = await result.json();\n        } catch (e) {\n            logger.error(e);\n            logger.warn(\"Failed to locate integration manager\");\n            return null;\n        }\n\n        if (!wkConfig || !wkConfig[\"m.integrations_widget\"]) {\n            logger.warn(\"Missing integrations widget on .well-known response\");\n            return null;\n        }\n\n        const widget = wkConfig[\"m.integrations_widget\"];\n        if (!widget[\"url\"] || !widget[\"data\"] || !widget[\"data\"][\"api_url\"]) {\n            logger.warn(\"Malformed .well-known response for integrations widget\");\n            return null;\n        }\n\n        // All discovered managers are per-user managers\n        const manager = new IntegrationManagerInstance(Kind.Account, widget[\"data\"][\"api_url\"], widget[\"url\"]);\n        logger.log(\"Got an integration manager (untested)\");\n\n        // We don't test the manager because the caller may need to do extra\n        // checks or similar with it. For instance, they may need to deal with\n        // terms of service or want to call something particular.\n\n        return manager;\n    }\n}\n\n// For debugging\nwindow.mxIntegrationManagers = IntegrationManagers;\n"],"mappings":"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"}