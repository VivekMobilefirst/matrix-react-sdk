{"version":3,"file":"PosthogTrackers.js","names":["notLoggedInMap","Views","LOADING","WELCOME","LOGIN","REGISTER","USE_CASE_SELECTION","FORGOT_PASSWORD","COMPLETE_SECURITY","E2E_SETUP","SOFT_LOGOUT","loggedInPageTypeMap","PageType","HomePage","RoomView","UserView","LegacyGroupView","PosthogTrackers","instance","internalInstance","trackPageChange","view","pageType","durationMs","override","trackPage","screenName","LOGGED_IN","PosthogAnalytics","trackEvent","eventName","$current_url","trackOverride","clearOverride","trackInteraction","name","ev","index","interactionType","type","startsWith","PosthogScreenTracker","PureComponent","componentDidMount","props","componentDidUpdate","componentWillUnmount","render"],"sources":["../src/PosthogTrackers.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { PureComponent, SyntheticEvent } from \"react\";\nimport { WebScreen as ScreenEvent } from \"@matrix-org/analytics-events/types/typescript/WebScreen\";\nimport { Interaction as InteractionEvent } from \"@matrix-org/analytics-events/types/typescript/Interaction\";\n\nimport PageType from \"./PageTypes\";\nimport Views from \"./Views\";\nimport { PosthogAnalytics } from \"./PosthogAnalytics\";\n\nexport type ScreenName = ScreenEvent[\"$current_url\"];\nexport type InteractionName = InteractionEvent[\"name\"];\n\nconst notLoggedInMap: Record<Exclude<Views, Views.LOGGED_IN>, ScreenName> = {\n    [Views.LOADING]: \"Loading\",\n    [Views.WELCOME]: \"Welcome\",\n    [Views.LOGIN]: \"Login\",\n    [Views.REGISTER]: \"Register\",\n    [Views.USE_CASE_SELECTION]: \"UseCaseSelection\",\n    [Views.FORGOT_PASSWORD]: \"ForgotPassword\",\n    [Views.COMPLETE_SECURITY]: \"CompleteSecurity\",\n    [Views.E2E_SETUP]: \"E2ESetup\",\n    [Views.SOFT_LOGOUT]: \"SoftLogout\",\n};\n\nconst loggedInPageTypeMap: Record<PageType, ScreenName> = {\n    [PageType.HomePage]: \"Home\",\n    [PageType.RoomView]: \"Room\",\n    [PageType.UserView]: \"User\",\n    [PageType.LegacyGroupView]: \"Group\",\n};\n\nexport default class PosthogTrackers {\n    private static internalInstance: PosthogTrackers;\n\n    public static get instance(): PosthogTrackers {\n        if (!PosthogTrackers.internalInstance) {\n            PosthogTrackers.internalInstance = new PosthogTrackers();\n        }\n        return PosthogTrackers.internalInstance;\n    }\n\n    private view: Views = Views.LOADING;\n    private pageType?: PageType = null;\n    private override?: ScreenName = null;\n\n    public trackPageChange(view: Views, pageType: PageType | undefined, durationMs: number): void {\n        this.view = view;\n        this.pageType = pageType;\n        if (this.override) return;\n        this.trackPage(durationMs);\n    }\n\n    private trackPage(durationMs?: number): void {\n        const screenName = this.view === Views.LOGGED_IN\n            ? loggedInPageTypeMap[this.pageType]\n            : notLoggedInMap[this.view];\n        PosthogAnalytics.instance.trackEvent<ScreenEvent>({\n            eventName: \"$pageview\",\n            $current_url: screenName,\n            durationMs,\n        });\n    }\n\n    public trackOverride(screenName: ScreenName): void {\n        if (!screenName) return;\n        this.override = screenName;\n        PosthogAnalytics.instance.trackEvent<ScreenEvent>({\n            eventName: \"$pageview\",\n            $current_url: screenName,\n        });\n    }\n\n    public clearOverride(screenName: ScreenName): void {\n        if (screenName !== this.override) return;\n        this.override = null;\n        this.trackPage();\n    }\n\n    public static trackInteraction(name: InteractionName, ev?: SyntheticEvent, index?: number): void {\n        let interactionType: InteractionEvent[\"interactionType\"];\n        if (ev?.type === \"click\") {\n            interactionType = \"Pointer\";\n        } else if (ev?.type.startsWith(\"key\")) {\n            interactionType = \"Keyboard\";\n        }\n\n        PosthogAnalytics.instance.trackEvent<InteractionEvent>({\n            eventName: \"Interaction\",\n            interactionType,\n            index,\n            name,\n        });\n    }\n}\n\nexport class PosthogScreenTracker extends PureComponent<{ screenName: ScreenName }> {\n    componentDidMount() {\n        PosthogTrackers.instance.trackOverride(this.props.screenName);\n    }\n\n    componentDidUpdate() {\n        // We do not clear the old override here so that we do not send the non-override screen as a transition\n        PosthogTrackers.instance.trackOverride(this.props.screenName);\n    }\n\n    componentWillUnmount() {\n        PosthogTrackers.instance.clearOverride(this.props.screenName);\n    }\n\n    render() {\n        return null; // no need to render anything, we just need to hook into the React lifecycle\n    }\n}\n"],"mappings":"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"}