{"version":3,"file":"PlaybackManager.js","names":["PlaybackManager","instance","internalInstance","pauseAllExcept","playback","instances","filter","p","currentState","PlaybackState","Playing","forEach","pause","destroyPlaybackInstance","createPlaybackInstance","buf","waveform","DEFAULT_WAVEFORM","ManagedPlayback","push"],"sources":["../../src/audio/PlaybackManager.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { DEFAULT_WAVEFORM, Playback, PlaybackState } from \"./Playback\";\nimport { ManagedPlayback } from \"./ManagedPlayback\";\n\n/**\n * Handles management of playback instances to ensure certain functionality, like\n * one playback operating at any one time.\n */\nexport class PlaybackManager {\n    private static internalInstance: PlaybackManager;\n\n    private instances: ManagedPlayback[] = [];\n\n    public static get instance(): PlaybackManager {\n        if (!PlaybackManager.internalInstance) {\n            PlaybackManager.internalInstance = new PlaybackManager();\n        }\n        return PlaybackManager.internalInstance;\n    }\n\n    /**\n     * Pauses all other playback instances. If no playback is provided, all playing\n     * instances are paused.\n     * @param playback Optional. The playback to leave untouched.\n     */\n    public pauseAllExcept(playback?: Playback) {\n        this.instances\n            .filter(p => p !== playback && p.currentState === PlaybackState.Playing)\n            .forEach(p => p.pause());\n    }\n\n    public destroyPlaybackInstance(playback: ManagedPlayback) {\n        this.instances = this.instances.filter(p => p !== playback);\n    }\n\n    public createPlaybackInstance(buf: ArrayBuffer, waveform = DEFAULT_WAVEFORM): Playback {\n        const instance = new ManagedPlayback(this, buf, waveform);\n        this.instances.push(instance);\n        return instance;\n    }\n}\n"],"mappings":";;;;;;;;;;;AAgBA;;AACA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACO,MAAMA,eAAN,CAAsB;EAAA;IAAA,iDAGc,EAHd;EAAA;;EAKC,WAARC,QAAQ,GAAoB;IAC1C,IAAI,CAACD,eAAe,CAACE,gBAArB,EAAuC;MACnCF,eAAe,CAACE,gBAAhB,GAAmC,IAAIF,eAAJ,EAAnC;IACH;;IACD,OAAOA,eAAe,CAACE,gBAAvB;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACWC,cAAc,CAACC,QAAD,EAAsB;IACvC,KAAKC,SAAL,CACKC,MADL,CACYC,CAAC,IAAIA,CAAC,KAAKH,QAAN,IAAkBG,CAAC,CAACC,YAAF,KAAmBC,uBAAA,CAAcC,OADpE,EAEKC,OAFL,CAEaJ,CAAC,IAAIA,CAAC,CAACK,KAAF,EAFlB;EAGH;;EAEMC,uBAAuB,CAACT,QAAD,EAA4B;IACtD,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAKH,QAAjC,CAAjB;EACH;;EAEMU,sBAAsB,CAACC,GAAD,EAA0D;IAAA,IAAvCC,QAAuC,uEAA5BC,0BAA4B;IACnF,MAAMhB,QAAQ,GAAG,IAAIiB,gCAAJ,CAAoB,IAApB,EAA0BH,GAA1B,EAA+BC,QAA/B,CAAjB;IACA,KAAKX,SAAL,CAAec,IAAf,CAAoBlB,QAApB;IACA,OAAOA,QAAP;EACH;;AA/BwB;;;8BAAhBD,e"}