{"version":3,"file":"common.js","names":[],"sources":["../../src/@types/common.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React, { JSXElementConstructor } from \"react\";\n\n// Based on https://stackoverflow.com/a/53229857/3532235\nexport type Without<T, U> = {[P in Exclude<keyof T, keyof U>]?: never};\nexport type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;\nexport type Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport type ComponentClass = keyof JSX.IntrinsicElements | JSXElementConstructor<any>;\nexport type ReactAnyComponent = React.Component | React.ExoticComponent;\n\n// Based on https://stackoverflow.com/a/58436959\ntype Join<K, P> = K extends string | number ?\n    P extends string | number ?\n        `${K}${\"\" extends P ? \"\" : \".\"}${P}`\n        : never : never;\n\ntype Prev = [never, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...0[]];\n\nexport type Leaves<T, D extends number = 5> = [D] extends [never] ? never : T extends object ?\n    { [K in keyof T]-?: Join<K, Leaves<T[K], Prev[D]>> }[keyof T] : \"\";\n\nexport type RecursivePartial<T> = {\n    [P in keyof T]?:\n    T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n        T[P] extends object ? RecursivePartial<T[P]> :\n            T[P];\n};\n\n// Inspired by https://stackoverflow.com/a/60206860\nexport type KeysWithObjectShape<Input> = {\n    [P in keyof Input]: Input[P] extends object\n        // Arrays are counted as objects - exclude them\n        ? (Input[P] extends Array<unknown> ? never : P)\n        : never;\n}[keyof Input];\n"],"mappings":""}