{"version":3,"file":"global.d.js","names":[],"sources":["../../src/@types/global.d.ts"],"sourcesContent":["/*\nCopyright 2020-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport \"matrix-js-sdk/src/@types/global\"; // load matrix-js-sdk's type extensions first\n// Load types for the WG CSS Font Loading APIs https://github.com/Microsoft/TypeScript/issues/13569\nimport \"@types/css-font-loading-module\";\nimport \"@types/modernizr\";\n\nimport ContentMessages from \"../ContentMessages\";\nimport { IMatrixClientPeg } from \"../MatrixClientPeg\";\nimport ToastStore from \"../stores/ToastStore\";\nimport DeviceListener from \"../DeviceListener\";\nimport { RoomListStore } from \"../stores/room-list/Interface\";\nimport { PlatformPeg } from \"../PlatformPeg\";\nimport RoomListLayoutStore from \"../stores/room-list/RoomListLayoutStore\";\nimport { IntegrationManagers } from \"../integrations/IntegrationManagers\";\nimport { ModalManager } from \"../Modal\";\nimport SettingsStore from \"../settings/SettingsStore\";\nimport { Notifier } from \"../Notifier\";\nimport type { Renderer } from \"react-dom\";\nimport RightPanelStore from \"../stores/right-panel/RightPanelStore\";\nimport WidgetStore from \"../stores/WidgetStore\";\nimport CallHandler from \"../CallHandler\";\nimport UserActivity from \"../UserActivity\";\nimport { ModalWidgetStore } from \"../stores/ModalWidgetStore\";\nimport { WidgetLayoutStore } from \"../stores/widgets/WidgetLayoutStore\";\nimport VoipUserMapper from \"../VoipUserMapper\";\nimport { SpaceStoreClass } from \"../stores/spaces/SpaceStore\";\nimport TypingStore from \"../stores/TypingStore\";\nimport { EventIndexPeg } from \"../indexing/EventIndexPeg\";\nimport { VoiceRecordingStore } from \"../stores/VoiceRecordingStore\";\nimport PerformanceMonitor from \"../performance\";\nimport UIStore from \"../stores/UIStore\";\nimport { SetupEncryptionStore } from \"../stores/SetupEncryptionStore\";\nimport { RoomScrollStateStore } from \"../stores/RoomScrollStateStore\";\nimport { ConsoleLogger, IndexedDBLogStore } from \"../rageshake/rageshake\";\nimport ActiveWidgetStore from \"../stores/ActiveWidgetStore\";\nimport AutoRageshakeStore from \"../stores/AutoRageshakeStore\";\nimport { IConfigOptions } from \"../IConfigOptions\";\nimport { MatrixDispatcher } from \"../dispatcher/dispatcher\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\ndeclare global {\n    interface Window {\n        matrixChat: ReturnType<Renderer>;\n        mxMatrixClientPeg: IMatrixClientPeg;\n        Olm: {\n            init: () => Promise<void>;\n        };\n        mxReactSdkConfig: IConfigOptions;\n\n        // Needed for Safari, unknown to TypeScript\n        webkitAudioContext: typeof AudioContext;\n\n        // https://docs.microsoft.com/en-us/previous-versions/hh772328(v=vs.85)\n        // we only ever check for its existence, so we can ignore its actual type\n        MSStream?: unknown;\n\n        // https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1029#issuecomment-869224737\n        // https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\n        OffscreenCanvas?: {\n            new(width: number, height: number): OffscreenCanvas;\n        };\n\n        mxContentMessages: ContentMessages;\n        mxToastStore: ToastStore;\n        mxDeviceListener: DeviceListener;\n        mxRoomListStore: RoomListStore;\n        mxRoomListLayoutStore: RoomListLayoutStore;\n        mxPlatformPeg: PlatformPeg;\n        mxIntegrationManagers: typeof IntegrationManagers;\n        singletonModalManager: ModalManager;\n        mxSettingsStore: SettingsStore;\n        mxNotifier: typeof Notifier;\n        mxRightPanelStore: RightPanelStore;\n        mxWidgetStore: WidgetStore;\n        mxWidgetLayoutStore: WidgetLayoutStore;\n        mxCallHandler: CallHandler;\n        mxUserActivity: UserActivity;\n        mxModalWidgetStore: ModalWidgetStore;\n        mxVoipUserMapper: VoipUserMapper;\n        mxSpaceStore: SpaceStoreClass;\n        mxVoiceRecordingStore: VoiceRecordingStore;\n        mxTypingStore: TypingStore;\n        mxEventIndexPeg: EventIndexPeg;\n        mxPerformanceMonitor: PerformanceMonitor;\n        mxPerformanceEntryNames: any;\n        mxUIStore: UIStore;\n        mxSetupEncryptionStore?: SetupEncryptionStore;\n        mxRoomScrollStateStore?: RoomScrollStateStore;\n        mxActiveWidgetStore?: ActiveWidgetStore;\n        mxOnRecaptchaLoaded?: () => void;\n        electron?: Electron;\n        mxSendSentryReport: (userText: string, issueUrl: string, error: Error) => Promise<void>;\n        mxLoginWithAccessToken: (hsUrl: string, accessToken: string) => Promise<void>;\n        mxAutoRageshakeStore?: AutoRageshakeStore;\n        mxDispatcher: MatrixDispatcher;\n    }\n\n    interface Electron {\n        // will be extended by element-web downstream\n    }\n\n    interface DesktopCapturerSource {\n        id: string;\n        name: string;\n        thumbnailURL: string;\n    }\n\n    interface GetSourcesOptions {\n        types: Array<string>;\n        thumbnailSize?: {\n            height: number;\n            width: number;\n        };\n        fetchWindowIcons?: boolean;\n    }\n\n    interface Document {\n        // Safari & IE11 only have this prefixed: we used prefixed versions\n        // previously so let's continue to support them for now\n        webkitExitFullscreen(): Promise<void>;\n        msExitFullscreen(): Promise<void>;\n        readonly webkitFullscreenElement: Element | null;\n        readonly msFullscreenElement: Element | null;\n    }\n\n    interface Navigator {\n        userLanguage?: string;\n    }\n\n    interface StorageEstimate {\n        usageDetails?: { [key: string]: number };\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\n    interface OffscreenCanvas {\n        height: number;\n        width: number;\n        getContext: HTMLCanvasElement[\"getContext\"];\n        convertToBlob(opts?: {\n            type?: string;\n            quality?: number;\n        }): Promise<Blob>;\n        transferToImageBitmap(): ImageBitmap;\n    }\n\n    interface HTMLAudioElement {\n        type?: string;\n        // sinkId & setSinkId are experimental and typescript doesn't know about them\n        sinkId: string;\n        setSinkId(outputId: string): void;\n    }\n\n    interface HTMLVideoElement {\n        type?: string;\n        // sinkId & setSinkId are experimental and typescript doesn't know about them\n        sinkId: string;\n        setSinkId(outputId: string): void;\n    }\n\n    // Add Chrome-specific `instant` ScrollBehaviour\n    type _ScrollBehavior = ScrollBehavior | \"instant\";\n\n    interface _ScrollOptions {\n        behavior?: _ScrollBehavior;\n    }\n\n    interface _ScrollIntoViewOptions extends _ScrollOptions {\n        block?: ScrollLogicalPosition;\n        inline?: ScrollLogicalPosition;\n    }\n\n    interface Element {\n        // Safari & IE11 only have this prefixed: we used prefixed versions\n        // previously so let's continue to support them for now\n        webkitRequestFullScreen(options?: FullscreenOptions): Promise<void>;\n        msRequestFullscreen(options?: FullscreenOptions): Promise<void>;\n        scrollIntoView(arg?: boolean | _ScrollIntoViewOptions): void;\n    }\n\n    interface Error {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n        fileName?: string;\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n        lineNumber?: number;\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n        columnNumber?: number;\n    }\n\n    // https://github.com/microsoft/TypeScript/issues/28308#issuecomment-650802278\n    interface AudioWorkletProcessor {\n        readonly port: MessagePort;\n        process(\n            inputs: Float32Array[][],\n            outputs: Float32Array[][],\n            parameters: Record<string, Float32Array>\n        ): boolean;\n    }\n\n    // https://github.com/microsoft/TypeScript/issues/28308#issuecomment-650802278\n    const AudioWorkletProcessor: {\n        prototype: AudioWorkletProcessor;\n        new (options?: AudioWorkletNodeOptions): AudioWorkletProcessor;\n    };\n\n    // https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1029#issuecomment-881509595\n    interface AudioParamDescriptor {\n        readonly port: MessagePort;\n    }\n\n    // https://github.com/microsoft/TypeScript/issues/28308#issuecomment-650802278\n    function registerProcessor(\n        name: string,\n        processorCtor: (new (\n            options?: AudioWorkletNodeOptions\n        ) => AudioWorkletProcessor) & {\n            parameterDescriptors?: AudioParamDescriptor[];\n        }\n    );\n\n    // eslint-disable-next-line no-var\n    var grecaptcha:\n        | undefined\n        | {\n              reset: (id: string) => void;\n              render: (\n                  divId: string,\n                  options: {\n                      sitekey: string;\n                      callback: (response: string) => void;\n                  },\n              ) => string;\n              isReady: () => boolean;\n          };\n\n    // eslint-disable-next-line no-var, camelcase\n    var mx_rage_logger: ConsoleLogger;\n    // eslint-disable-next-line no-var, camelcase\n    var mx_rage_initPromise: Promise<void>;\n    // eslint-disable-next-line no-var, camelcase\n    var mx_rage_initStoragePromise: Promise<void>;\n    // eslint-disable-next-line no-var, camelcase\n    var mx_rage_store: IndexedDBLogStore;\n}\n\n/* eslint-enable @typescript-eslint/naming-convention */\n"],"mappings":";;AAgBA;;AAEA;;AACA"}