{"version":3,"file":"IncompatibleController.js","names":["IncompatibleController","SettingController","constructor","settingName","forcedValue","incompatibleValue","getValueOverride","level","roomId","calculatedValue","calculatedAtLevel","incompatibleSetting","settingDisabled","SettingsStore","getValue"],"sources":["../../../src/settings/controllers/IncompatibleController.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport SettingController from \"./SettingController\";\nimport { SettingLevel } from \"../SettingLevel\";\nimport SettingsStore from \"../SettingsStore\";\n\n/**\n * Enforces that a boolean setting cannot be enabled if the incompatible setting\n * is also enabled, to prevent cascading undefined behaviour between conflicting\n * labs flags.\n */\nexport default class IncompatibleController extends SettingController {\n    public constructor(\n        private settingName: string,\n        private forcedValue: any = false,\n        private incompatibleValue: any | ((v: any) => boolean) = true,\n    ) {\n        super();\n    }\n\n    public getValueOverride(\n        level: SettingLevel,\n        roomId: string,\n        calculatedValue: any,\n        calculatedAtLevel: SettingLevel,\n    ): any {\n        if (this.incompatibleSetting) {\n            return this.forcedValue;\n        }\n        return null; // no override\n    }\n\n    public get settingDisabled(): boolean {\n        return this.incompatibleSetting;\n    }\n\n    public get incompatibleSetting(): boolean {\n        if (typeof this.incompatibleValue === \"function\") {\n            return this.incompatibleValue(SettingsStore.getValue(this.settingName));\n        }\n        return SettingsStore.getValue(this.settingName) === this.incompatibleValue;\n    }\n}\n"],"mappings":";;;;;;;;;AAgBA;;AAEA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACe,MAAMA,sBAAN,SAAqCC,0BAArC,CAAuD;EAC3DC,WAAW,CACNC,WADM,EAIhB;IAAA,IAFUC,WAEV,uEAF6B,KAE7B;IAAA,IADUC,iBACV,uEAD2D,IAC3D;IACE;IADF,KAHUF,WAGV,GAHUA,WAGV;IAAA,KAFUC,WAEV,GAFUA,WAEV;IAAA,KADUC,iBACV,GADUA,iBACV;EAED;;EAEMC,gBAAgB,CACnBC,KADmB,EAEnBC,MAFmB,EAGnBC,eAHmB,EAInBC,iBAJmB,EAKhB;IACH,IAAI,KAAKC,mBAAT,EAA8B;MAC1B,OAAO,KAAKP,WAAZ;IACH;;IACD,OAAO,IAAP,CAJG,CAIU;EAChB;;EAEyB,IAAfQ,eAAe,GAAY;IAClC,OAAO,KAAKD,mBAAZ;EACH;;EAE6B,IAAnBA,mBAAmB,GAAY;IACtC,IAAI,OAAO,KAAKN,iBAAZ,KAAkC,UAAtC,EAAkD;MAC9C,OAAO,KAAKA,iBAAL,CAAuBQ,sBAAA,CAAcC,QAAd,CAAuB,KAAKX,WAA5B,CAAvB,CAAP;IACH;;IACD,OAAOU,sBAAA,CAAcC,QAAd,CAAuB,KAAKX,WAA5B,MAA6C,KAAKE,iBAAzD;EACH;;AA9BiE"}