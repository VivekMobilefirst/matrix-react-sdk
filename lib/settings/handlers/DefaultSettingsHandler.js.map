{"version":3,"file":"DefaultSettingsHandler.js","names":["DefaultSettingsHandler","SettingsHandler","constructor","defaults","invertedDefaults","getValue","settingName","roomId","value","undefined","setValue","newValue","Error","canSetValue","isSupported"],"sources":["../../../src/settings/handlers/DefaultSettingsHandler.ts"],"sourcesContent":["/*\nCopyright 2017 Travis Ralston\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport SettingsHandler from \"./SettingsHandler\";\n\n/**\n * Gets settings at the \"default\" level. This handler does not support setting values.\n * This handler does not make use of the roomId parameter.\n */\nexport default class DefaultSettingsHandler extends SettingsHandler {\n    /**\n     * Creates a new default settings handler with the given defaults\n     * @param {object} defaults The default setting values, keyed by setting name.\n     * @param {object} invertedDefaults The default inverted setting values, keyed by setting name.\n     */\n    constructor(private defaults: Record<string, any>, private invertedDefaults: Record<string, any>) {\n        super();\n    }\n\n    public getValue(settingName: string, roomId: string): any {\n        let value = this.defaults[settingName];\n        if (value === undefined) {\n            value = this.invertedDefaults[settingName];\n        }\n        return value;\n    }\n\n    public async setValue(settingName: string, roomId: string, newValue: any): Promise<void> {\n        throw new Error(\"Cannot set values on the default level handler\");\n    }\n\n    public canSetValue(settingName: string, roomId: string) {\n        return false;\n    }\n\n    public isSupported(): boolean {\n        return true;\n    }\n}\n"],"mappings":";;;;;;;;;AAiBA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACe,MAAMA,sBAAN,SAAqCC,wBAArC,CAAqD;EAChE;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAASC,QAAT,EAAgDC,gBAAhD,EAAuF;IAC9F;IAD8F,KAA9ED,QAA8E,GAA9EA,QAA8E;IAAA,KAAvCC,gBAAuC,GAAvCA,gBAAuC;EAEjG;;EAEMC,QAAQ,CAACC,WAAD,EAAsBC,MAAtB,EAA2C;IACtD,IAAIC,KAAK,GAAG,KAAKL,QAAL,CAAcG,WAAd,CAAZ;;IACA,IAAIE,KAAK,KAAKC,SAAd,EAAyB;MACrBD,KAAK,GAAG,KAAKJ,gBAAL,CAAsBE,WAAtB,CAAR;IACH;;IACD,OAAOE,KAAP;EACH;;EAEoB,MAARE,QAAQ,CAACJ,WAAD,EAAsBC,MAAtB,EAAsCI,QAAtC,EAAoE;IACrF,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;EACH;;EAEMC,WAAW,CAACP,WAAD,EAAsBC,MAAtB,EAAsC;IACpD,OAAO,KAAP;EACH;;EAEMO,WAAW,GAAY;IAC1B,OAAO,IAAP;EACH;;AA5B+D"}