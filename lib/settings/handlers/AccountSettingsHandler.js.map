{"version":3,"file":"AccountSettingsHandler.js","names":["BREADCRUMBS_LEGACY_EVENT_TYPE","BREADCRUMBS_EVENT_TYPE","BREADCRUMBS_EVENT_TYPES","RECENT_EMOJI_EVENT_TYPE","INTEG_PROVISIONING_EVENT_TYPE","ANALYTICS_EVENT_TYPE","DEFAULT_SETTINGS_EVENT_TYPE","AccountSettingsHandler","MatrixClientBackedSettingsHandler","constructor","watchers","event","prevEvent","getType","val","getContent","notifyUpdate","SettingLevel","ACCOUNT","prevContent","changedSettings","objectKeyChanges","settingName","includes","notifyBreadcrumbsUpdate","level","initMatrixClient","oldClient","newClient","removeListener","ClientEvent","AccountData","onAccountData","on","getValue","roomId","content","getSettings","value","undefined","setValue","settings","preferredValue","setAccountData","eventType","field","legacyEventType","deferred","defer","handler","client","off","resolve","promise","newValue","canSetValue","isSupported","isGuest","getAccountData","objectClone","newType"],"sources":["../../../src/settings/handlers/AccountSettingsHandler.ts"],"sourcesContent":["/*\nCopyright 2017 Travis Ralston\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ClientEvent, MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\nimport { defer } from \"matrix-js-sdk/src/utils\";\n\nimport MatrixClientBackedSettingsHandler from \"./MatrixClientBackedSettingsHandler\";\nimport { objectClone, objectKeyChanges } from \"../../utils/objects\";\nimport { SettingLevel } from \"../SettingLevel\";\nimport { WatchManager } from \"../WatchManager\";\n\nconst BREADCRUMBS_LEGACY_EVENT_TYPE = \"im.vector.riot.breadcrumb_rooms\";\nconst BREADCRUMBS_EVENT_TYPE = \"im.vector.setting.breadcrumbs\";\nconst BREADCRUMBS_EVENT_TYPES = [BREADCRUMBS_LEGACY_EVENT_TYPE, BREADCRUMBS_EVENT_TYPE];\nconst RECENT_EMOJI_EVENT_TYPE = \"io.element.recent_emoji\";\nconst INTEG_PROVISIONING_EVENT_TYPE = \"im.vector.setting.integration_provisioning\";\nconst ANALYTICS_EVENT_TYPE = \"im.vector.analytics\";\nconst DEFAULT_SETTINGS_EVENT_TYPE = \"im.vector.web.settings\";\n\n/**\n * Gets and sets settings at the \"account\" level for the current user.\n * This handler does not make use of the roomId parameter.\n */\nexport default class AccountSettingsHandler extends MatrixClientBackedSettingsHandler {\n    constructor(public readonly watchers: WatchManager) {\n        super();\n    }\n\n    public get level(): SettingLevel {\n        return SettingLevel.ACCOUNT;\n    }\n\n    public initMatrixClient(oldClient: MatrixClient, newClient: MatrixClient) {\n        oldClient?.removeListener(ClientEvent.AccountData, this.onAccountData);\n        newClient.on(ClientEvent.AccountData, this.onAccountData);\n    }\n\n    private onAccountData = (event: MatrixEvent, prevEvent: MatrixEvent) => {\n        if (event.getType() === \"org.matrix.preview_urls\") {\n            let val = event.getContent()['disable'];\n            if (typeof(val) !== \"boolean\") {\n                val = null;\n            } else {\n                val = !val;\n            }\n\n            this.watchers.notifyUpdate(\"urlPreviewsEnabled\", null, SettingLevel.ACCOUNT, val);\n        } else if (event.getType() === DEFAULT_SETTINGS_EVENT_TYPE || event.getType() === ANALYTICS_EVENT_TYPE) {\n            // Figure out what changed and fire those updates\n            const prevContent = prevEvent?.getContent() ?? {};\n            const changedSettings = objectKeyChanges<Record<string, any>>(prevContent, event.getContent());\n            for (const settingName of changedSettings) {\n                const val = event.getContent()[settingName];\n                this.watchers.notifyUpdate(settingName, null, SettingLevel.ACCOUNT, val);\n            }\n        } else if (BREADCRUMBS_EVENT_TYPES.includes(event.getType())) {\n            this.notifyBreadcrumbsUpdate(event);\n        } else if (event.getType() === INTEG_PROVISIONING_EVENT_TYPE) {\n            const val = event.getContent()['enabled'];\n            this.watchers.notifyUpdate(\"integrationProvisioning\", null, SettingLevel.ACCOUNT, val);\n        } else if (event.getType() === RECENT_EMOJI_EVENT_TYPE) {\n            const val = event.getContent()['enabled'];\n            this.watchers.notifyUpdate(\"recent_emoji\", null, SettingLevel.ACCOUNT, val);\n        }\n    };\n\n    public getValue(settingName: string, roomId: string): any {\n        // Special case URL previews\n        if (settingName === \"urlPreviewsEnabled\") {\n            const content = this.getSettings(\"org.matrix.preview_urls\") || {};\n\n            // Check to make sure that we actually got a boolean\n            if (typeof(content['disable']) !== \"boolean\") return null;\n            return !content['disable'];\n        }\n\n        // Special case for breadcrumbs\n        if (settingName === \"breadcrumb_rooms\") {\n            let content = this.getSettings(BREADCRUMBS_EVENT_TYPE);\n            if (!content || !content['recent_rooms']) {\n                content = this.getSettings(BREADCRUMBS_LEGACY_EVENT_TYPE);\n\n                // This is a bit of a hack, but it makes things slightly easier\n                if (content) content['recent_rooms'] = content['rooms'];\n            }\n\n            return content && content['recent_rooms'] ? content['recent_rooms'] : [];\n        }\n\n        // Special case recent emoji\n        if (settingName === \"recent_emoji\") {\n            const content = this.getSettings(RECENT_EMOJI_EVENT_TYPE);\n            return content ? content[\"recent_emoji\"] : null;\n        }\n\n        // Special case integration manager provisioning\n        if (settingName === \"integrationProvisioning\") {\n            const content = this.getSettings(INTEG_PROVISIONING_EVENT_TYPE);\n            return content ? content['enabled'] : null;\n        }\n\n        if (settingName === \"pseudonymousAnalyticsOptIn\") {\n            const content = this.getSettings(ANALYTICS_EVENT_TYPE) || {};\n            // Check to make sure that we actually got a boolean\n            if (typeof(content[settingName]) !== \"boolean\") return null;\n            return content[settingName];\n        }\n\n        if (settingName === \"MessageComposerInput.insertTrailingColon\") {\n            const content = this.getSettings() || {};\n            const value = content[settingName];\n            if (value === null || value === undefined) {\n                // Write true as it is the default. This will give us the option\n                // of making this opt-in in the future, without affecting old\n                // users\n                this.setValue(settingName, roomId, true);\n                return true;\n            }\n            return value;\n        }\n\n        const settings = this.getSettings() || {};\n        let preferredValue = settings[settingName];\n\n        if (preferredValue === null || preferredValue === undefined) {\n            // Honour the old setting on read only\n            if (settingName === \"hideAvatarChanges\" || settingName === \"hideDisplaynameChanges\") {\n                preferredValue = settings[\"hideAvatarDisplaynameChanges\"];\n            }\n        }\n\n        return preferredValue;\n    }\n\n    // helper function to set account data then await it being echoed back\n    private async setAccountData(\n        eventType: string,\n        field: string,\n        value: any,\n        legacyEventType?: string,\n    ): Promise<void> {\n        let content = this.getSettings(eventType);\n        if (legacyEventType && !content?.[field]) {\n            content = this.getSettings(legacyEventType);\n        }\n\n        if (!content) {\n            content = {};\n        }\n\n        content[field] = value;\n\n        // Attach a deferred *before* setting the account data to ensure we catch any requests\n        // which race between different lines.\n        const deferred = defer<void>();\n        const handler = (event: MatrixEvent) => {\n            if (event.getType() !== eventType || event.getContent()[field] !== value) return;\n            this.client.off(ClientEvent.AccountData, handler);\n            deferred.resolve();\n        };\n        this.client.on(ClientEvent.AccountData, handler);\n\n        await this.client.setAccountData(eventType, content);\n\n        await deferred.promise;\n    }\n\n    public setValue(settingName: string, roomId: string, newValue: any): Promise<void> {\n        switch (settingName) {\n            // Special case URL previews\n            case \"urlPreviewsEnabled\":\n                return this.setAccountData(\"org.matrix.preview_urls\", \"disable\", !newValue);\n\n            // Special case for breadcrumbs\n            case \"breadcrumb_rooms\":\n                return this.setAccountData(\n                    BREADCRUMBS_EVENT_TYPE,\n                    \"recent_rooms\",\n                    newValue,\n                    BREADCRUMBS_LEGACY_EVENT_TYPE,\n                );\n\n            // Special case recent emoji\n            case \"recent_emoji\":\n                return this.setAccountData(RECENT_EMOJI_EVENT_TYPE, \"recent_emoji\", newValue);\n\n            // Special case integration manager provisioning\n            case \"integrationProvisioning\":\n                return this.setAccountData(INTEG_PROVISIONING_EVENT_TYPE, \"enabled\", newValue);\n\n            // Special case analytics\n            case \"pseudonymousAnalyticsOptIn\":\n                return this.setAccountData(ANALYTICS_EVENT_TYPE, \"pseudonymousAnalyticsOptIn\", newValue);\n\n            default:\n                return this.setAccountData(DEFAULT_SETTINGS_EVENT_TYPE, settingName, newValue);\n        }\n    }\n\n    public canSetValue(settingName: string, roomId: string): boolean {\n        return true; // It's their account, so they should be able to\n    }\n\n    public isSupported(): boolean {\n        return this.client && !this.client.isGuest();\n    }\n\n    private getSettings(eventType = \"im.vector.web.settings\"): any { // TODO: [TS] Types on return\n        if (!this.client) return null;\n\n        const event = this.client.getAccountData(eventType);\n        if (!event || !event.getContent()) return null;\n        return objectClone(event.getContent()); // clone to prevent mutation\n    }\n\n    private notifyBreadcrumbsUpdate(event: MatrixEvent) {\n        let val = [];\n        if (event.getType() === BREADCRUMBS_LEGACY_EVENT_TYPE) {\n            // This seems fishy - try and get the event for the new rooms\n            const newType = this.getSettings(BREADCRUMBS_EVENT_TYPE);\n            if (newType) val = newType['recent_rooms'];\n            else val = event.getContent()['rooms'];\n        } else if (event.getType() === BREADCRUMBS_EVENT_TYPE) {\n            val = event.getContent()['recent_rooms'];\n        } else {\n            return; // for sanity, not because we expect to be here.\n        }\n        this.watchers.notifyUpdate(\"breadcrumb_rooms\", null, SettingLevel.ACCOUNT, val || []);\n    }\n}\n"],"mappings":"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"}