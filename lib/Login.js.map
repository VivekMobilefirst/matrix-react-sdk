{"version":3,"file":"Login.js","names":["IdentityProviderBrand","Login","constructor","hsUrl","isUrl","fallbackHsUrl","opts","flows","defaultDeviceDisplayName","tempClient","getHomeserverUrl","getIdentityServerUrl","setHomeserverUrl","setIdentityServerUrl","createTemporaryClient","createClient","baseUrl","idBaseUrl","getFlows","client","loginFlows","loginViaPassword","username","phoneCountry","phoneNumber","password","isEmail","indexOf","identifier","type","country","phone","number","medium","address","user","loginParams","initial_device_display_name","tryFallbackHs","originalError","sendLoginRequest","catch","fallbackError","logger","log","originalLoginError","error","httpStatus","loginType","data","login","wellknown","well_known","creds","homeserverUrl","identityServerUrl","userId","user_id","deviceId","device_id","accessToken","access_token","SecurityCustomisations","examineLoginResponse"],"sources":["../src/Login.ts"],"sourcesContent":["/*\nCopyright 2015-2021 The Matrix.org Foundation C.I.C.\nCopyright 2019 Michael Telatynski <7t3chguy@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// @ts-ignore - XXX: tsc doesn't like this: our js-sdk imports are complex so this isn't surprising\nimport { createClient } from \"matrix-js-sdk/src/matrix\";\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { IMatrixClientCreds } from \"./MatrixClientPeg\";\nimport SecurityCustomisations from \"./customisations/Security\";\n\ninterface ILoginOptions {\n    defaultDeviceDisplayName?: string;\n}\n\n// TODO: Move this to JS SDK\ninterface IPasswordFlow {\n    type: \"m.login.password\";\n}\n\nexport enum IdentityProviderBrand {\n    Gitlab = \"gitlab\",\n    Github = \"github\",\n    Apple = \"apple\",\n    Google = \"google\",\n    Facebook = \"facebook\",\n    Twitter = \"twitter\",\n}\n\nexport interface IIdentityProvider {\n    id: string;\n    name: string;\n    icon?: string;\n    brand?: IdentityProviderBrand | string;\n}\n\nexport interface ISSOFlow {\n    type: \"m.login.sso\" | \"m.login.cas\";\n    // eslint-disable-next-line camelcase\n    identity_providers?: IIdentityProvider[];\n}\n\nexport type LoginFlow = ISSOFlow | IPasswordFlow;\n\n// TODO: Move this to JS SDK\n/* eslint-disable camelcase */\ninterface ILoginParams {\n    identifier?: object;\n    password?: string;\n    token?: string;\n    device_id?: string;\n    initial_device_display_name?: string;\n}\n/* eslint-enable camelcase */\n\nexport default class Login {\n    private hsUrl: string;\n    private isUrl: string;\n    private fallbackHsUrl: string;\n    // TODO: Flows need a type in JS SDK\n    private flows: Array<LoginFlow>;\n    private defaultDeviceDisplayName: string;\n    private tempClient: MatrixClient;\n\n    constructor(\n        hsUrl: string,\n        isUrl: string,\n        fallbackHsUrl?: string,\n        opts?: ILoginOptions,\n    ) {\n        this.hsUrl = hsUrl;\n        this.isUrl = isUrl;\n        this.fallbackHsUrl = fallbackHsUrl;\n        this.flows = [];\n        this.defaultDeviceDisplayName = opts.defaultDeviceDisplayName;\n        this.tempClient = null; // memoize\n    }\n\n    public getHomeserverUrl(): string {\n        return this.hsUrl;\n    }\n\n    public getIdentityServerUrl(): string {\n        return this.isUrl;\n    }\n\n    public setHomeserverUrl(hsUrl: string): void {\n        this.tempClient = null; // clear memoization\n        this.hsUrl = hsUrl;\n    }\n\n    public setIdentityServerUrl(isUrl: string): void {\n        this.tempClient = null; // clear memoization\n        this.isUrl = isUrl;\n    }\n\n    /**\n     * Get a temporary MatrixClient, which can be used for login or register\n     * requests.\n     * @returns {MatrixClient}\n     */\n    public createTemporaryClient(): MatrixClient {\n        if (this.tempClient) return this.tempClient; // use memoization\n        return this.tempClient = createClient({\n            baseUrl: this.hsUrl,\n            idBaseUrl: this.isUrl,\n        });\n    }\n\n    public async getFlows(): Promise<Array<LoginFlow>> {\n        const client = this.createTemporaryClient();\n        const { flows } = await client.loginFlows();\n        this.flows = flows;\n        return this.flows;\n    }\n\n    public loginViaPassword(\n        username: string,\n        phoneCountry: string,\n        phoneNumber: string,\n        password: string,\n    ): Promise<IMatrixClientCreds> {\n        const isEmail = username.indexOf(\"@\") > 0;\n\n        let identifier;\n        if (phoneCountry && phoneNumber) {\n            identifier = {\n                type: 'm.id.phone',\n                country: phoneCountry,\n                phone: phoneNumber,\n                // XXX: Synapse historically wanted `number` and not `phone`\n                number: phoneNumber,\n            };\n        } else if (isEmail) {\n            identifier = {\n                type: 'm.id.thirdparty',\n                medium: 'email',\n                address: username,\n            };\n        } else {\n            identifier = {\n                type: 'm.id.user',\n                user: username,\n            };\n        }\n\n        const loginParams = {\n            password,\n            identifier,\n            initial_device_display_name: this.defaultDeviceDisplayName,\n        };\n\n        const tryFallbackHs = (originalError) => {\n            return sendLoginRequest(\n                this.fallbackHsUrl, this.isUrl, 'm.login.password', loginParams,\n            ).catch((fallbackError) => {\n                logger.log(\"fallback HS login failed\", fallbackError);\n                // throw the original error\n                throw originalError;\n            });\n        };\n\n        let originalLoginError = null;\n        return sendLoginRequest(\n            this.hsUrl, this.isUrl, 'm.login.password', loginParams,\n        ).catch((error) => {\n            originalLoginError = error;\n            if (error.httpStatus === 403) {\n                if (this.fallbackHsUrl) {\n                    return tryFallbackHs(originalLoginError);\n                }\n            }\n            throw originalLoginError;\n        }).catch((error) => {\n            logger.log(\"Login failed\", error);\n            throw error;\n        });\n    }\n}\n\n/**\n * Send a login request to the given server, and format the response\n * as a MatrixClientCreds\n *\n * @param {string} hsUrl   the base url of the Homeserver used to log in.\n * @param {string} isUrl   the base url of the default identity server\n * @param {string} loginType the type of login to do\n * @param {ILoginParams} loginParams the parameters for the login\n *\n * @returns {MatrixClientCreds}\n */\nexport async function sendLoginRequest(\n    hsUrl: string,\n    isUrl: string,\n    loginType: string,\n    loginParams: ILoginParams,\n): Promise<IMatrixClientCreds> {\n    const client = createClient({\n        baseUrl: hsUrl,\n        idBaseUrl: isUrl,\n    });\n\n    const data = await client.login(loginType, loginParams);\n\n    const wellknown = data.well_known;\n    if (wellknown) {\n        if (wellknown[\"m.homeserver\"] && wellknown[\"m.homeserver\"][\"base_url\"]) {\n            hsUrl = wellknown[\"m.homeserver\"][\"base_url\"];\n            logger.log(`Overrode homeserver setting with ${hsUrl} from login response`);\n        }\n        if (wellknown[\"m.identity_server\"] && wellknown[\"m.identity_server\"][\"base_url\"]) {\n            // TODO: should we prompt here?\n            isUrl = wellknown[\"m.identity_server\"][\"base_url\"];\n            logger.log(`Overrode IS setting with ${isUrl} from login response`);\n        }\n    }\n\n    const creds: IMatrixClientCreds = {\n        homeserverUrl: hsUrl,\n        identityServerUrl: isUrl,\n        userId: data.user_id,\n        deviceId: data.device_id,\n        accessToken: data.access_token,\n    };\n\n    SecurityCustomisations.examineLoginResponse?.(data, creds);\n\n    return creds;\n}\n"],"mappings":";;;;;;;;;;;;AAkBA;;AAEA;;AAGA;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;IAiBYA,qB;;;WAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,qCAAAA,qB;;AAiCZ;AAEe,MAAMC,KAAN,CAAY;EAIvB;EAKAC,WAAW,CACPC,KADO,EAEPC,KAFO,EAGPC,aAHO,EAIPC,IAJO,EAKT;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IACE,KAAKH,KAAL,GAAaA,KAAb;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKE,KAAL,GAAa,EAAb;IACA,KAAKC,wBAAL,GAAgCF,IAAI,CAACE,wBAArC;IACA,KAAKC,UAAL,GAAkB,IAAlB,CANF,CAM0B;EAC3B;;EAEMC,gBAAgB,GAAW;IAC9B,OAAO,KAAKP,KAAZ;EACH;;EAEMQ,oBAAoB,GAAW;IAClC,OAAO,KAAKP,KAAZ;EACH;;EAEMQ,gBAAgB,CAACT,KAAD,EAAsB;IACzC,KAAKM,UAAL,GAAkB,IAAlB,CADyC,CACjB;;IACxB,KAAKN,KAAL,GAAaA,KAAb;EACH;;EAEMU,oBAAoB,CAACT,KAAD,EAAsB;IAC7C,KAAKK,UAAL,GAAkB,IAAlB,CAD6C,CACrB;;IACxB,KAAKL,KAAL,GAAaA,KAAb;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACWU,qBAAqB,GAAiB;IACzC,IAAI,KAAKL,UAAT,EAAqB,OAAO,KAAKA,UAAZ,CADoB,CACI;;IAC7C,OAAO,KAAKA,UAAL,GAAkB,IAAAM,oBAAA,EAAa;MAClCC,OAAO,EAAE,KAAKb,KADoB;MAElCc,SAAS,EAAE,KAAKb;IAFkB,CAAb,CAAzB;EAIH;;EAEoB,MAARc,QAAQ,GAA8B;IAC/C,MAAMC,MAAM,GAAG,KAAKL,qBAAL,EAAf;IACA,MAAM;MAAEP;IAAF,IAAY,MAAMY,MAAM,CAACC,UAAP,EAAxB;IACA,KAAKb,KAAL,GAAaA,KAAb;IACA,OAAO,KAAKA,KAAZ;EACH;;EAEMc,gBAAgB,CACnBC,QADmB,EAEnBC,YAFmB,EAGnBC,WAHmB,EAInBC,QAJmB,EAKQ;IAC3B,MAAMC,OAAO,GAAGJ,QAAQ,CAACK,OAAT,CAAiB,GAAjB,IAAwB,CAAxC;IAEA,IAAIC,UAAJ;;IACA,IAAIL,YAAY,IAAIC,WAApB,EAAiC;MAC7BI,UAAU,GAAG;QACTC,IAAI,EAAE,YADG;QAETC,OAAO,EAAEP,YAFA;QAGTQ,KAAK,EAAEP,WAHE;QAIT;QACAQ,MAAM,EAAER;MALC,CAAb;IAOH,CARD,MAQO,IAAIE,OAAJ,EAAa;MAChBE,UAAU,GAAG;QACTC,IAAI,EAAE,iBADG;QAETI,MAAM,EAAE,OAFC;QAGTC,OAAO,EAAEZ;MAHA,CAAb;IAKH,CANM,MAMA;MACHM,UAAU,GAAG;QACTC,IAAI,EAAE,WADG;QAETM,IAAI,EAAEb;MAFG,CAAb;IAIH;;IAED,MAAMc,WAAW,GAAG;MAChBX,QADgB;MAEhBG,UAFgB;MAGhBS,2BAA2B,EAAE,KAAK7B;IAHlB,CAApB;;IAMA,MAAM8B,aAAa,GAAIC,aAAD,IAAmB;MACrC,OAAOC,gBAAgB,CACnB,KAAKnC,aADc,EACC,KAAKD,KADN,EACa,kBADb,EACiCgC,WADjC,CAAhB,CAELK,KAFK,CAEEC,aAAD,IAAmB;QACvBC,cAAA,CAAOC,GAAP,CAAW,0BAAX,EAAuCF,aAAvC,EADuB,CAEvB;;;QACA,MAAMH,aAAN;MACH,CANM,CAAP;IAOH,CARD;;IAUA,IAAIM,kBAAkB,GAAG,IAAzB;IACA,OAAOL,gBAAgB,CACnB,KAAKrC,KADc,EACP,KAAKC,KADE,EACK,kBADL,EACyBgC,WADzB,CAAhB,CAELK,KAFK,CAEEK,KAAD,IAAW;MACfD,kBAAkB,GAAGC,KAArB;;MACA,IAAIA,KAAK,CAACC,UAAN,KAAqB,GAAzB,EAA8B;QAC1B,IAAI,KAAK1C,aAAT,EAAwB;UACpB,OAAOiC,aAAa,CAACO,kBAAD,CAApB;QACH;MACJ;;MACD,MAAMA,kBAAN;IACH,CAVM,EAUJJ,KAVI,CAUGK,KAAD,IAAW;MAChBH,cAAA,CAAOC,GAAP,CAAW,cAAX,EAA2BE,KAA3B;;MACA,MAAMA,KAAN;IACH,CAbM,CAAP;EAcH;;AA1HsB;AA6H3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,eAAeN,gBAAf,CACHrC,KADG,EAEHC,KAFG,EAGH4C,SAHG,EAIHZ,WAJG,EAKwB;EAC3B,MAAMjB,MAAM,GAAG,IAAAJ,oBAAA,EAAa;IACxBC,OAAO,EAAEb,KADe;IAExBc,SAAS,EAAEb;EAFa,CAAb,CAAf;EAKA,MAAM6C,IAAI,GAAG,MAAM9B,MAAM,CAAC+B,KAAP,CAAaF,SAAb,EAAwBZ,WAAxB,CAAnB;EAEA,MAAMe,SAAS,GAAGF,IAAI,CAACG,UAAvB;;EACA,IAAID,SAAJ,EAAe;IACX,IAAIA,SAAS,CAAC,cAAD,CAAT,IAA6BA,SAAS,CAAC,cAAD,CAAT,CAA0B,UAA1B,CAAjC,EAAwE;MACpEhD,KAAK,GAAGgD,SAAS,CAAC,cAAD,CAAT,CAA0B,UAA1B,CAAR;;MACAR,cAAA,CAAOC,GAAP,CAAY,oCAAmCzC,KAAM,sBAArD;IACH;;IACD,IAAIgD,SAAS,CAAC,mBAAD,CAAT,IAAkCA,SAAS,CAAC,mBAAD,CAAT,CAA+B,UAA/B,CAAtC,EAAkF;MAC9E;MACA/C,KAAK,GAAG+C,SAAS,CAAC,mBAAD,CAAT,CAA+B,UAA/B,CAAR;;MACAR,cAAA,CAAOC,GAAP,CAAY,4BAA2BxC,KAAM,sBAA7C;IACH;EACJ;;EAED,MAAMiD,KAAyB,GAAG;IAC9BC,aAAa,EAAEnD,KADe;IAE9BoD,iBAAiB,EAAEnD,KAFW;IAG9BoD,MAAM,EAAEP,IAAI,CAACQ,OAHiB;IAI9BC,QAAQ,EAAET,IAAI,CAACU,SAJe;IAK9BC,WAAW,EAAEX,IAAI,CAACY;EALY,CAAlC;EAQAC,iBAAA,CAAuBC,oBAAvB,GAA8Cd,IAA9C,EAAoDI,KAApD;EAEA,OAAOA,KAAP;AACH"}