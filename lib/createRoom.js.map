{"version":3,"file":"createRoom.js","names":["createRoom","opts","spinner","undefined","guestAccess","encryption","client","MatrixClientPeg","get","isGuest","dis","dispatch","action","defaultPreset","dmUserId","Preset","TrustedPrivateChat","PrivateChat","createOpts","preset","visibility","Visibility","Private","invite","getAddressType","invite_3pid","id_server","getIdentityServerUrl","medium","address","is_direct","roomType","creation_content","RoomCreateTypeField","RoomType","ElementVideo","power_level_content_override","events","VIDEO_CHANNEL_MEMBER","EventType","RoomName","RoomAvatar","RoomPowerLevels","RoomHistoryVisibility","RoomCanonicalAlias","RoomTombstone","RoomServerAcl","RoomEncryption","users","getUserId","andView","initial_state","push","type","state_key","content","guest_access","algorithm","parentSpace","makeSpaceParentEvent","historyVisibility","PublicChat","HistoryVisibility","WorldReadable","Invited","joinRule","JoinRule","Restricted","room_version","PreferredRoomVersions","RestrictedRooms","RoomJoinRules","RestrictedAllowType","RoomMembership","roomId","join_rule","avatar","url","File","uploadContent","modal","Modal","createDialog","Spinner","catch","err","httpStatus","errcode","data","error","logger","warn","Promise","reject","finally","close","then","res","room_id","Rooms","setDMRoom","resolve","SpaceStore","instance","addRoomToSpace","getDomain","suggested","addVideoChannel","name","room","getRoom","plEvent","currentState","getStateEvents","setPowerLevel","Action","ViewRoom","should_peek","joining","justCreatedOpts","metricsTrigger","inlineErrors","JoinRoomError","description","_t","ErrorDialog","title","canEncryptToAllUsers","userIds","usersDeviceMap","downloadKeys","Object","values","every","userDevices","keys","length","e","ensureVirtualRoomExists","userId","nativeRoomId","existingDMRoom","findDMForUser","VIRTUAL_ROOM_EVENT_TYPE","ensureDMExists","privateShouldBeEncrypted","waitForMember"],"sources":["../src/createRoom.ts"],"sourcesContent":["/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { EventType, RoomCreateTypeField, RoomType } from \"matrix-js-sdk/src/@types/event\";\nimport { ICreateRoomOpts } from \"matrix-js-sdk/src/@types/requests\";\nimport {\n    HistoryVisibility,\n    JoinRule,\n    Preset,\n    RestrictedAllowType,\n    Visibility,\n} from \"matrix-js-sdk/src/@types/partials\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { MatrixClientPeg } from './MatrixClientPeg';\nimport Modal from './Modal';\nimport { _t } from './languageHandler';\nimport dis from \"./dispatcher/dispatcher\";\nimport * as Rooms from \"./Rooms\";\nimport { getAddressType } from \"./UserAddress\";\nimport { VIRTUAL_ROOM_EVENT_TYPE } from \"./call-types\";\nimport SpaceStore from \"./stores/spaces/SpaceStore\";\nimport { makeSpaceParentEvent } from \"./utils/space\";\nimport { VIDEO_CHANNEL_MEMBER, addVideoChannel } from \"./utils/VideoChannelUtils\";\nimport { Action } from \"./dispatcher/actions\";\nimport ErrorDialog from \"./components/views/dialogs/ErrorDialog\";\nimport Spinner from \"./components/views/elements/Spinner\";\nimport { ViewRoomPayload } from \"./dispatcher/payloads/ViewRoomPayload\";\nimport { findDMForUser } from \"./utils/dm/findDMForUser\";\nimport { privateShouldBeEncrypted } from \"./utils/rooms\";\nimport { waitForMember } from \"./utils/membership\";\nimport { PreferredRoomVersions } from \"./utils/PreferredRoomVersions\";\n\n// we define a number of interfaces which take their names from the js-sdk\n/* eslint-disable camelcase */\n\nexport interface IOpts {\n    dmUserId?: string;\n    createOpts?: ICreateRoomOpts;\n    spinner?: boolean;\n    guestAccess?: boolean;\n    encryption?: boolean;\n    inlineErrors?: boolean;\n    andView?: boolean;\n    avatar?: File | string; // will upload if given file, else mxcUrl is needed\n    roomType?: RoomType | string;\n    historyVisibility?: HistoryVisibility;\n    parentSpace?: Room;\n    // contextually only makes sense if parentSpace is specified, if true then will be added to parentSpace as suggested\n    suggested?: boolean;\n    joinRule?: JoinRule;\n}\n\n/**\n * Create a new room, and switch to it.\n *\n * @param {object=} opts parameters for creating the room\n * @param {string=} opts.dmUserId If specified, make this a DM room for this user and invite them\n * @param {object=} opts.createOpts set of options to pass to createRoom call.\n * @param {bool=} opts.spinner True to show a modal spinner while the room is created.\n *     Default: True\n * @param {bool=} opts.guestAccess Whether to enable guest access.\n *     Default: True\n * @param {bool=} opts.encryption Whether to enable encryption.\n *     Default: False\n * @param {bool=} opts.inlineErrors True to raise errors off the promise instead of resolving to null.\n *     Default: False\n * @param {bool=} opts.andView True to dispatch an action to view the room once it has been created.\n *\n * @returns {Promise} which resolves to the room id, or null if the\n * action was aborted or failed.\n */\nexport default async function createRoom(opts: IOpts): Promise<string | null> {\n    opts = opts || {};\n    if (opts.spinner === undefined) opts.spinner = true;\n    if (opts.guestAccess === undefined) opts.guestAccess = true;\n    if (opts.encryption === undefined) opts.encryption = false;\n\n    const client = MatrixClientPeg.get();\n    if (client.isGuest()) {\n        dis.dispatch({ action: 'require_registration' });\n        return null;\n    }\n\n    const defaultPreset = opts.dmUserId ? Preset.TrustedPrivateChat : Preset.PrivateChat;\n\n    // set some defaults for the creation\n    const createOpts: ICreateRoomOpts = opts.createOpts || {};\n    createOpts.preset = createOpts.preset || defaultPreset;\n    createOpts.visibility = createOpts.visibility || Visibility.Private;\n    if (opts.dmUserId && createOpts.invite === undefined) {\n        switch (getAddressType(opts.dmUserId)) {\n            case 'mx-user-id':\n                createOpts.invite = [opts.dmUserId];\n                break;\n            case 'email':\n                createOpts.invite_3pid = [{\n                    id_server: MatrixClientPeg.get().getIdentityServerUrl(true),\n                    medium: 'email',\n                    address: opts.dmUserId,\n                }];\n        }\n    }\n    if (opts.dmUserId && createOpts.is_direct === undefined) {\n        createOpts.is_direct = true;\n    }\n\n    if (opts.roomType) {\n        createOpts.creation_content = {\n            ...createOpts.creation_content,\n            [RoomCreateTypeField]: opts.roomType,\n        };\n\n        // Video rooms require custom power levels\n        if (opts.roomType === RoomType.ElementVideo) {\n            createOpts.power_level_content_override = {\n                events: {\n                    // Allow all users to send video member updates\n                    [VIDEO_CHANNEL_MEMBER]: 0,\n                    // Make widgets immutable, even to admins\n                    \"im.vector.modular.widgets\": 200,\n                    // Annoyingly, we have to reiterate all the defaults here\n                    [EventType.RoomName]: 50,\n                    [EventType.RoomAvatar]: 50,\n                    [EventType.RoomPowerLevels]: 100,\n                    [EventType.RoomHistoryVisibility]: 100,\n                    [EventType.RoomCanonicalAlias]: 50,\n                    [EventType.RoomTombstone]: 100,\n                    [EventType.RoomServerAcl]: 100,\n                    [EventType.RoomEncryption]: 100,\n                },\n                users: {\n                    // Temporarily give ourselves the power to set up a widget\n                    [client.getUserId()]: 200,\n                },\n            };\n        }\n    }\n\n    // By default, view the room after creating it\n    if (opts.andView === undefined) {\n        opts.andView = true;\n    }\n\n    createOpts.initial_state = createOpts.initial_state || [];\n\n    // Allow guests by default since the room is private and they'd\n    // need an invite. This means clicking on a 3pid invite email can\n    // actually drop you right in to a chat.\n    if (opts.guestAccess) {\n        createOpts.initial_state.push({\n            type: 'm.room.guest_access',\n            state_key: '',\n            content: {\n                guest_access: 'can_join',\n            },\n        });\n    }\n\n    if (opts.encryption) {\n        createOpts.initial_state.push({\n            type: 'm.room.encryption',\n            state_key: '',\n            content: {\n                algorithm: 'm.megolm.v1.aes-sha2',\n            },\n        });\n    }\n\n    if (opts.parentSpace) {\n        createOpts.initial_state.push(makeSpaceParentEvent(opts.parentSpace, true));\n        if (!opts.historyVisibility) {\n            opts.historyVisibility = createOpts.preset === Preset.PublicChat\n                ? HistoryVisibility.WorldReadable\n                : HistoryVisibility.Invited;\n        }\n\n        if (opts.joinRule === JoinRule.Restricted) {\n            createOpts.room_version = PreferredRoomVersions.RestrictedRooms;\n\n            createOpts.initial_state.push({\n                type: EventType.RoomJoinRules,\n                content: {\n                    \"join_rule\": JoinRule.Restricted,\n                    \"allow\": [{\n                        \"type\": RestrictedAllowType.RoomMembership,\n                        \"room_id\": opts.parentSpace.roomId,\n                    }],\n                },\n            });\n        }\n    }\n\n    // we handle the restricted join rule in the parentSpace handling block above\n    if (opts.joinRule && opts.joinRule !== JoinRule.Restricted) {\n        createOpts.initial_state.push({\n            type: EventType.RoomJoinRules,\n            content: { join_rule: opts.joinRule },\n        });\n    }\n\n    if (opts.avatar) {\n        let url = opts.avatar;\n        if (opts.avatar instanceof File) {\n            url = await client.uploadContent(opts.avatar);\n        }\n\n        createOpts.initial_state.push({\n            type: EventType.RoomAvatar,\n            content: { url },\n        });\n    }\n\n    if (opts.historyVisibility) {\n        createOpts.initial_state.push({\n            type: EventType.RoomHistoryVisibility,\n            content: {\n                \"history_visibility\": opts.historyVisibility,\n            },\n        });\n    }\n\n    let modal;\n    if (opts.spinner) modal = Modal.createDialog(Spinner, null, 'mx_Dialog_spinner');\n\n    let roomId;\n    return client.createRoom(createOpts).catch(function(err) {\n        // NB This checks for the Synapse-specific error condition of a room creation\n        // having been denied because the requesting user wanted to publish the room,\n        // but the server denies them that permission (via room_list_publication_rules).\n        // The check below responds by retrying without publishing the room.\n        if (err.httpStatus === 403 && err.errcode === \"M_UNKNOWN\" && err.data.error === \"Not allowed to publish room\") {\n            logger.warn(\"Failed to publish room, try again without publishing it\");\n            createOpts.visibility = Visibility.Private;\n            return client.createRoom(createOpts);\n        } else {\n            return Promise.reject(err);\n        }\n    }).finally(function() {\n        if (modal) modal.close();\n    }).then(function(res) {\n        roomId = res.room_id;\n        if (opts.dmUserId) {\n            return Rooms.setDMRoom(roomId, opts.dmUserId);\n        } else {\n            return Promise.resolve();\n        }\n    }).then(() => {\n        if (opts.parentSpace) {\n            return SpaceStore.instance.addRoomToSpace(opts.parentSpace, roomId, [client.getDomain()], opts.suggested);\n        }\n    }).then(async () => {\n        if (opts.roomType === RoomType.ElementVideo) {\n            // Set up video rooms with a Jitsi widget\n            await addVideoChannel(roomId, createOpts.name);\n\n            // Reset our power level back to admin so that the widget becomes immutable\n            const room = client.getRoom(roomId);\n            const plEvent = room?.currentState.getStateEvents(EventType.RoomPowerLevels, \"\");\n            await client.setPowerLevel(roomId, client.getUserId(), 100, plEvent);\n        }\n    }).then(function() {\n        // NB createRoom doesn't block on the client seeing the echo that the\n        // room has been created, so we race here with the client knowing that\n        // the room exists, causing things like\n        // https://github.com/vector-im/vector-web/issues/1813\n        // Even if we were to block on the echo, servers tend to split the room\n        // state over multiple syncs so we can't atomically know when we have the\n        // entire thing.\n        if (opts.andView) {\n            dis.dispatch<ViewRoomPayload>({\n                action: Action.ViewRoom,\n                room_id: roomId,\n                should_peek: false,\n                // Creating a room will have joined us to the room,\n                // so we are expecting the room to come down the sync\n                // stream, if it hasn't already.\n                joining: true,\n                justCreatedOpts: opts,\n                metricsTrigger: \"Created\",\n            });\n        }\n        return roomId;\n    }, function(err) {\n        // Raise the error if the caller requested that we do so.\n        if (opts.inlineErrors) throw err;\n\n        // We also failed to join the room (this sets joining to false in RoomViewStore)\n        dis.dispatch({\n            action: Action.JoinRoomError,\n            roomId,\n        });\n        logger.error(\"Failed to create room \" + roomId + \" \" + err);\n        let description = _t(\"Server may be unavailable, overloaded, or you hit a bug.\");\n        if (err.errcode === \"M_UNSUPPORTED_ROOM_VERSION\") {\n            // Technically not possible with the UI as of April 2019 because there's no\n            // options for the user to change this. However, it's not a bad thing to report\n            // the error to the user for if/when the UI is available.\n            description = _t(\"The server does not support the room version specified.\");\n        }\n        Modal.createDialog(ErrorDialog, {\n            title: _t(\"Failure to create room\"),\n            description,\n        });\n        return null;\n    });\n}\n\n/*\n * Ensure that for every user in a room, there is at least one device that we\n * can encrypt to.\n */\nexport async function canEncryptToAllUsers(client: MatrixClient, userIds: string[]) {\n    try {\n        const usersDeviceMap = await client.downloadKeys(userIds);\n        // { \"@user:host\": { \"DEVICE\": {...}, ... }, ... }\n        return Object.values(usersDeviceMap).every((userDevices) =>\n            // { \"DEVICE\": {...}, ... }\n            Object.keys(userDevices).length > 0,\n        );\n    } catch (e) {\n        logger.error(\"Error determining if it's possible to encrypt to all users: \", e);\n        return false; // assume not\n    }\n}\n\n// Similar to ensureDMExists but also adds creation content\n// without polluting ensureDMExists with unrelated stuff (also\n// they're never encrypted).\nexport async function ensureVirtualRoomExists(\n    client: MatrixClient, userId: string, nativeRoomId: string,\n): Promise<string> {\n    const existingDMRoom = findDMForUser(client, userId);\n    let roomId;\n    if (existingDMRoom) {\n        roomId = existingDMRoom.roomId;\n    } else {\n        roomId = await createRoom({\n            dmUserId: userId,\n            spinner: false,\n            andView: false,\n            createOpts: {\n                creation_content: {\n                    // This allows us to recognise that the room is a virtual room\n                    // when it comes down our sync stream (we also put the ID of the\n                    // respective native room in there because why not?)\n                    [VIRTUAL_ROOM_EVENT_TYPE]: nativeRoomId,\n                },\n            },\n        });\n    }\n    return roomId;\n}\n\nexport async function ensureDMExists(client: MatrixClient, userId: string): Promise<string> {\n    const existingDMRoom = findDMForUser(client, userId);\n    let roomId;\n    if (existingDMRoom) {\n        roomId = existingDMRoom.roomId;\n    } else {\n        let encryption: boolean = undefined;\n        if (privateShouldBeEncrypted()) {\n            encryption = await canEncryptToAllUsers(client, [userId]);\n        }\n\n        roomId = await createRoom({ encryption, dmUserId: userId, spinner: false, andView: false });\n        await waitForMember(client, roomId, userId);\n    }\n    return roomId;\n}\n"],"mappings":"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"}