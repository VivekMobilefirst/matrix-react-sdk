{"version":3,"file":"index.js","names":["ALGORITHM_INSTANCES","SortAlgorithm","Recent","RecentAlgorithm","Alphabetic","AlphabeticAlgorithm","Manual","ManualAlgorithm","getSortingAlgorithmInstance","algorithm","Error","sortRoomsWithAlgorithm","rooms","tagId","sortRooms"],"sources":["../../../../../src/stores/room-list/algorithms/tag-sorting/index.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\n\nimport { SortAlgorithm } from \"../models\";\nimport { ManualAlgorithm } from \"./ManualAlgorithm\";\nimport { IAlgorithm } from \"./IAlgorithm\";\nimport { TagID } from \"../../models\";\nimport { RecentAlgorithm } from \"./RecentAlgorithm\";\nimport { AlphabeticAlgorithm } from \"./AlphabeticAlgorithm\";\n\nconst ALGORITHM_INSTANCES: { [algorithm in SortAlgorithm]: IAlgorithm } = {\n    [SortAlgorithm.Recent]: new RecentAlgorithm(),\n    [SortAlgorithm.Alphabetic]: new AlphabeticAlgorithm(),\n    [SortAlgorithm.Manual]: new ManualAlgorithm(),\n};\n\n/**\n * Gets an instance of the defined algorithm\n * @param {SortAlgorithm} algorithm The algorithm to get an instance of.\n * @returns {IAlgorithm} The algorithm instance.\n */\nexport function getSortingAlgorithmInstance(algorithm: SortAlgorithm): IAlgorithm {\n    if (!ALGORITHM_INSTANCES[algorithm]) {\n        throw new Error(`${algorithm} is not a known algorithm`);\n    }\n\n    return ALGORITHM_INSTANCES[algorithm];\n}\n\n/**\n * Sorts rooms in a given tag according to the algorithm given.\n * @param {Room[]} rooms The rooms to sort.\n * @param {TagID} tagId The tag in which the sorting is occurring.\n * @param {SortAlgorithm} algorithm The algorithm to use for sorting.\n * @returns {Room[]} Returns the sorted rooms.\n */\nexport function sortRoomsWithAlgorithm(rooms: Room[], tagId: TagID, algorithm: SortAlgorithm): Room[] {\n    return getSortingAlgorithmInstance(algorithm).sortRooms(rooms, tagId);\n}\n"],"mappings":";;;;;;;;AAkBA;;AACA;;AAGA;;AACA;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA,MAAMA,mBAAiE,GAAG;EACtE,CAACC,qBAAA,CAAcC,MAAf,GAAwB,IAAIC,gCAAJ,EAD8C;EAEtE,CAACF,qBAAA,CAAcG,UAAf,GAA4B,IAAIC,wCAAJ,EAF0C;EAGtE,CAACJ,qBAAA,CAAcK,MAAf,GAAwB,IAAIC,gCAAJ;AAH8C,CAA1E;AAMA;AACA;AACA;AACA;AACA;;AACO,SAASC,2BAAT,CAAqCC,SAArC,EAA2E;EAC9E,IAAI,CAACT,mBAAmB,CAACS,SAAD,CAAxB,EAAqC;IACjC,MAAM,IAAIC,KAAJ,CAAW,GAAED,SAAU,2BAAvB,CAAN;EACH;;EAED,OAAOT,mBAAmB,CAACS,SAAD,CAA1B;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,sBAAT,CAAgCC,KAAhC,EAA+CC,KAA/C,EAA6DJ,SAA7D,EAA+F;EAClG,OAAOD,2BAA2B,CAACC,SAAD,CAA3B,CAAuCK,SAAvC,CAAiDF,KAAjD,EAAwDC,KAAxD,CAAP;AACH"}