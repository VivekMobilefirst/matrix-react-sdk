{"version":3,"file":"Interface.js","names":["RoomListStoreEvent"],"sources":["../../../src/stores/room-list/Interface.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { Room } from \"matrix-js-sdk/src/models/room\";\nimport type { EventEmitter } from \"events\";\nimport { ITagMap, ListAlgorithm, SortAlgorithm } from \"./algorithms/models\";\nimport { RoomUpdateCause, TagID } from \"./models\";\nimport { IFilterCondition } from \"./filters/IFilterCondition\";\n\nexport enum RoomListStoreEvent {\n    // The event/channel which is called when the room lists have been changed.\n    ListsUpdate = \"lists_update\",\n}\n\nexport interface RoomListStore extends EventEmitter {\n    /**\n     * Gets an ordered set of rooms for the all known tags.\n     * @returns {ITagMap} The cached list of rooms, ordered,\n     * for each tag. May be empty, but never null/undefined.\n     */\n    get orderedLists(): ITagMap;\n\n    /**\n     * Set the sort algorithm for the specified tag.\n     * @param tagId the tag to set the algorithm for\n     * @param sort the sort algorithm to set to\n     */\n    setTagSorting(tagId: TagID, sort: SortAlgorithm): void;\n\n    /**\n     * Get the sort algorithm for the specified tag.\n     * @param tagId tag to get the sort algorithm for\n     * @returns the sort algorithm\n     */\n    getTagSorting(tagId: TagID): SortAlgorithm;\n\n    /**\n     * Set the list algorithm for the specified tag.\n     * @param tagId the tag to set the algorithm for\n     * @param order the list algorithm to set to\n     */\n    setListOrder(tagId: TagID, order: ListAlgorithm): void;\n\n    /**\n     * Get the list algorithm for the specified tag.\n     * @param tagId tag to get the list algorithm for\n     * @returns the list algorithm\n     */\n    getListOrder(tagId: TagID): ListAlgorithm;\n\n    /**\n     * Regenerates the room whole room list, discarding any previous results.\n     *\n     * Note: This is only exposed externally for the tests. Do not call this from within\n     * the app.\n     * @param params.trigger Set to false to prevent a list update from being sent. Should only\n     * be used if the calling code will manually trigger the update.\n     */\n    regenerateAllLists(params: { trigger: boolean }): void;\n\n    /**\n     * Adds a filter condition to the room list store. Filters may be applied async,\n     * and thus might not cause an update to the store immediately.\n     * @param {IFilterCondition} filter The filter condition to add.\n     */\n    addFilter(filter: IFilterCondition): Promise<void>;\n\n    /**\n     * Removes a filter condition from the room list store. If the filter was\n     * not previously added to the room list store, this will no-op. The effects\n     * of removing a filter may be applied async and therefore might not cause\n     * an update right away.\n     * @param {IFilterCondition} filter The filter condition to remove.\n     */\n    removeFilter(filter: IFilterCondition): void;\n\n    /**\n     * Gets the tags for a room identified by the store. The returned set\n     * should never be empty, and will contain DefaultTagID.Untagged if\n     * the store is not aware of any tags.\n     * @param room The room to get the tags for.\n     * @returns The tags for the room.\n     */\n    getTagsForRoom(room: Room): TagID[];\n\n    /**\n     * Manually update a room with a given cause. This should only be used if the\n     * room list store would otherwise be incapable of doing the update itself. Note\n     * that this may race with the room list's regular operation.\n     * @param {Room} room The room to update.\n     * @param {RoomUpdateCause} cause The cause to update for.\n     */\n    manualRoomUpdate(room: Room, cause: RoomUpdateCause): Promise<void>;\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAQYA,kB;;;WAAAA,kB;EAAAA,kB;GAAAA,kB,kCAAAA,kB"}