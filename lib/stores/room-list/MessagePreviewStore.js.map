{"version":3,"file":"MessagePreviewStore.js","names":["ROOM_PREVIEW_CHANGED","PREVIEWS","isState","previewer","MessageEventPreview","CallInviteEventPreview","CallAnswerEventPreview","CallHangupEvent","StickerEventPreview","ReactionEventPreview","M_POLL_START","name","PollStartEventPreview","altName","MAX_EVENTS_BACKWARDS","TAG_ANY","MessagePreviewStore","AsyncStoreWithClient","constructor","defaultDispatcher","Map","instance","internalInstance","getPreviewChangedEventName","room","roomId","getPreviewForRoom","inTagId","previews","has","generatePreview","get","generatePreviewForEvent","event","previewDef","getType","getTextFor","tagId","events","timeline","map","set","changed","i","length","matrixClient","decryptEventIfNeeded","isNullOrUndefined","getStateKey","anyPreview","tagsToGenerate","Array","from","keys","filter","t","genTagId","realTagId","preview","delete","emit","UPDATE_EVENT","onAction","payload","action","isHistoricalEvent","hasOwnProperty","isLiveEvent","getRoomId","getRoom"],"sources":["../../../src/stores/room-list/MessagePreviewStore.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { isNullOrUndefined } from \"matrix-js-sdk/src/utils\";\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\nimport { M_POLL_START } from \"matrix-events-sdk\";\n\nimport { ActionPayload } from \"../../dispatcher/payloads\";\nimport { AsyncStoreWithClient } from \"../AsyncStoreWithClient\";\nimport defaultDispatcher from \"../../dispatcher/dispatcher\";\nimport { MessageEventPreview } from \"./previews/MessageEventPreview\";\nimport { PollStartEventPreview } from \"./previews/PollStartEventPreview\";\nimport { TagID } from \"./models\";\nimport { CallInviteEventPreview } from \"./previews/CallInviteEventPreview\";\nimport { CallAnswerEventPreview } from \"./previews/CallAnswerEventPreview\";\nimport { CallHangupEvent } from \"./previews/CallHangupEvent\";\nimport { StickerEventPreview } from \"./previews/StickerEventPreview\";\nimport { ReactionEventPreview } from \"./previews/ReactionEventPreview\";\nimport { UPDATE_EVENT } from \"../AsyncStore\";\nimport { IPreview } from \"./previews/IPreview\";\n\n// Emitted event for when a room's preview has changed. First argument will the room for which\n// the change happened.\nconst ROOM_PREVIEW_CHANGED = \"room_preview_changed\";\n\nconst PREVIEWS: Record<string, {\n    isState: boolean;\n    previewer: IPreview;\n}> = {\n    'm.room.message': {\n        isState: false,\n        previewer: new MessageEventPreview(),\n    },\n    'm.call.invite': {\n        isState: false,\n        previewer: new CallInviteEventPreview(),\n    },\n    'm.call.answer': {\n        isState: false,\n        previewer: new CallAnswerEventPreview(),\n    },\n    'm.call.hangup': {\n        isState: false,\n        previewer: new CallHangupEvent(),\n    },\n    'm.sticker': {\n        isState: false,\n        previewer: new StickerEventPreview(),\n    },\n    'm.reaction': {\n        isState: false,\n        previewer: new ReactionEventPreview(),\n    },\n    [M_POLL_START.name]: {\n        isState: false,\n        previewer: new PollStartEventPreview(),\n    },\n    [M_POLL_START.altName]: {\n        isState: false,\n        previewer: new PollStartEventPreview(),\n    },\n};\n\n// The maximum number of events we're willing to look back on to get a preview.\nconst MAX_EVENTS_BACKWARDS = 50;\n\n// type merging ftw\ntype TAG_ANY = \"im.vector.any\"; // eslint-disable-line @typescript-eslint/naming-convention\nconst TAG_ANY: TAG_ANY = \"im.vector.any\";\n\ninterface IState {\n    // Empty because we don't actually use the state\n}\n\nexport class MessagePreviewStore extends AsyncStoreWithClient<IState> {\n    private static internalInstance = new MessagePreviewStore();\n\n    // null indicates the preview is empty / irrelevant\n    private previews = new Map<string, Map<TagID|TAG_ANY, string|null>>();\n\n    private constructor() {\n        super(defaultDispatcher, {});\n    }\n\n    public static get instance(): MessagePreviewStore {\n        return MessagePreviewStore.internalInstance;\n    }\n\n    public static getPreviewChangedEventName(room: Room): string {\n        return `${ROOM_PREVIEW_CHANGED}:${room?.roomId}`;\n    }\n\n    /**\n     * Gets the pre-translated preview for a given room\n     * @param room The room to get the preview for.\n     * @param inTagId The tag ID in which the room resides\n     * @returns The preview, or null if none present.\n     */\n    public async getPreviewForRoom(room: Room, inTagId: TagID): Promise<string> {\n        if (!room) return null; // invalid room, just return nothing\n\n        if (!this.previews.has(room.roomId)) await this.generatePreview(room, inTagId);\n\n        const previews = this.previews.get(room.roomId);\n        if (!previews) return null;\n\n        if (!previews.has(inTagId)) {\n            return previews.get(TAG_ANY);\n        }\n        return previews.get(inTagId);\n    }\n\n    public generatePreviewForEvent(event: MatrixEvent): string {\n        const previewDef = PREVIEWS[event.getType()];\n        return previewDef?.previewer.getTextFor(event, null, true) ?? \"\";\n    }\n\n    private async generatePreview(room: Room, tagId?: TagID) {\n        const events = room.timeline;\n        if (!events) return; // should only happen in tests\n\n        let map = this.previews.get(room.roomId);\n        if (!map) {\n            map = new Map<TagID | TAG_ANY, string | null>();\n            this.previews.set(room.roomId, map);\n        }\n\n        // Set the tags so we know what to generate\n        if (!map.has(TAG_ANY)) map.set(TAG_ANY, null);\n        if (tagId && !map.has(tagId)) map.set(tagId, null);\n\n        let changed = false;\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - MAX_EVENTS_BACKWARDS) {\n                // limit reached - clear the preview by breaking out of the loop\n                break;\n            }\n\n            const event = events[i];\n\n            await this.matrixClient.decryptEventIfNeeded(event);\n\n            const previewDef = PREVIEWS[event.getType()];\n            if (!previewDef) continue;\n            if (previewDef.isState && isNullOrUndefined(event.getStateKey())) continue;\n\n            const anyPreview = previewDef.previewer.getTextFor(event, null);\n            if (!anyPreview) continue; // not previewable for some reason\n\n            changed = changed || anyPreview !== map.get(TAG_ANY);\n            map.set(TAG_ANY, anyPreview);\n\n            const tagsToGenerate = Array.from(map.keys()).filter(t => t !== TAG_ANY); // we did the any tag above\n            for (const genTagId of tagsToGenerate) {\n                const realTagId: TagID = genTagId === TAG_ANY ? null : genTagId;\n                const preview = previewDef.previewer.getTextFor(event, realTagId);\n                if (preview === anyPreview) {\n                    changed = changed || anyPreview !== map.get(genTagId);\n                    map.delete(genTagId);\n                } else {\n                    changed = changed || preview !== map.get(genTagId);\n                    map.set(genTagId, preview);\n                }\n            }\n\n            if (changed) {\n                // We've muted the underlying Map, so just emit that we've changed.\n                this.previews.set(room.roomId, map);\n                this.emit(UPDATE_EVENT, this);\n                this.emit(MessagePreviewStore.getPreviewChangedEventName(room), room);\n            }\n            return; // we're done\n        }\n\n        // At this point, we didn't generate a preview so clear it\n        this.previews.set(room.roomId, new Map<TagID|TAG_ANY, string|null>());\n        this.emit(UPDATE_EVENT, this);\n        this.emit(MessagePreviewStore.getPreviewChangedEventName(room), room);\n    }\n\n    protected async onAction(payload: ActionPayload) {\n        if (!this.matrixClient) return;\n\n        if (payload.action === 'MatrixActions.Room.timeline' || payload.action === 'MatrixActions.Event.decrypted') {\n            const event = payload.event; // TODO: Type out the dispatcher\n            const isHistoricalEvent = payload.hasOwnProperty(\"isLiveEvent\") && !payload.isLiveEvent;\n            if (!this.previews.has(event.getRoomId()) || isHistoricalEvent) return; // not important\n            await this.generatePreview(this.matrixClient.getRoom(event.getRoomId()), TAG_ANY);\n        }\n    }\n}\n"],"mappings":"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"}