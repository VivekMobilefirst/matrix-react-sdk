{"version":3,"file":"SpaceFilterCondition.js","names":["SpaceFilterCondition","EventEmitter","Set","MetaSpace","Home","forceUpdate","beforeRoomIds","roomIds","SpaceStore","instance","getSpaceFilteredRoomIds","space","beforeUserIds","userIds","getSpaceFilteredUserIds","beforeShowPeopleInSpace","showPeopleInSpace","isMetaSpace","SettingsStore","getValue","setHasDiff","emit","FILTER_CHANGED","setImmediate","isVisible","room","isRoomInSpace","roomId","updateSpace","off","onStoreUpdate","on","destroy"],"sources":["../../../../src/stores/room-list/filters/SpaceFilterCondition.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { EventEmitter } from \"events\";\nimport { Room } from \"matrix-js-sdk/src/models/room\";\n\nimport { FILTER_CHANGED, IFilterCondition } from \"./IFilterCondition\";\nimport { IDestroyable } from \"../../../utils/IDestroyable\";\nimport SpaceStore from \"../../spaces/SpaceStore\";\nimport { isMetaSpace, MetaSpace, SpaceKey } from \"../../spaces\";\nimport { setHasDiff } from \"../../../utils/sets\";\nimport SettingsStore from \"../../../settings/SettingsStore\";\n\n/**\n * A filter condition for the room list which reveals rooms which\n * are a member of a given space or if no space is selected shows:\n *  + Orphaned rooms (ones not in any space you are a part of)\n *  + All DMs\n */\nexport class SpaceFilterCondition extends EventEmitter implements IFilterCondition, IDestroyable {\n    private roomIds = new Set<string>();\n    private userIds = new Set<string>();\n    private showPeopleInSpace = true;\n    private space: SpaceKey = MetaSpace.Home;\n\n    public isVisible(room: Room): boolean {\n        return SpaceStore.instance.isRoomInSpace(this.space, room.roomId);\n    }\n\n    private onStoreUpdate = async (forceUpdate = false): Promise<void> => {\n        const beforeRoomIds = this.roomIds;\n        // clone the set as it may be mutated by the space store internally\n        this.roomIds = new Set(SpaceStore.instance.getSpaceFilteredRoomIds(this.space));\n\n        const beforeUserIds = this.userIds;\n        // clone the set as it may be mutated by the space store internally\n        this.userIds = new Set(SpaceStore.instance.getSpaceFilteredUserIds(this.space));\n\n        const beforeShowPeopleInSpace = this.showPeopleInSpace;\n        this.showPeopleInSpace = isMetaSpace(this.space[0]) ||\n            SettingsStore.getValue(\"Spaces.showPeopleInSpace\", this.space);\n\n        if (forceUpdate ||\n            beforeShowPeopleInSpace !== this.showPeopleInSpace ||\n            setHasDiff(beforeRoomIds, this.roomIds) ||\n            setHasDiff(beforeUserIds, this.userIds)\n        ) {\n            this.emit(FILTER_CHANGED);\n            // XXX: Room List Store has a bug where updates to the pre-filter during a local echo of a\n            // tags transition seem to be ignored, so refire in the next tick to work around it\n            setImmediate(() => {\n                this.emit(FILTER_CHANGED);\n            });\n        }\n    };\n\n    public updateSpace(space: SpaceKey) {\n        SpaceStore.instance.off(this.space, this.onStoreUpdate);\n        SpaceStore.instance.on(this.space = space, this.onStoreUpdate);\n        this.onStoreUpdate(true); // initial update from the change to the space\n    }\n\n    public destroy(): void {\n        SpaceStore.instance.off(this.space, this.onStoreUpdate);\n    }\n}\n"],"mappings":";;;;;;;;;;;AAgBA;;AAGA;;AAEA;;AACA;;AACA;;AACA;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,oBAAN,SAAmCC,oBAAnC,CAA0F;EAAA;IAAA;;IAAA;IAAA;IAAA,+CAC3E,IAAIC,GAAJ,EAD2E;IAAA,+CAE3E,IAAIA,GAAJ,EAF2E;IAAA,yDAGjE,IAHiE;IAAA,6CAInEC,iBAAA,CAAUC,IAJyD;IAAA,qDAUrE,kBAA8C;MAAA,IAAvCC,WAAuC,uEAAzB,KAAyB;MAClE,MAAMC,aAAa,GAAG,KAAI,CAACC,OAA3B,CADkE,CAElE;;MACA,KAAI,CAACA,OAAL,GAAe,IAAIL,GAAJ,CAAQM,mBAAA,CAAWC,QAAX,CAAoBC,uBAApB,CAA4C,KAAI,CAACC,KAAjD,CAAR,CAAf;MAEA,MAAMC,aAAa,GAAG,KAAI,CAACC,OAA3B,CALkE,CAMlE;;MACA,KAAI,CAACA,OAAL,GAAe,IAAIX,GAAJ,CAAQM,mBAAA,CAAWC,QAAX,CAAoBK,uBAApB,CAA4C,KAAI,CAACH,KAAjD,CAAR,CAAf;MAEA,MAAMI,uBAAuB,GAAG,KAAI,CAACC,iBAArC;MACA,KAAI,CAACA,iBAAL,GAAyB,IAAAC,mBAAA,EAAY,KAAI,CAACN,KAAL,CAAW,CAAX,CAAZ,KACrBO,sBAAA,CAAcC,QAAd,CAAuB,0BAAvB,EAAmD,KAAI,CAACR,KAAxD,CADJ;;MAGA,IAAIN,WAAW,IACXU,uBAAuB,KAAK,KAAI,CAACC,iBADjC,IAEA,IAAAI,gBAAA,EAAWd,aAAX,EAA0B,KAAI,CAACC,OAA/B,CAFA,IAGA,IAAAa,gBAAA,EAAWR,aAAX,EAA0B,KAAI,CAACC,OAA/B,CAHJ,EAIE;QACE,KAAI,CAACQ,IAAL,CAAUC,gCAAV,EADF,CAEE;QACA;;;QACAC,YAAY,CAAC,MAAM;UACf,KAAI,CAACF,IAAL,CAAUC,gCAAV;QACH,CAFW,CAAZ;MAGH;IACJ,CAnC4F;EAAA;;EAMtFE,SAAS,CAACC,IAAD,EAAsB;IAClC,OAAOjB,mBAAA,CAAWC,QAAX,CAAoBiB,aAApB,CAAkC,KAAKf,KAAvC,EAA8Cc,IAAI,CAACE,MAAnD,CAAP;EACH;;EA6BMC,WAAW,CAACjB,KAAD,EAAkB;IAChCH,mBAAA,CAAWC,QAAX,CAAoBoB,GAApB,CAAwB,KAAKlB,KAA7B,EAAoC,KAAKmB,aAAzC;;IACAtB,mBAAA,CAAWC,QAAX,CAAoBsB,EAApB,CAAuB,KAAKpB,KAAL,GAAaA,KAApC,EAA2C,KAAKmB,aAAhD;;IACA,KAAKA,aAAL,CAAmB,IAAnB,EAHgC,CAGN;EAC7B;;EAEME,OAAO,GAAS;IACnBxB,mBAAA,CAAWC,QAAX,CAAoBoB,GAApB,CAAwB,KAAKlB,KAA7B,EAAoC,KAAKmB,aAAzC;EACH;;AA7C4F"}