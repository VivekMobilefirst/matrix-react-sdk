{"version":3,"file":"ThreadsRoomNotificationState.js","names":["ThreadsRoomNotificationState","NotificationState","constructor","room","Map","NotificationColor","None","thread","notificationState","ThreadNotificationState","threadsState","set","on","NotificationStateEvents","Update","onThreadUpdate","color","Red","Grey","updateNotificationState","getThreads","onNewThread","ThreadEvent","New","destroy","off","getThreadRoomState","has","get","snapshot","_color","emitIfUpdated"],"sources":["../../../src/stores/notifications/ThreadsRoomNotificationState.ts"],"sourcesContent":["/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { Thread, ThreadEvent } from \"matrix-js-sdk/src/models/thread\";\n\nimport { IDestroyable } from \"../../utils/IDestroyable\";\nimport { NotificationState, NotificationStateEvents } from \"./NotificationState\";\nimport { ThreadNotificationState } from \"./ThreadNotificationState\";\nimport { NotificationColor } from \"./NotificationColor\";\n\nexport class ThreadsRoomNotificationState extends NotificationState implements IDestroyable {\n    public readonly threadsState = new Map<Thread, ThreadNotificationState>();\n\n    protected _symbol = null;\n    protected _count = 0;\n    protected _color = NotificationColor.None;\n\n    constructor(public readonly room: Room) {\n        super();\n        for (const thread of this.room.getThreads()) {\n            this.onNewThread(thread);\n        }\n        this.room.on(ThreadEvent.New, this.onNewThread);\n    }\n\n    public destroy(): void {\n        super.destroy();\n        this.room.off(ThreadEvent.New, this.onNewThread);\n        for (const [, notificationState] of this.threadsState) {\n            notificationState.off(NotificationStateEvents.Update, this.onThreadUpdate);\n        }\n    }\n\n    public getThreadRoomState(thread: Thread): ThreadNotificationState {\n        if (!this.threadsState.has(thread)) {\n            this.threadsState.set(thread, new ThreadNotificationState(thread));\n        }\n        return this.threadsState.get(thread);\n    }\n\n    private onNewThread = (thread: Thread): void => {\n        const notificationState = new ThreadNotificationState(thread);\n        this.threadsState.set(\n            thread,\n            notificationState,\n        );\n        notificationState.on(NotificationStateEvents.Update, this.onThreadUpdate);\n    };\n\n    private onThreadUpdate = (): void => {\n        let color = NotificationColor.None;\n        for (const [, notificationState] of this.threadsState) {\n            if (notificationState.color === NotificationColor.Red) {\n                color = NotificationColor.Red;\n                break;\n            } else if (notificationState.color === NotificationColor.Grey) {\n                color = NotificationColor.Grey;\n            }\n        }\n        this.updateNotificationState(color);\n    };\n\n    private updateNotificationState(color: NotificationColor): void {\n        const snapshot = this.snapshot();\n        this._color = color;\n        // finally, publish an update if needed\n        this.emitIfUpdated(snapshot);\n    }\n}\n"],"mappings":";;;;;;;;;;;AAiBA;;AAGA;;AACA;;AACA;;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUO,MAAMA,4BAAN,SAA2CC,oCAA3C,CAAqF;EAOxFC,WAAW,CAAiBC,IAAjB,EAA6B;IACpC;IADoC,KAAZA,IAAY,GAAZA,IAAY;IAAA,oDANT,IAAIC,GAAJ,EAMS;IAAA,+CAJpB,IAIoB;IAAA,8CAHrB,CAGqB;IAAA,8CAFrBC,oCAAA,CAAkBC,IAEG;IAAA,mDAuBjBC,MAAD,IAA0B;MAC5C,MAAMC,iBAAiB,GAAG,IAAIC,gDAAJ,CAA4BF,MAA5B,CAA1B;MACA,KAAKG,YAAL,CAAkBC,GAAlB,CACIJ,MADJ,EAEIC,iBAFJ;MAIAA,iBAAiB,CAACI,EAAlB,CAAqBC,0CAAA,CAAwBC,MAA7C,EAAqD,KAAKC,cAA1D;IACH,CA9BuC;IAAA,sDAgCf,MAAY;MACjC,IAAIC,KAAK,GAAGX,oCAAA,CAAkBC,IAA9B;;MACA,KAAK,MAAM,GAAGE,iBAAH,CAAX,IAAoC,KAAKE,YAAzC,EAAuD;QACnD,IAAIF,iBAAiB,CAACQ,KAAlB,KAA4BX,oCAAA,CAAkBY,GAAlD,EAAuD;UACnDD,KAAK,GAAGX,oCAAA,CAAkBY,GAA1B;UACA;QACH,CAHD,MAGO,IAAIT,iBAAiB,CAACQ,KAAlB,KAA4BX,oCAAA,CAAkBa,IAAlD,EAAwD;UAC3DF,KAAK,GAAGX,oCAAA,CAAkBa,IAA1B;QACH;MACJ;;MACD,KAAKC,uBAAL,CAA6BH,KAA7B;IACH,CA3CuC;;IAEpC,KAAK,MAAMT,MAAX,IAAqB,KAAKJ,IAAL,CAAUiB,UAAV,EAArB,EAA6C;MACzC,KAAKC,WAAL,CAAiBd,MAAjB;IACH;;IACD,KAAKJ,IAAL,CAAUS,EAAV,CAAaU,mBAAA,CAAYC,GAAzB,EAA8B,KAAKF,WAAnC;EACH;;EAEMG,OAAO,GAAS;IACnB,MAAMA,OAAN;IACA,KAAKrB,IAAL,CAAUsB,GAAV,CAAcH,mBAAA,CAAYC,GAA1B,EAA+B,KAAKF,WAApC;;IACA,KAAK,MAAM,GAAGb,iBAAH,CAAX,IAAoC,KAAKE,YAAzC,EAAuD;MACnDF,iBAAiB,CAACiB,GAAlB,CAAsBZ,0CAAA,CAAwBC,MAA9C,EAAsD,KAAKC,cAA3D;IACH;EACJ;;EAEMW,kBAAkB,CAACnB,MAAD,EAA0C;IAC/D,IAAI,CAAC,KAAKG,YAAL,CAAkBiB,GAAlB,CAAsBpB,MAAtB,CAAL,EAAoC;MAChC,KAAKG,YAAL,CAAkBC,GAAlB,CAAsBJ,MAAtB,EAA8B,IAAIE,gDAAJ,CAA4BF,MAA5B,CAA9B;IACH;;IACD,OAAO,KAAKG,YAAL,CAAkBkB,GAAlB,CAAsBrB,MAAtB,CAAP;EACH;;EAwBOY,uBAAuB,CAACH,KAAD,EAAiC;IAC5D,MAAMa,QAAQ,GAAG,KAAKA,QAAL,EAAjB;IACA,KAAKC,MAAL,GAAcd,KAAd,CAF4D,CAG5D;;IACA,KAAKe,aAAL,CAAmBF,QAAnB;EACH;;AAzDuF"}