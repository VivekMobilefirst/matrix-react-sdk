{"version":3,"file":"ModalWidgetStore.js","names":["ModalWidgetStore","AsyncStoreWithClient","constructor","defaultDispatcher","modalInstance","requestData","sourceWidget","widgetRoomId","openSourceWidgetId","id","openSourceWidgetRoomId","Modal","createDialog","ModalWidgetDialog","widgetDefinition","sourceWidgetId","onFinished","success","data","closeModalWidget","close","sourceMessaging","WidgetMessagingStore","instance","getMessaging","logger","error","notifyModalWidgetClose","internalInstance","onAction","payload","window","mxModalWidgetStore"],"sources":["../../src/stores/ModalWidgetStore.ts"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IModalWidgetOpenRequestData, IModalWidgetReturnData, Widget } from \"matrix-widget-api\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\nimport { ActionPayload } from \"../dispatcher/payloads\";\nimport Modal, { IHandle, IModal } from \"../Modal\";\nimport ModalWidgetDialog from \"../components/views/dialogs/ModalWidgetDialog\";\nimport { WidgetMessagingStore } from \"./widgets/WidgetMessagingStore\";\n\ninterface IState {\n    modal?: IModal<any>;\n    openedFromId?: string;\n}\n\nexport class ModalWidgetStore extends AsyncStoreWithClient<IState> {\n    private static internalInstance = new ModalWidgetStore();\n    private modalInstance: IHandle<void[]> = null;\n    private openSourceWidgetId: string = null;\n    private openSourceWidgetRoomId: string = null;\n\n    private constructor() {\n        super(defaultDispatcher, {});\n    }\n\n    public static get instance(): ModalWidgetStore {\n        return ModalWidgetStore.internalInstance;\n    }\n\n    protected async onAction(payload: ActionPayload): Promise<any> {\n        // nothing\n    }\n\n    public canOpenModalWidget = () => {\n        return !this.modalInstance;\n    };\n\n    public openModalWidget = (\n        requestData: IModalWidgetOpenRequestData,\n        sourceWidget: Widget,\n        widgetRoomId?: string,\n    ) => {\n        if (this.modalInstance) return;\n        this.openSourceWidgetId = sourceWidget.id;\n        this.openSourceWidgetRoomId = widgetRoomId;\n        this.modalInstance = Modal.createDialog(ModalWidgetDialog, {\n            widgetDefinition: { ...requestData },\n            widgetRoomId,\n            sourceWidgetId: sourceWidget.id,\n            onFinished: (success: boolean, data?: IModalWidgetReturnData) => {\n                if (!success) {\n                    this.closeModalWidget(sourceWidget, widgetRoomId, { \"m.exited\": true });\n                } else {\n                    this.closeModalWidget(sourceWidget, widgetRoomId, data);\n                }\n\n                this.openSourceWidgetId = null;\n                this.openSourceWidgetRoomId = null;\n                this.modalInstance = null;\n            },\n        }, null, /* priority = */ false, /* static = */ true);\n    };\n\n    public closeModalWidget = (\n        sourceWidget: Widget,\n        widgetRoomId?: string,\n        data?: IModalWidgetReturnData,\n    ) => {\n        if (!this.modalInstance) return;\n        if (this.openSourceWidgetId === sourceWidget.id && this.openSourceWidgetRoomId === widgetRoomId) {\n            this.openSourceWidgetId = null;\n            this.openSourceWidgetRoomId = null;\n            this.modalInstance.close();\n            this.modalInstance = null;\n\n            const sourceMessaging = WidgetMessagingStore.instance.getMessaging(sourceWidget, widgetRoomId);\n            if (!sourceMessaging) {\n                logger.error(\"No source widget messaging for modal widget\");\n                return;\n            }\n            sourceMessaging.notifyModalWidgetClose(data);\n        }\n    };\n}\n\nwindow.mxModalWidgetStore = ModalWidgetStore.instance;\n"],"mappings":";;;;;;;;;;;AAiBA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAOO,MAAMA,gBAAN,SAA+BC,0CAA/B,CAA4D;EAMvDC,WAAW,GAAG;IAClB,MAAMC,mBAAN,EAAyB,EAAzB;IADkB,qDAJmB,IAInB;IAAA,0DAHe,IAGf;IAAA,8DAFmB,IAEnB;IAAA,0DAYM,MAAM;MAC9B,OAAO,CAAC,KAAKC,aAAb;IACH,CAdqB;IAAA,uDAgBG,CACrBC,WADqB,EAErBC,YAFqB,EAGrBC,YAHqB,KAIpB;MACD,IAAI,KAAKH,aAAT,EAAwB;MACxB,KAAKI,kBAAL,GAA0BF,YAAY,CAACG,EAAvC;MACA,KAAKC,sBAAL,GAA8BH,YAA9B;MACA,KAAKH,aAAL,GAAqBO,cAAA,CAAMC,YAAN,CAAmBC,0BAAnB,EAAsC;QACvDC,gBAAgB,oBAAOT,WAAP,CADuC;QAEvDE,YAFuD;QAGvDQ,cAAc,EAAET,YAAY,CAACG,EAH0B;QAIvDO,UAAU,EAAE,CAACC,OAAD,EAAmBC,IAAnB,KAAqD;UAC7D,IAAI,CAACD,OAAL,EAAc;YACV,KAAKE,gBAAL,CAAsBb,YAAtB,EAAoCC,YAApC,EAAkD;cAAE,YAAY;YAAd,CAAlD;UACH,CAFD,MAEO;YACH,KAAKY,gBAAL,CAAsBb,YAAtB,EAAoCC,YAApC,EAAkDW,IAAlD;UACH;;UAED,KAAKV,kBAAL,GAA0B,IAA1B;UACA,KAAKE,sBAAL,GAA8B,IAA9B;UACA,KAAKN,aAAL,GAAqB,IAArB;QACH;MAdsD,CAAtC,EAelB,IAfkB;MAeZ;MAAiB,KAfL;MAeY;MAAe,IAf3B,CAArB;IAgBH,CAxCqB;IAAA,wDA0CI,CACtBE,YADsB,EAEtBC,YAFsB,EAGtBW,IAHsB,KAIrB;MACD,IAAI,CAAC,KAAKd,aAAV,EAAyB;;MACzB,IAAI,KAAKI,kBAAL,KAA4BF,YAAY,CAACG,EAAzC,IAA+C,KAAKC,sBAAL,KAAgCH,YAAnF,EAAiG;QAC7F,KAAKC,kBAAL,GAA0B,IAA1B;QACA,KAAKE,sBAAL,GAA8B,IAA9B;QACA,KAAKN,aAAL,CAAmBgB,KAAnB;QACA,KAAKhB,aAAL,GAAqB,IAArB;;QAEA,MAAMiB,eAAe,GAAGC,0CAAA,CAAqBC,QAArB,CAA8BC,YAA9B,CAA2ClB,YAA3C,EAAyDC,YAAzD,CAAxB;;QACA,IAAI,CAACc,eAAL,EAAsB;UAClBI,cAAA,CAAOC,KAAP,CAAa,6CAAb;;UACA;QACH;;QACDL,eAAe,CAACM,sBAAhB,CAAuCT,IAAvC;MACH;IACJ,CA7DqB;EAErB;;EAEyB,WAARK,QAAQ,GAAqB;IAC3C,OAAOvB,gBAAgB,CAAC4B,gBAAxB;EACH;;EAEuB,MAARC,QAAQ,CAACC,OAAD,EAAuC,CAC3D;EACH;;AAhB8D;;;8BAAtD9B,gB,sBACyB,IAAIA,gBAAJ,E;AAqEtC+B,MAAM,CAACC,kBAAP,GAA4BhC,gBAAgB,CAACuB,QAA7C"}