{"version":3,"file":"BreadcrumbsStore.js","names":["MAX_ROOMS","AUTOJOIN_WAIT_THRESHOLD_MS","BreadcrumbsStore","AsyncStoreWithClient","constructor","defaultDispatcher","room","settingValueRaw","SettingsStore","getValue","meetsRoomRequirement","isNullOrUndefined","setValue","SettingLevel","ACCOUNT","waitingRoom","waitingRooms","find","r","roomId","splice","indexOf","Date","now","addedTs","appendRoom","monitorSetting","instance","internalInstance","rooms","state","visible","enabled","matrixClient","getVisibleRooms","length","onAction","payload","action","Action","SettingUpdated","settingName","updateRooms","updateState","ViewRoom","auto_join","getRoom","room_id","push","membership","getMyMembership","JoinRoom","onReady","on","RoomEvent","MyMembership","onMyMembership","ClientEvent","Room","onRoom","onNotReady","removeListener","roomIds","map","filter","currentRooms","arrayHasDiff","updated","slice","history","getRoomUpgradeHistory","i","idx","findIndex","existingIdx"],"sources":["../../src/stores/BreadcrumbsStore.ts"],"sourcesContent":["/*\nCopyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Room, RoomEvent } from \"matrix-js-sdk/src/models/room\";\nimport { isNullOrUndefined } from \"matrix-js-sdk/src/utils\";\nimport { ClientEvent } from \"matrix-js-sdk/src/client\";\n\nimport SettingsStore from \"../settings/SettingsStore\";\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\nimport { arrayHasDiff } from \"../utils/arrays\";\nimport { SettingLevel } from \"../settings/SettingLevel\";\nimport { Action } from \"../dispatcher/actions\";\nimport { SettingUpdatedPayload } from \"../dispatcher/payloads/SettingUpdatedPayload\";\nimport { ViewRoomPayload } from \"../dispatcher/payloads/ViewRoomPayload\";\nimport { JoinRoomPayload } from \"../dispatcher/payloads/JoinRoomPayload\";\n\nconst MAX_ROOMS = 20; // arbitrary\nconst AUTOJOIN_WAIT_THRESHOLD_MS = 90000; // 90s, the time we wait for an autojoined room to show up\n\ninterface IState {\n    enabled?: boolean;\n    rooms?: Room[];\n}\n\nexport class BreadcrumbsStore extends AsyncStoreWithClient<IState> {\n    private static internalInstance = new BreadcrumbsStore();\n\n    private waitingRooms: { roomId: string, addedTs: number }[] = [];\n\n    private constructor() {\n        super(defaultDispatcher);\n\n        SettingsStore.monitorSetting(\"breadcrumb_rooms\", null);\n        SettingsStore.monitorSetting(\"breadcrumbs\", null);\n        SettingsStore.monitorSetting(\"feature_breadcrumbs_v2\", null);\n    }\n\n    public static get instance(): BreadcrumbsStore {\n        return BreadcrumbsStore.internalInstance;\n    }\n\n    public get rooms(): Room[] {\n        return this.state.rooms || [];\n    }\n\n    public get visible(): boolean {\n        return this.state.enabled && this.meetsRoomRequirement;\n    }\n\n    public get meetsRoomRequirement(): boolean {\n        if (SettingsStore.getValue(\"feature_breadcrumbs_v2\")) return true;\n        return this.matrixClient?.getVisibleRooms().length >= 20;\n    }\n\n    protected async onAction(payload: SettingUpdatedPayload | ViewRoomPayload | JoinRoomPayload) {\n        if (!this.matrixClient) return;\n        if (payload.action === Action.SettingUpdated) {\n            if (payload.settingName === 'breadcrumb_rooms') {\n                await this.updateRooms();\n            } else if (payload.settingName === 'breadcrumbs' ||\n                payload.settingName === 'feature_breadcrumbs_v2'\n            ) {\n                await this.updateState({ enabled: SettingsStore.getValue(\"breadcrumbs\", null) });\n            }\n        } else if (payload.action === Action.ViewRoom) {\n            if (payload.auto_join && !this.matrixClient.getRoom(payload.room_id)) {\n                // Queue the room instead of pushing it immediately. We're probably just\n                // waiting for a room join to complete.\n                this.waitingRooms.push({ roomId: payload.room_id, addedTs: Date.now() });\n            } else {\n                // The tests might not result in a valid room object.\n                const room = this.matrixClient.getRoom(payload.room_id);\n                const membership = room?.getMyMembership();\n                if (room && membership===\"join\") await this.appendRoom(room);\n            }\n        } else if (payload.action === Action.JoinRoom) {\n            const room = this.matrixClient.getRoom(payload.roomId);\n            if (room) await this.appendRoom(room);\n        }\n    }\n\n    protected async onReady() {\n        await this.updateRooms();\n        await this.updateState({ enabled: SettingsStore.getValue(\"breadcrumbs\", null) });\n\n        this.matrixClient.on(RoomEvent.MyMembership, this.onMyMembership);\n        this.matrixClient.on(ClientEvent.Room, this.onRoom);\n    }\n\n    protected async onNotReady() {\n        this.matrixClient.removeListener(RoomEvent.MyMembership, this.onMyMembership);\n        this.matrixClient.removeListener(ClientEvent.Room, this.onRoom);\n    }\n\n    private onMyMembership = async (room: Room) => {\n        // Only turn on breadcrumbs is the user hasn't explicitly turned it off again.\n        const settingValueRaw = SettingsStore.getValue(\"breadcrumbs\", null, /*excludeDefault=*/true);\n        if (this.meetsRoomRequirement && isNullOrUndefined(settingValueRaw)) {\n            await SettingsStore.setValue(\"breadcrumbs\", null, SettingLevel.ACCOUNT, true);\n        }\n    };\n\n    private onRoom = async (room: Room) => {\n        const waitingRoom = this.waitingRooms.find(r => r.roomId === room.roomId);\n        if (!waitingRoom) return;\n        this.waitingRooms.splice(this.waitingRooms.indexOf(waitingRoom), 1);\n\n        if ((Date.now() - waitingRoom.addedTs) > AUTOJOIN_WAIT_THRESHOLD_MS) return; // Too long ago.\n        await this.appendRoom(room);\n    };\n\n    private async updateRooms() {\n        let roomIds = SettingsStore.getValue(\"breadcrumb_rooms\");\n        if (!roomIds || roomIds.length === 0) roomIds = [];\n\n        const rooms = roomIds.map(r => this.matrixClient.getRoom(r)).filter(r => !!r);\n        const currentRooms = this.state.rooms || [];\n        if (!arrayHasDiff(rooms, currentRooms)) return; // no change (probably echo)\n        await this.updateState({ rooms });\n    }\n\n    private async appendRoom(room: Room) {\n        let updated = false;\n        const rooms = (this.state.rooms || []).slice(); // cheap clone\n\n        // If the room is upgraded, use that room instead. We'll also splice out\n        // any children of the room.\n        const history = this.matrixClient.getRoomUpgradeHistory(room.roomId);\n        if (history.length > 1) {\n            room = history[history.length - 1]; // Last room is most recent in history\n\n            // Take out any room that isn't the most recent room\n            for (let i = 0; i < history.length - 1; i++) {\n                const idx = rooms.findIndex(r => r.roomId === history[i].roomId);\n                if (idx !== -1) {\n                    rooms.splice(idx, 1);\n                    updated = true;\n                }\n            }\n        }\n\n        // Remove the existing room, if it is present\n        const existingIdx = rooms.findIndex(r => r.roomId === room.roomId);\n\n        // If we're focusing on the first room no-op\n        if (existingIdx !== 0) {\n            if (existingIdx !== -1) {\n                rooms.splice(existingIdx, 1);\n            }\n\n            // Splice the room to the start of the list\n            rooms.splice(0, 0, room);\n            updated = true;\n        }\n\n        if (rooms.length > MAX_ROOMS) {\n            // This looks weird, but it's saying to start at the MAX_ROOMS point in the\n            // list and delete everything after it.\n            rooms.splice(MAX_ROOMS, rooms.length - MAX_ROOMS);\n            updated = true;\n        }\n\n        if (updated) {\n            // Update the breadcrumbs\n            await this.updateState({ rooms });\n            const roomIds = rooms.map(r => r.roomId);\n            if (roomIds.length > 0) {\n                await SettingsStore.setValue(\"breadcrumb_rooms\", null, SettingLevel.ACCOUNT, roomIds);\n            }\n        }\n    }\n}\n"],"mappings":"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"}