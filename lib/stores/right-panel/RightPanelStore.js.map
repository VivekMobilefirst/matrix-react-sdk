{"version":3,"file":"RightPanelStore.js","names":["RightPanelStore","ReadyWatchingStore","constructor","defaultDispatcher","currentCard","state","member","pendingRequest","pendingVerificationRequestForUser","verificationRequest","emitAndUpdateSettings","reset","global","byRoom","viewedRoomId","onReady","RoomViewStore","instance","getRoomId","matrixClient","on","CryptoEvent","VerificationRequest","onVerificationRequestUpdate","loadCacheFromSettings","onNotReady","off","onDispatcherAction","payload","action","Action","ActiveRoomChanged","changePayload","handleViewedRoomChange","oldRoomId","newRoomId","isOpen","isOpenForRoom","roomId","roomPhaseHistory","history","hist","length","phase","currentCardForRoom","previousCard","setCard","card","allowClose","rId","redirect","getVerificationRedirect","targetPhase","cardState","Object","keys","isPhaseValid","Boolean","show","setCards","cards","map","c","pushCard","pState","roomCache","push","popCard","removedCard","pop","togglePanel","hide","room","mxClient","getRoom","convertToStatePanel","SettingsStore","getValue","logger","warn","filterValidCards","storePanelGlobal","convertToStorePanel","setValue","SettingLevel","DEVICE","panelThisRoom","storePanelThisRoom","ROOM_DEVICE","emit","UPDATE_EVENT","rightPanelForRoom","filter","isCardStateValid","RightPanelPhases","ThreadPanel","ThreadView","threadHeadEvent","RoomMemberInfo","SpaceMemberInfo","EncryptionPanel","Room3pidMemberInfo","Space3pidMemberInfo","memberInfoEvent","Widget","widgetId","isViewingRoom","panel","RoomMemberList","isSpaceRoom","unshift","RoomSummary","internalInstance","window","mxRightPanelStore"],"sources":["../../../src/stores/right-panel/RightPanelStore.ts"],"sourcesContent":["/*\nCopyright 2019-2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { CryptoEvent } from \"matrix-js-sdk/src/crypto\";\nimport { Optional } from \"matrix-events-sdk\";\n\nimport defaultDispatcher from '../../dispatcher/dispatcher';\nimport { pendingVerificationRequestForUser } from '../../verification';\nimport SettingsStore from \"../../settings/SettingsStore\";\nimport { RightPanelPhases } from \"./RightPanelStorePhases\";\nimport { SettingLevel } from \"../../settings/SettingLevel\";\nimport { UPDATE_EVENT } from '../AsyncStore';\nimport { ReadyWatchingStore } from '../ReadyWatchingStore';\nimport {\n    convertToStatePanel,\n    convertToStorePanel,\n    IRightPanelCard,\n    IRightPanelForRoom,\n} from './RightPanelStoreIPanelState';\nimport { ActionPayload } from \"../../dispatcher/payloads\";\nimport { Action } from \"../../dispatcher/actions\";\nimport { ActiveRoomChangedPayload } from \"../../dispatcher/payloads/ActiveRoomChangedPayload\";\nimport { RoomViewStore } from \"../RoomViewStore\";\n\n/**\n * A class for tracking the state of the right panel between layouts and\n * sessions. This state includes a history for each room. Each history element\n * contains the phase (e.g. RightPanelPhase.RoomMemberInfo) and the state (e.g.\n * the member) associated with it.\n*/\nexport default class RightPanelStore extends ReadyWatchingStore {\n    private static internalInstance: RightPanelStore;\n\n    private global?: IRightPanelForRoom;\n    private byRoom: { [roomId: string]: IRightPanelForRoom };\n    private viewedRoomId: Optional<string>;\n\n    private constructor() {\n        super(defaultDispatcher);\n        this.reset();\n    }\n\n    /**\n     * Resets the store. Intended for test usage only.\n     */\n    public reset() {\n        this.global = null;\n        this.byRoom = {};\n        this.viewedRoomId = null;\n    }\n\n    protected async onReady(): Promise<any> {\n        this.viewedRoomId = RoomViewStore.instance.getRoomId();\n        this.matrixClient.on(CryptoEvent.VerificationRequest, this.onVerificationRequestUpdate);\n        this.loadCacheFromSettings();\n        this.emitAndUpdateSettings();\n    }\n\n    protected async onNotReady(): Promise<any> {\n        this.matrixClient.off(CryptoEvent.VerificationRequest, this.onVerificationRequestUpdate);\n    }\n\n    protected onDispatcherAction(payload: ActionPayload) {\n        if (payload.action !== Action.ActiveRoomChanged) return;\n\n        const changePayload = <ActiveRoomChangedPayload>payload;\n        this.handleViewedRoomChange(changePayload.oldRoomId, changePayload.newRoomId);\n    }\n\n    // Getters\n    /**\n     * If you are calling this from a component that already knows about a\n     * specific room from props / state, then it's best to prefer\n     * `isOpenForRoom` below to ensure all your data is for a single room\n     * during room changes.\n     */\n    public get isOpen(): boolean {\n        return this.byRoom[this.viewedRoomId]?.isOpen ?? false;\n    }\n\n    public isOpenForRoom(roomId: string): boolean {\n        return this.byRoom[roomId]?.isOpen ?? false;\n    }\n\n    public get roomPhaseHistory(): Array<IRightPanelCard> {\n        return this.byRoom[this.viewedRoomId]?.history ?? [];\n    }\n\n    /**\n     * If you are calling this from a component that already knows about a\n     * specific room from props / state, then it's best to prefer\n     * `currentCardForRoom` below to ensure all your data is for a single room\n     * during room changes.\n     */\n    public get currentCard(): IRightPanelCard {\n        const hist = this.roomPhaseHistory;\n        if (hist.length >= 1) {\n            return hist[hist.length - 1];\n        }\n        return { state: {}, phase: null };\n    }\n\n    public currentCardForRoom(roomId: string): IRightPanelCard {\n        const hist = this.byRoom[roomId]?.history ?? [];\n        if (hist.length > 0) {\n            return hist[hist.length - 1];\n        }\n        return { state: {}, phase: null };\n    }\n\n    public get previousCard(): IRightPanelCard {\n        const hist = this.roomPhaseHistory;\n        if (hist?.length >= 2) {\n            return hist[hist.length - 2];\n        }\n        return { state: {}, phase: null };\n    }\n\n    // Setters\n    public setCard(card: IRightPanelCard, allowClose = true, roomId?: string) {\n        const rId = roomId ?? this.viewedRoomId;\n        // This function behaves as following:\n        // Update state: if the same phase is send but with a state\n        // Set right panel and erase history: if a \"different to the current\" phase is send (with or without a state)\n        // If the right panel is set, this function also shows the right panel.\n        const redirect = this.getVerificationRedirect(card);\n        const targetPhase = redirect?.phase ?? card.phase;\n        const cardState = redirect?.state ?? (Object.keys(card.state ?? {}).length === 0 ? null : card.state);\n\n        // Checks for wrong SetRightPanelPhase requests\n        if (!this.isPhaseValid(targetPhase, Boolean(rId))) return;\n\n        if ((targetPhase === this.currentCardForRoom(rId)?.phase && !!cardState)) {\n            // Update state: set right panel with a new state but keep the phase (don't know it this is ever needed...)\n            const hist = this.byRoom[rId]?.history ?? [];\n            hist[hist.length - 1].state = cardState;\n            this.emitAndUpdateSettings();\n        } else if (targetPhase !== this.currentCardForRoom(rId)?.phase || !this.byRoom[rId]) {\n            // Set right panel and initialize/erase history\n            const history = [{ phase: targetPhase, state: cardState ?? {} }];\n            this.byRoom[rId] = { history, isOpen: true };\n            this.emitAndUpdateSettings();\n        } else {\n            this.show(rId);\n            this.emitAndUpdateSettings();\n        }\n    }\n\n    public setCards(cards: IRightPanelCard[], allowClose = true, roomId: string = null) {\n        // This function sets the history of the right panel and shows the right panel if not already visible.\n        const rId = roomId ?? this.viewedRoomId;\n        const history = cards.map(c => ({ phase: c.phase, state: c.state ?? {} }));\n        this.byRoom[rId] = { history, isOpen: true };\n        this.show(rId);\n        this.emitAndUpdateSettings();\n    }\n\n    // Appends a card to the history and shows the right panel if not already visible\n    public pushCard(\n        card: IRightPanelCard,\n        allowClose = true,\n        roomId: string = null,\n    ) {\n        const rId = roomId ?? this.viewedRoomId;\n        const redirect = this.getVerificationRedirect(card);\n        const targetPhase = redirect?.phase ?? card.phase;\n        const pState = redirect?.state ?? card.state ?? {};\n\n        // Checks for wrong SetRightPanelPhase requests\n        if (!this.isPhaseValid(targetPhase, Boolean(rId))) return;\n\n        const roomCache = this.byRoom[rId];\n        if (!!roomCache) {\n            // append new phase\n            roomCache.history.push({ state: pState, phase: targetPhase });\n            roomCache.isOpen = allowClose ? roomCache.isOpen : true;\n        } else {\n            // setup room panel cache with the new card\n            this.byRoom[rId] = {\n                history: [{ phase: targetPhase, state: pState }],\n                // if there was no right panel store object the the panel was closed -> keep it closed, except if allowClose==false\n                isOpen: !allowClose,\n            };\n        }\n        this.show(rId);\n        this.emitAndUpdateSettings();\n    }\n\n    public popCard(roomId: string = null) {\n        const rId = roomId ?? this.viewedRoomId;\n        if (!this.byRoom[rId]) return;\n\n        const removedCard = this.byRoom[rId].history.pop();\n        this.emitAndUpdateSettings();\n        return removedCard;\n    }\n\n    public togglePanel(roomId: string | null) {\n        const rId = roomId ?? this.viewedRoomId;\n        if (!this.byRoom[rId]) return;\n\n        this.byRoom[rId].isOpen = !this.byRoom[rId].isOpen;\n        this.emitAndUpdateSettings();\n    }\n\n    public show(roomId: string | null) {\n        if (!this.isOpenForRoom(roomId ?? this.viewedRoomId)) {\n            this.togglePanel(roomId);\n        }\n    }\n\n    public hide(roomId: string | null) {\n        if (this.isOpenForRoom(roomId ?? this.viewedRoomId)) {\n            this.togglePanel(roomId);\n        }\n    }\n\n    private loadCacheFromSettings() {\n        if (this.viewedRoomId) {\n            const room = this.mxClient?.getRoom(this.viewedRoomId);\n            if (!!room) {\n                this.global = this.global ??\n                    convertToStatePanel(SettingsStore.getValue(\"RightPanel.phasesGlobal\"), room);\n                this.byRoom[this.viewedRoomId] = this.byRoom[this.viewedRoomId] ??\n                    convertToStatePanel(SettingsStore.getValue(\"RightPanel.phases\", this.viewedRoomId), room);\n            } else {\n                logger.warn(\n                    \"Could not restore the right panel after load because there was no associated room object.\",\n                );\n            }\n        }\n    }\n\n    private emitAndUpdateSettings() {\n        this.filterValidCards(this.global);\n        const storePanelGlobal = convertToStorePanel(this.global);\n        SettingsStore.setValue(\"RightPanel.phasesGlobal\", null, SettingLevel.DEVICE, storePanelGlobal);\n\n        if (!!this.viewedRoomId) {\n            const panelThisRoom = this.byRoom[this.viewedRoomId];\n            this.filterValidCards(panelThisRoom);\n            const storePanelThisRoom = convertToStorePanel(panelThisRoom);\n            SettingsStore.setValue(\n                \"RightPanel.phases\",\n                this.viewedRoomId,\n                SettingLevel.ROOM_DEVICE,\n                storePanelThisRoom,\n            );\n        }\n        this.emit(UPDATE_EVENT, null);\n    }\n\n    private filterValidCards(rightPanelForRoom?: IRightPanelForRoom) {\n        if (!rightPanelForRoom?.history) return;\n        rightPanelForRoom.history = rightPanelForRoom.history.filter((card) => this.isCardStateValid(card));\n        if (!rightPanelForRoom.history.length) {\n            rightPanelForRoom.isOpen = false;\n        }\n    }\n\n    private isCardStateValid(card: IRightPanelCard) {\n        // this function does a sanity check on the card. this is required because\n        // some phases require specific state properties that might not be available.\n        // This can be caused on if element is reloaded and the tries to reload right panel data from id's stored in the local storage.\n        // we store id's of users and matrix events. If are not yet fetched on reload the right panel cannot display them.\n        // or potentially other errors.\n        // (A nicer fix could be to indicate, that the right panel is loading if there is missing state data and re-emit if the data is available)\n        switch (card.phase) {\n            case RightPanelPhases.ThreadPanel:\n                if (!SettingsStore.getValue(\"feature_thread\")) return false;\n                break;\n            case RightPanelPhases.ThreadView:\n                if (!SettingsStore.getValue(\"feature_thread\")) return false;\n                if (!card.state.threadHeadEvent) {\n                    logger.warn(\"removed card from right panel because of missing threadHeadEvent in card state\");\n                }\n                return !!card.state.threadHeadEvent;\n            case RightPanelPhases.RoomMemberInfo:\n            case RightPanelPhases.SpaceMemberInfo:\n            case RightPanelPhases.EncryptionPanel:\n                if (!card.state.member) {\n                    logger.warn(\"removed card from right panel because of missing member in card state\");\n                }\n                return !!card.state.member;\n            case RightPanelPhases.Room3pidMemberInfo:\n            case RightPanelPhases.Space3pidMemberInfo:\n                if (!card.state.memberInfoEvent) {\n                    logger.warn(\"removed card from right panel because of missing memberInfoEvent in card state\");\n                }\n                return !!card.state.memberInfoEvent;\n            case RightPanelPhases.Widget:\n                if (!card.state.widgetId) {\n                    logger.warn(\"removed card from right panel because of missing widgetId in card state\");\n                }\n                return !!card.state.widgetId;\n        }\n        return true;\n    }\n\n    private getVerificationRedirect(card: IRightPanelCard): IRightPanelCard {\n        if (card.phase === RightPanelPhases.RoomMemberInfo && card.state) {\n            // RightPanelPhases.RoomMemberInfo -> needs to be changed to RightPanelPhases.EncryptionPanel if there is a pending verification request\n            const { member } = card.state;\n            const pendingRequest = pendingVerificationRequestForUser(member);\n            if (pendingRequest) {\n                return {\n                    phase: RightPanelPhases.EncryptionPanel,\n                    state: {\n                        verificationRequest: pendingRequest,\n                        member,\n                    },\n                };\n            }\n        }\n        return null;\n    }\n\n    private isPhaseValid(targetPhase: RightPanelPhases, isViewingRoom: boolean): boolean {\n        if (!RightPanelPhases[targetPhase]) {\n            logger.warn(`Tried to switch right panel to unknown phase: ${targetPhase}`);\n            return false;\n        }\n        if (!isViewingRoom) {\n            logger.warn(\n                `Tried to switch right panel to a room phase: ${targetPhase}, ` +\n                `but we are currently not viewing a room`,\n            );\n            return false;\n        }\n        return true;\n    }\n\n    private onVerificationRequestUpdate = () => {\n        if (!this.currentCard?.state) return;\n        const { member } = this.currentCard.state;\n        if (!member) return;\n        const pendingRequest = pendingVerificationRequestForUser(member);\n        if (pendingRequest) {\n            this.currentCard.state.verificationRequest = pendingRequest;\n            this.emitAndUpdateSettings();\n        }\n    };\n\n    private handleViewedRoomChange(oldRoomId: Optional<string>, newRoomId: Optional<string>) {\n        if (!this.mxClient) return; // not ready, onReady will handle the first room\n        this.viewedRoomId = newRoomId;\n        // load values from byRoomCache with the viewedRoomId.\n        this.loadCacheFromSettings();\n\n        // when we're switching to a room, clear out any stale MemberInfo cards\n        // in order to fix https://github.com/vector-im/element-web/issues/21487\n        if (this.currentCard?.phase !== RightPanelPhases.EncryptionPanel) {\n            const panel = this.byRoom[this.viewedRoomId];\n            if (panel?.history) {\n                panel.history = panel.history.filter(\n                    (card) => card.phase != RightPanelPhases.RoomMemberInfo &&\n                        card.phase != RightPanelPhases.Room3pidMemberInfo,\n                );\n            }\n        }\n\n        // If the right panel stays open mode is used, and the panel was either\n        // closed or never shown for that room, then force it open and display\n        // the room member list.\n        if (\n            SettingsStore.getValue(\"feature_right_panel_default_open\") &&\n            !this.byRoom[this.viewedRoomId]?.isOpen\n        ) {\n            const history = [{ phase: RightPanelPhases.RoomMemberList }];\n            const room = this.viewedRoomId && this.mxClient?.getRoom(this.viewedRoomId);\n            if (!room?.isSpaceRoom()) {\n                history.unshift({ phase: RightPanelPhases.RoomSummary });\n            }\n            this.byRoom[this.viewedRoomId] = {\n                isOpen: true,\n                history,\n            };\n        }\n        this.emitAndUpdateSettings();\n    }\n\n    public static get instance(): RightPanelStore {\n        if (!RightPanelStore.internalInstance) {\n            RightPanelStore.internalInstance = new RightPanelStore();\n        }\n        return RightPanelStore.internalInstance;\n    }\n}\n\nwindow.mxRightPanelStore = RightPanelStore.instance;\n"],"mappings":";;;;;;;;;;;AAgBA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAOA;;AAEA;;AApCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,eAAN,SAA8BC,sCAA9B,CAAiD;EAOpDC,WAAW,GAAG;IAClB,MAAMC,mBAAN;IADkB;IAAA;IAAA;IAAA,mEAuSgB,MAAM;MACxC,IAAI,CAAC,KAAKC,WAAL,EAAkBC,KAAvB,EAA8B;MAC9B,MAAM;QAAEC;MAAF,IAAa,KAAKF,WAAL,CAAiBC,KAApC;MACA,IAAI,CAACC,MAAL,EAAa;MACb,MAAMC,cAAc,GAAG,IAAAC,+CAAA,EAAkCF,MAAlC,CAAvB;;MACA,IAAIC,cAAJ,EAAoB;QAChB,KAAKH,WAAL,CAAiBC,KAAjB,CAAuBI,mBAAvB,GAA6CF,cAA7C;QACA,KAAKG,qBAAL;MACH;IACJ,CAhTqB;IAElB,KAAKC,KAAL;EACH;EAED;AACJ;AACA;;;EACWA,KAAK,GAAG;IACX,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,YAAL,GAAoB,IAApB;EACH;;EAEsB,MAAPC,OAAO,GAAiB;IACpC,KAAKD,YAAL,GAAoBE,4BAAA,CAAcC,QAAd,CAAuBC,SAAvB,EAApB;IACA,KAAKC,YAAL,CAAkBC,EAAlB,CAAqBC,mBAAA,CAAYC,mBAAjC,EAAsD,KAAKC,2BAA3D;IACA,KAAKC,qBAAL;IACA,KAAKd,qBAAL;EACH;;EAEyB,MAAVe,UAAU,GAAiB;IACvC,KAAKN,YAAL,CAAkBO,GAAlB,CAAsBL,mBAAA,CAAYC,mBAAlC,EAAuD,KAAKC,2BAA5D;EACH;;EAESI,kBAAkB,CAACC,OAAD,EAAyB;IACjD,IAAIA,OAAO,CAACC,MAAR,KAAmBC,eAAA,CAAOC,iBAA9B,EAAiD;IAEjD,MAAMC,aAAa,GAA6BJ,OAAhD;IACA,KAAKK,sBAAL,CAA4BD,aAAa,CAACE,SAA1C,EAAqDF,aAAa,CAACG,SAAnE;EACH,CArC2D,CAuC5D;;EACA;AACJ;AACA;AACA;AACA;AACA;;;EACqB,IAANC,MAAM,GAAY;IACzB,OAAO,KAAKvB,MAAL,CAAY,KAAKC,YAAjB,GAAgCsB,MAAhC,IAA0C,KAAjD;EACH;;EAEMC,aAAa,CAACC,MAAD,EAA0B;IAC1C,OAAO,KAAKzB,MAAL,CAAYyB,MAAZ,GAAqBF,MAArB,IAA+B,KAAtC;EACH;;EAE0B,IAAhBG,gBAAgB,GAA2B;IAClD,OAAO,KAAK1B,MAAL,CAAY,KAAKC,YAAjB,GAAgC0B,OAAhC,IAA2C,EAAlD;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EAC0B,IAAXpC,WAAW,GAAoB;IACtC,MAAMqC,IAAI,GAAG,KAAKF,gBAAlB;;IACA,IAAIE,IAAI,CAACC,MAAL,IAAe,CAAnB,EAAsB;MAClB,OAAOD,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAX;IACH;;IACD,OAAO;MAAErC,KAAK,EAAE,EAAT;MAAasC,KAAK,EAAE;IAApB,CAAP;EACH;;EAEMC,kBAAkB,CAACN,MAAD,EAAkC;IACvD,MAAMG,IAAI,GAAG,KAAK5B,MAAL,CAAYyB,MAAZ,GAAqBE,OAArB,IAAgC,EAA7C;;IACA,IAAIC,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;MACjB,OAAOD,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAX;IACH;;IACD,OAAO;MAAErC,KAAK,EAAE,EAAT;MAAasC,KAAK,EAAE;IAApB,CAAP;EACH;;EAEsB,IAAZE,YAAY,GAAoB;IACvC,MAAMJ,IAAI,GAAG,KAAKF,gBAAlB;;IACA,IAAIE,IAAI,EAAEC,MAAN,IAAgB,CAApB,EAAuB;MACnB,OAAOD,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAX;IACH;;IACD,OAAO;MAAErC,KAAK,EAAE,EAAT;MAAasC,KAAK,EAAE;IAApB,CAAP;EACH,CAtF2D,CAwF5D;;;EACOG,OAAO,CAACC,IAAD,EAA4D;IAAA,IAApCC,UAAoC,uEAAvB,IAAuB;IAAA,IAAjBV,MAAiB;IACtE,MAAMW,GAAG,GAAGX,MAAM,IAAI,KAAKxB,YAA3B,CADsE,CAEtE;IACA;IACA;IACA;;IACA,MAAMoC,QAAQ,GAAG,KAAKC,uBAAL,CAA6BJ,IAA7B,CAAjB;IACA,MAAMK,WAAW,GAAGF,QAAQ,EAAEP,KAAV,IAAmBI,IAAI,CAACJ,KAA5C;IACA,MAAMU,SAAS,GAAGH,QAAQ,EAAE7C,KAAV,KAAoBiD,MAAM,CAACC,IAAP,CAAYR,IAAI,CAAC1C,KAAL,IAAc,EAA1B,EAA8BqC,MAA9B,KAAyC,CAAzC,GAA6C,IAA7C,GAAoDK,IAAI,CAAC1C,KAA7E,CAAlB,CARsE,CAUtE;;IACA,IAAI,CAAC,KAAKmD,YAAL,CAAkBJ,WAAlB,EAA+BK,OAAO,CAACR,GAAD,CAAtC,CAAL,EAAmD;;IAEnD,IAAKG,WAAW,KAAK,KAAKR,kBAAL,CAAwBK,GAAxB,GAA8BN,KAA9C,IAAuD,CAAC,CAACU,SAA9D,EAA0E;MACtE;MACA,MAAMZ,IAAI,GAAG,KAAK5B,MAAL,CAAYoC,GAAZ,GAAkBT,OAAlB,IAA6B,EAA1C;MACAC,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAJ,CAAsBrC,KAAtB,GAA8BgD,SAA9B;MACA,KAAK3C,qBAAL;IACH,CALD,MAKO,IAAI0C,WAAW,KAAK,KAAKR,kBAAL,CAAwBK,GAAxB,GAA8BN,KAA9C,IAAuD,CAAC,KAAK9B,MAAL,CAAYoC,GAAZ,CAA5D,EAA8E;MACjF;MACA,MAAMT,OAAO,GAAG,CAAC;QAAEG,KAAK,EAAES,WAAT;QAAsB/C,KAAK,EAAEgD,SAAS,IAAI;MAA1C,CAAD,CAAhB;MACA,KAAKxC,MAAL,CAAYoC,GAAZ,IAAmB;QAAET,OAAF;QAAWJ,MAAM,EAAE;MAAnB,CAAnB;MACA,KAAK1B,qBAAL;IACH,CALM,MAKA;MACH,KAAKgD,IAAL,CAAUT,GAAV;MACA,KAAKvC,qBAAL;IACH;EACJ;;EAEMiD,QAAQ,CAACC,KAAD,EAAqE;IAAA,IAA1CZ,UAA0C,uEAA7B,IAA6B;IAAA,IAAvBV,MAAuB,uEAAN,IAAM;IAChF;IACA,MAAMW,GAAG,GAAGX,MAAM,IAAI,KAAKxB,YAA3B;IACA,MAAM0B,OAAO,GAAGoB,KAAK,CAACC,GAAN,CAAUC,CAAC,KAAK;MAAEnB,KAAK,EAAEmB,CAAC,CAACnB,KAAX;MAAkBtC,KAAK,EAAEyD,CAAC,CAACzD,KAAF,IAAW;IAApC,CAAL,CAAX,CAAhB;IACA,KAAKQ,MAAL,CAAYoC,GAAZ,IAAmB;MAAET,OAAF;MAAWJ,MAAM,EAAE;IAAnB,CAAnB;IACA,KAAKsB,IAAL,CAAUT,GAAV;IACA,KAAKvC,qBAAL;EACH,CA7H2D,CA+H5D;;;EACOqD,QAAQ,CACXhB,IADW,EAIb;IAAA,IAFEC,UAEF,uEAFe,IAEf;IAAA,IADEV,MACF,uEADmB,IACnB;IACE,MAAMW,GAAG,GAAGX,MAAM,IAAI,KAAKxB,YAA3B;IACA,MAAMoC,QAAQ,GAAG,KAAKC,uBAAL,CAA6BJ,IAA7B,CAAjB;IACA,MAAMK,WAAW,GAAGF,QAAQ,EAAEP,KAAV,IAAmBI,IAAI,CAACJ,KAA5C;IACA,MAAMqB,MAAM,GAAGd,QAAQ,EAAE7C,KAAV,IAAmB0C,IAAI,CAAC1C,KAAxB,IAAiC,EAAhD,CAJF,CAME;;IACA,IAAI,CAAC,KAAKmD,YAAL,CAAkBJ,WAAlB,EAA+BK,OAAO,CAACR,GAAD,CAAtC,CAAL,EAAmD;IAEnD,MAAMgB,SAAS,GAAG,KAAKpD,MAAL,CAAYoC,GAAZ,CAAlB;;IACA,IAAI,CAAC,CAACgB,SAAN,EAAiB;MACb;MACAA,SAAS,CAACzB,OAAV,CAAkB0B,IAAlB,CAAuB;QAAE7D,KAAK,EAAE2D,MAAT;QAAiBrB,KAAK,EAAES;MAAxB,CAAvB;MACAa,SAAS,CAAC7B,MAAV,GAAmBY,UAAU,GAAGiB,SAAS,CAAC7B,MAAb,GAAsB,IAAnD;IACH,CAJD,MAIO;MACH;MACA,KAAKvB,MAAL,CAAYoC,GAAZ,IAAmB;QACfT,OAAO,EAAE,CAAC;UAAEG,KAAK,EAAES,WAAT;UAAsB/C,KAAK,EAAE2D;QAA7B,CAAD,CADM;QAEf;QACA5B,MAAM,EAAE,CAACY;MAHM,CAAnB;IAKH;;IACD,KAAKU,IAAL,CAAUT,GAAV;IACA,KAAKvC,qBAAL;EACH;;EAEMyD,OAAO,GAAwB;IAAA,IAAvB7B,MAAuB,uEAAN,IAAM;IAClC,MAAMW,GAAG,GAAGX,MAAM,IAAI,KAAKxB,YAA3B;IACA,IAAI,CAAC,KAAKD,MAAL,CAAYoC,GAAZ,CAAL,EAAuB;IAEvB,MAAMmB,WAAW,GAAG,KAAKvD,MAAL,CAAYoC,GAAZ,EAAiBT,OAAjB,CAAyB6B,GAAzB,EAApB;IACA,KAAK3D,qBAAL;IACA,OAAO0D,WAAP;EACH;;EAEME,WAAW,CAAChC,MAAD,EAAwB;IACtC,MAAMW,GAAG,GAAGX,MAAM,IAAI,KAAKxB,YAA3B;IACA,IAAI,CAAC,KAAKD,MAAL,CAAYoC,GAAZ,CAAL,EAAuB;IAEvB,KAAKpC,MAAL,CAAYoC,GAAZ,EAAiBb,MAAjB,GAA0B,CAAC,KAAKvB,MAAL,CAAYoC,GAAZ,EAAiBb,MAA5C;IACA,KAAK1B,qBAAL;EACH;;EAEMgD,IAAI,CAACpB,MAAD,EAAwB;IAC/B,IAAI,CAAC,KAAKD,aAAL,CAAmBC,MAAM,IAAI,KAAKxB,YAAlC,CAAL,EAAsD;MAClD,KAAKwD,WAAL,CAAiBhC,MAAjB;IACH;EACJ;;EAEMiC,IAAI,CAACjC,MAAD,EAAwB;IAC/B,IAAI,KAAKD,aAAL,CAAmBC,MAAM,IAAI,KAAKxB,YAAlC,CAAJ,EAAqD;MACjD,KAAKwD,WAAL,CAAiBhC,MAAjB;IACH;EACJ;;EAEOd,qBAAqB,GAAG;IAC5B,IAAI,KAAKV,YAAT,EAAuB;MACnB,MAAM0D,IAAI,GAAG,KAAKC,QAAL,EAAeC,OAAf,CAAuB,KAAK5D,YAA5B,CAAb;;MACA,IAAI,CAAC,CAAC0D,IAAN,EAAY;QACR,KAAK5D,MAAL,GAAc,KAAKA,MAAL,IACV,IAAA+D,+CAAA,EAAoBC,sBAAA,CAAcC,QAAd,CAAuB,yBAAvB,CAApB,EAAuEL,IAAvE,CADJ;QAEA,KAAK3D,MAAL,CAAY,KAAKC,YAAjB,IAAiC,KAAKD,MAAL,CAAY,KAAKC,YAAjB,KAC7B,IAAA6D,+CAAA,EAAoBC,sBAAA,CAAcC,QAAd,CAAuB,mBAAvB,EAA4C,KAAK/D,YAAjD,CAApB,EAAoF0D,IAApF,CADJ;MAEH,CALD,MAKO;QACHM,cAAA,CAAOC,IAAP,CACI,2FADJ;MAGH;IACJ;EACJ;;EAEOrE,qBAAqB,GAAG;IAC5B,KAAKsE,gBAAL,CAAsB,KAAKpE,MAA3B;IACA,MAAMqE,gBAAgB,GAAG,IAAAC,+CAAA,EAAoB,KAAKtE,MAAzB,CAAzB;;IACAgE,sBAAA,CAAcO,QAAd,CAAuB,yBAAvB,EAAkD,IAAlD,EAAwDC,0BAAA,CAAaC,MAArE,EAA6EJ,gBAA7E;;IAEA,IAAI,CAAC,CAAC,KAAKnE,YAAX,EAAyB;MACrB,MAAMwE,aAAa,GAAG,KAAKzE,MAAL,CAAY,KAAKC,YAAjB,CAAtB;MACA,KAAKkE,gBAAL,CAAsBM,aAAtB;MACA,MAAMC,kBAAkB,GAAG,IAAAL,+CAAA,EAAoBI,aAApB,CAA3B;;MACAV,sBAAA,CAAcO,QAAd,CACI,mBADJ,EAEI,KAAKrE,YAFT,EAGIsE,0BAAA,CAAaI,WAHjB,EAIID,kBAJJ;IAMH;;IACD,KAAKE,IAAL,CAAUC,wBAAV,EAAwB,IAAxB;EACH;;EAEOV,gBAAgB,CAACW,iBAAD,EAAyC;IAC7D,IAAI,CAACA,iBAAiB,EAAEnD,OAAxB,EAAiC;IACjCmD,iBAAiB,CAACnD,OAAlB,GAA4BmD,iBAAiB,CAACnD,OAAlB,CAA0BoD,MAA1B,CAAkC7C,IAAD,IAAU,KAAK8C,gBAAL,CAAsB9C,IAAtB,CAA3C,CAA5B;;IACA,IAAI,CAAC4C,iBAAiB,CAACnD,OAAlB,CAA0BE,MAA/B,EAAuC;MACnCiD,iBAAiB,CAACvD,MAAlB,GAA2B,KAA3B;IACH;EACJ;;EAEOyD,gBAAgB,CAAC9C,IAAD,EAAwB;IAC5C;IACA;IACA;IACA;IACA;IACA;IACA,QAAQA,IAAI,CAACJ,KAAb;MACI,KAAKmD,uCAAA,CAAiBC,WAAtB;QACI,IAAI,CAACnB,sBAAA,CAAcC,QAAd,CAAuB,gBAAvB,CAAL,EAA+C,OAAO,KAAP;QAC/C;;MACJ,KAAKiB,uCAAA,CAAiBE,UAAtB;QACI,IAAI,CAACpB,sBAAA,CAAcC,QAAd,CAAuB,gBAAvB,CAAL,EAA+C,OAAO,KAAP;;QAC/C,IAAI,CAAC9B,IAAI,CAAC1C,KAAL,CAAW4F,eAAhB,EAAiC;UAC7BnB,cAAA,CAAOC,IAAP,CAAY,gFAAZ;QACH;;QACD,OAAO,CAAC,CAAChC,IAAI,CAAC1C,KAAL,CAAW4F,eAApB;;MACJ,KAAKH,uCAAA,CAAiBI,cAAtB;MACA,KAAKJ,uCAAA,CAAiBK,eAAtB;MACA,KAAKL,uCAAA,CAAiBM,eAAtB;QACI,IAAI,CAACrD,IAAI,CAAC1C,KAAL,CAAWC,MAAhB,EAAwB;UACpBwE,cAAA,CAAOC,IAAP,CAAY,uEAAZ;QACH;;QACD,OAAO,CAAC,CAAChC,IAAI,CAAC1C,KAAL,CAAWC,MAApB;;MACJ,KAAKwF,uCAAA,CAAiBO,kBAAtB;MACA,KAAKP,uCAAA,CAAiBQ,mBAAtB;QACI,IAAI,CAACvD,IAAI,CAAC1C,KAAL,CAAWkG,eAAhB,EAAiC;UAC7BzB,cAAA,CAAOC,IAAP,CAAY,gFAAZ;QACH;;QACD,OAAO,CAAC,CAAChC,IAAI,CAAC1C,KAAL,CAAWkG,eAApB;;MACJ,KAAKT,uCAAA,CAAiBU,MAAtB;QACI,IAAI,CAACzD,IAAI,CAAC1C,KAAL,CAAWoG,QAAhB,EAA0B;UACtB3B,cAAA,CAAOC,IAAP,CAAY,yEAAZ;QACH;;QACD,OAAO,CAAC,CAAChC,IAAI,CAAC1C,KAAL,CAAWoG,QAApB;IA3BR;;IA6BA,OAAO,IAAP;EACH;;EAEOtD,uBAAuB,CAACJ,IAAD,EAAyC;IACpE,IAAIA,IAAI,CAACJ,KAAL,KAAemD,uCAAA,CAAiBI,cAAhC,IAAkDnD,IAAI,CAAC1C,KAA3D,EAAkE;MAC9D;MACA,MAAM;QAAEC;MAAF,IAAayC,IAAI,CAAC1C,KAAxB;MACA,MAAME,cAAc,GAAG,IAAAC,+CAAA,EAAkCF,MAAlC,CAAvB;;MACA,IAAIC,cAAJ,EAAoB;QAChB,OAAO;UACHoC,KAAK,EAAEmD,uCAAA,CAAiBM,eADrB;UAEH/F,KAAK,EAAE;YACHI,mBAAmB,EAAEF,cADlB;YAEHD;UAFG;QAFJ,CAAP;MAOH;IACJ;;IACD,OAAO,IAAP;EACH;;EAEOkD,YAAY,CAACJ,WAAD,EAAgCsD,aAAhC,EAAiE;IACjF,IAAI,CAACZ,uCAAA,CAAiB1C,WAAjB,CAAL,EAAoC;MAChC0B,cAAA,CAAOC,IAAP,CAAa,iDAAgD3B,WAAY,EAAzE;;MACA,OAAO,KAAP;IACH;;IACD,IAAI,CAACsD,aAAL,EAAoB;MAChB5B,cAAA,CAAOC,IAAP,CACK,gDAA+C3B,WAAY,IAA5D,GACC,yCAFL;;MAIA,OAAO,KAAP;IACH;;IACD,OAAO,IAAP;EACH;;EAaOnB,sBAAsB,CAACC,SAAD,EAA8BC,SAA9B,EAA2D;IACrF,IAAI,CAAC,KAAKsC,QAAV,EAAoB,OADiE,CACzD;;IAC5B,KAAK3D,YAAL,GAAoBqB,SAApB,CAFqF,CAGrF;;IACA,KAAKX,qBAAL,GAJqF,CAMrF;IACA;;IACA,IAAI,KAAKpB,WAAL,EAAkBuC,KAAlB,KAA4BmD,uCAAA,CAAiBM,eAAjD,EAAkE;MAC9D,MAAMO,KAAK,GAAG,KAAK9F,MAAL,CAAY,KAAKC,YAAjB,CAAd;;MACA,IAAI6F,KAAK,EAAEnE,OAAX,EAAoB;QAChBmE,KAAK,CAACnE,OAAN,GAAgBmE,KAAK,CAACnE,OAAN,CAAcoD,MAAd,CACX7C,IAAD,IAAUA,IAAI,CAACJ,KAAL,IAAcmD,uCAAA,CAAiBI,cAA/B,IACNnD,IAAI,CAACJ,KAAL,IAAcmD,uCAAA,CAAiBO,kBAFvB,CAAhB;MAIH;IACJ,CAhBoF,CAkBrF;IACA;IACA;;;IACA,IACIzB,sBAAA,CAAcC,QAAd,CAAuB,kCAAvB,KACA,CAAC,KAAKhE,MAAL,CAAY,KAAKC,YAAjB,GAAgCsB,MAFrC,EAGE;MACE,MAAMI,OAAO,GAAG,CAAC;QAAEG,KAAK,EAAEmD,uCAAA,CAAiBc;MAA1B,CAAD,CAAhB;MACA,MAAMpC,IAAI,GAAG,KAAK1D,YAAL,IAAqB,KAAK2D,QAAL,EAAeC,OAAf,CAAuB,KAAK5D,YAA5B,CAAlC;;MACA,IAAI,CAAC0D,IAAI,EAAEqC,WAAN,EAAL,EAA0B;QACtBrE,OAAO,CAACsE,OAAR,CAAgB;UAAEnE,KAAK,EAAEmD,uCAAA,CAAiBiB;QAA1B,CAAhB;MACH;;MACD,KAAKlG,MAAL,CAAY,KAAKC,YAAjB,IAAiC;QAC7BsB,MAAM,EAAE,IADqB;QAE7BI;MAF6B,CAAjC;IAIH;;IACD,KAAK9B,qBAAL;EACH;;EAEyB,WAARO,QAAQ,GAAoB;IAC1C,IAAI,CAACjB,eAAe,CAACgH,gBAArB,EAAuC;MACnChH,eAAe,CAACgH,gBAAhB,GAAmC,IAAIhH,eAAJ,EAAnC;IACH;;IACD,OAAOA,eAAe,CAACgH,gBAAvB;EACH;;AApW2D;;;8BAA3ChH,e;AAuWrBiH,MAAM,CAACC,iBAAP,GAA2BlH,eAAe,CAACiB,QAA3C"}