{"version":3,"file":"StopGapWidget.js","names":["ElementWidget","Widget","constructor","rawDefinition","templateUrl","WidgetType","JITSI","matches","type","WidgetUtils","getLocalJitsiWrapperUrl","forLocalRender","auth","rawData","popoutTemplateUrl","conferenceId","undefined","parsedUrl","URL","searchParams","get","domain","theme","ThemeWatcher","getEffectiveTheme","startsWith","customTheme","getCustomTheme","slice","is_dark","includes","getCompleteUrl","params","asPopout","runTemplate","data","StopGapWidget","EventEmitter","appTileProps","ev","preventDefault","ModalWidgetStore","instance","canOpenModalWidget","openModalWidget","detail","mockWidget","roomId","messaging","transport","reply","error","message","client","decryptEventIfNeeded","isBeingDecrypted","isDecryptionFailure","feedEvent","feedToDevice","getEffectiveEvent","isEncrypted","MatrixClientPeg","app","creatorUserId","objectShallowClone","getUserId","room","kind","userWidget","WidgetKind","Account","Room","eventListenerRoomId","RoomViewStore","getRoomId","widgetApi","embedUrl","runUrlTemplate","popoutUrl","opts","fromCustomisation","WidgetVariableCustomisations","provideVariables","defaults","widgetRoomId","currentUserId","userDisplayName","OwnProfileStore","displayName","userHttpAvatarUrl","getHttpAvatarUrl","clientId","ELEMENT_CLIENT_ID","clientTheme","SettingsStore","getValue","clientLanguage","getUserLanguage","templated","Object","assign","parsed","set","id","window","location","href","split","scalarToken","toString","replace","isManagedByManager","started","startMessaging","iframe","allowedCapabilities","whitelistCapabilities","driver","StopGapWidgetDriver","ClientWidgetApi","on","emit","WidgetApiFromWidgetAction","OpenModalWidget","onOpenModal","WidgetMessagingStore","storeMessaging","ElementWidgetActions","ViewRoom","targetRoomId","room_id","hasCapability","ElementWidgetCapabilities","CanChangeViewedRoom","defaultDispatcher","dispatch","action","Action","metricsTrigger","getRooms","events","getLiveTimeline","getEvents","roomEvent","length","readUpToMap","getId","ClientEvent","Event","onEvent","MatrixEventEvent","Decrypted","onEventDecrypted","ToDeviceEvent","onToDeviceEvent","UpdateAlwaysOnScreen","MatrixCapabilities","AlwaysOnScreen","ActiveWidgetStore","setWidgetPersistence","value","SendSticker","StickerSending","widgetId","STICKERPICKER","OpenIntegrationManager","integType","integId","IntegrationManagers","sharedInstance","getPrimaryManager","open","getRoom","HangupCall","errorMessage","Modal","createDialog","ErrorDialog","title","_t","description","prepare","isReady","Promise","resolve","existingMessaging","getMessaging","isScalarUrl","managers","hasManager","defaultManager","apiUrl","scalar","getScalarClient","getScalarToken","e","logger","stopMessaging","forceDestroy","getWidgetPersistence","log","off","upToEventId","isBeforeMark","timeline","arrayFastClone","reverse","timelineEvent","raw","catch"],"sources":["../../../src/stores/widgets/StopGapWidget.ts"],"sourcesContent":["/*\n * Copyright 2020 - 2022 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport {\n    ClientWidgetApi,\n    IModalWidgetOpenRequest,\n    IStickerActionRequest,\n    IStickyActionRequest,\n    ITemplateParams,\n    IWidget,\n    IWidgetApiErrorResponseData,\n    IWidgetApiRequest,\n    IWidgetApiRequestEmptyData,\n    IWidgetData,\n    MatrixCapabilities,\n    runTemplate,\n    Widget,\n    WidgetApiFromWidgetAction,\n    WidgetKind,\n} from \"matrix-widget-api\";\nimport { EventEmitter } from \"events\";\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\nimport { MatrixEvent, MatrixEventEvent } from \"matrix-js-sdk/src/models/event\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { ClientEvent } from \"matrix-js-sdk/src/client\";\n\nimport { _t } from \"../../languageHandler\";\nimport { StopGapWidgetDriver } from \"./StopGapWidgetDriver\";\nimport { WidgetMessagingStore } from \"./WidgetMessagingStore\";\nimport { RoomViewStore } from \"../RoomViewStore\";\nimport { MatrixClientPeg } from \"../../MatrixClientPeg\";\nimport { OwnProfileStore } from \"../OwnProfileStore\";\nimport WidgetUtils from '../../utils/WidgetUtils';\nimport { IntegrationManagers } from \"../../integrations/IntegrationManagers\";\nimport SettingsStore from \"../../settings/SettingsStore\";\nimport { WidgetType } from \"../../widgets/WidgetType\";\nimport ActiveWidgetStore from \"../ActiveWidgetStore\";\nimport { objectShallowClone } from \"../../utils/objects\";\nimport defaultDispatcher from \"../../dispatcher/dispatcher\";\nimport { Action } from \"../../dispatcher/actions\";\nimport { ElementWidgetActions, IHangupCallApiRequest, IViewRoomApiRequest } from \"./ElementWidgetActions\";\nimport { ModalWidgetStore } from \"../ModalWidgetStore\";\nimport ThemeWatcher from \"../../settings/watchers/ThemeWatcher\";\nimport { getCustomTheme } from \"../../theme\";\nimport { ElementWidgetCapabilities } from \"./ElementWidgetCapabilities\";\nimport { ELEMENT_CLIENT_ID } from \"../../identifiers\";\nimport { getUserLanguage } from \"../../languageHandler\";\nimport { WidgetVariableCustomisations } from \"../../customisations/WidgetVariables\";\nimport { arrayFastClone } from \"../../utils/arrays\";\nimport { ViewRoomPayload } from \"../../dispatcher/payloads/ViewRoomPayload\";\nimport Modal from \"../../Modal\";\nimport ErrorDialog from \"../../components/views/dialogs/ErrorDialog\";\n\n// TODO: Destroy all of this code\n\ninterface IAppTileProps {\n    // Note: these are only the props we care about\n    app: IWidget;\n    room?: Room; // without a room it is a user widget\n    userId: string;\n    creatorUserId: string;\n    waitForIframeLoad: boolean;\n    whitelistCapabilities?: string[];\n    userWidget: boolean;\n}\n\n// TODO: Don't use this because it's wrong\nexport class ElementWidget extends Widget {\n    constructor(private rawDefinition: IWidget) {\n        super(rawDefinition);\n    }\n\n    public get templateUrl(): string {\n        if (WidgetType.JITSI.matches(this.type)) {\n            return WidgetUtils.getLocalJitsiWrapperUrl({\n                forLocalRender: true,\n                auth: super.rawData?.auth as string, // this.rawData can call templateUrl, do this to prevent looping\n            });\n        }\n        return super.templateUrl;\n    }\n\n    public get popoutTemplateUrl(): string {\n        if (WidgetType.JITSI.matches(this.type)) {\n            return WidgetUtils.getLocalJitsiWrapperUrl({\n                forLocalRender: false, // The only important difference between this and templateUrl()\n                auth: super.rawData?.auth as string,\n            });\n        }\n        return this.templateUrl; // use this instead of super to ensure we get appropriate templating\n    }\n\n    public get rawData(): IWidgetData {\n        let conferenceId = super.rawData['conferenceId'];\n        if (conferenceId === undefined) {\n            // we'll need to parse the conference ID out of the URL for v1 Jitsi widgets\n            const parsedUrl = new URL(super.templateUrl); // use super to get the raw widget URL\n            conferenceId = parsedUrl.searchParams.get(\"confId\");\n        }\n        let domain = super.rawData['domain'];\n        if (domain === undefined) {\n            // v1 widgets default to meet.element.io regardless of user settings\n            domain = \"meet.element.io\";\n        }\n\n        let theme = new ThemeWatcher().getEffectiveTheme();\n        if (theme.startsWith(\"custom-\")) {\n            const customTheme = getCustomTheme(theme.slice(7));\n            // Jitsi only understands light/dark\n            theme = customTheme.is_dark ? \"dark\" : \"light\";\n        }\n\n        // only allow light/dark through, defaulting to dark as that was previously the only state\n        // accounts for legacy-light/legacy-dark themes too\n        if (theme.includes(\"light\")) {\n            theme = \"light\";\n        } else {\n            theme = \"dark\";\n        }\n\n        return {\n            ...super.rawData,\n            theme,\n            conferenceId,\n            domain,\n        };\n    }\n\n    public getCompleteUrl(params: ITemplateParams, asPopout = false): string {\n        return runTemplate(asPopout ? this.popoutTemplateUrl : this.templateUrl, {\n            ...this.rawDefinition,\n            data: this.rawData,\n        }, params);\n    }\n}\n\nexport class StopGapWidget extends EventEmitter {\n    private client: MatrixClient;\n    private messaging: ClientWidgetApi;\n    private mockWidget: ElementWidget;\n    private scalarToken: string;\n    private roomId?: string;\n    private kind: WidgetKind;\n    private readUpToMap: { [roomId: string]: string } = {}; // room ID to event ID\n\n    constructor(private appTileProps: IAppTileProps) {\n        super();\n        this.client = MatrixClientPeg.get();\n\n        let app = appTileProps.app;\n        // Backwards compatibility: not all old widgets have a creatorUserId\n        if (!app.creatorUserId) {\n            app = objectShallowClone(app); // clone to prevent accidental mutation\n            app.creatorUserId = this.client.getUserId();\n        }\n\n        this.mockWidget = new ElementWidget(app);\n        this.roomId = appTileProps.room?.roomId;\n        this.kind = appTileProps.userWidget ? WidgetKind.Account : WidgetKind.Room; // probably\n    }\n\n    private get eventListenerRoomId(): string {\n        // When widgets are listening to events, we need to make sure they're only\n        // receiving events for the right room. In particular, room widgets get locked\n        // to the room they were added in while account widgets listen to the currently\n        // active room.\n\n        if (this.roomId) return this.roomId;\n\n        return RoomViewStore.instance.getRoomId();\n    }\n\n    public get widgetApi(): ClientWidgetApi {\n        return this.messaging;\n    }\n\n    /**\n     * The URL to use in the iframe\n     */\n    public get embedUrl(): string {\n        return this.runUrlTemplate({ asPopout: false });\n    }\n\n    /**\n     * The URL to use in the popout\n     */\n    public get popoutUrl(): string {\n        return this.runUrlTemplate({ asPopout: true });\n    }\n\n    private runUrlTemplate(opts = { asPopout: false }): string {\n        const fromCustomisation = WidgetVariableCustomisations?.provideVariables?.() ?? {};\n        const defaults: ITemplateParams = {\n            widgetRoomId: this.roomId,\n            currentUserId: this.client.getUserId(),\n            userDisplayName: OwnProfileStore.instance.displayName,\n            userHttpAvatarUrl: OwnProfileStore.instance.getHttpAvatarUrl(),\n            clientId: ELEMENT_CLIENT_ID,\n            clientTheme: SettingsStore.getValue(\"theme\"),\n            clientLanguage: getUserLanguage(),\n        };\n        const templated = this.mockWidget.getCompleteUrl(Object.assign(defaults, fromCustomisation), opts?.asPopout);\n\n        const parsed = new URL(templated);\n\n        // Add in some legacy support sprinkles (for non-popout widgets)\n        // TODO: Replace these with proper widget params\n        // See https://github.com/matrix-org/matrix-doc/pull/1958/files#r405714833\n        if (!opts?.asPopout) {\n            parsed.searchParams.set('widgetId', this.mockWidget.id);\n            parsed.searchParams.set('parentUrl', window.location.href.split('#', 2)[0]);\n\n            // Give the widget a scalar token if we're supposed to (more legacy)\n            // TODO: Stop doing this\n            if (this.scalarToken) {\n                parsed.searchParams.set('scalar_token', this.scalarToken);\n            }\n        }\n\n        // Replace the encoded dollar signs back to dollar signs. They have no special meaning\n        // in HTTP, but URL parsers encode them anyways.\n        return parsed.toString().replace(/%24/g, '$');\n    }\n\n    public get isManagedByManager(): boolean {\n        return !!this.scalarToken;\n    }\n\n    public get started(): boolean {\n        return !!this.messaging;\n    }\n\n    private onOpenModal = async (ev: CustomEvent<IModalWidgetOpenRequest>) => {\n        ev.preventDefault();\n        if (ModalWidgetStore.instance.canOpenModalWidget()) {\n            ModalWidgetStore.instance.openModalWidget(ev.detail.data, this.mockWidget, this.roomId);\n            this.messaging.transport.reply(ev.detail, {}); // ack\n        } else {\n            this.messaging.transport.reply(ev.detail, {\n                error: {\n                    message: \"Unable to open modal at this time\",\n                },\n            });\n        }\n    };\n    /**\n     * This starts the messaging for the widget if it is not in the state `started` yet.\n     * @param iframe the iframe the widget should use\n     */\n    public startMessaging(iframe: HTMLIFrameElement): any {\n        if (this.started) return;\n\n        const allowedCapabilities = this.appTileProps.whitelistCapabilities || [];\n        const driver = new StopGapWidgetDriver(allowedCapabilities, this.mockWidget, this.kind, this.roomId);\n\n        this.messaging = new ClientWidgetApi(this.mockWidget, iframe, driver);\n        this.messaging.on(\"preparing\", () => this.emit(\"preparing\"));\n        this.messaging.on(\"ready\", () => this.emit(\"ready\"));\n        this.messaging.on(\"capabilitiesNotified\", () => this.emit(\"capabilitiesNotified\"));\n        this.messaging.on(`action:${WidgetApiFromWidgetAction.OpenModalWidget}`, this.onOpenModal);\n        WidgetMessagingStore.instance.storeMessaging(this.mockWidget, this.roomId, this.messaging);\n\n        // Always attach a handler for ViewRoom, but permission check it internally\n        this.messaging.on(`action:${ElementWidgetActions.ViewRoom}`, (ev: CustomEvent<IViewRoomApiRequest>) => {\n            ev.preventDefault(); // stop the widget API from auto-rejecting this\n\n            // Check up front if this is even a valid request\n            const targetRoomId = (ev.detail.data || {}).room_id;\n            if (!targetRoomId) {\n                return this.messaging.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                    error: { message: \"Room ID not supplied.\" },\n                });\n            }\n\n            // Check the widget's permission\n            if (!this.messaging.hasCapability(ElementWidgetCapabilities.CanChangeViewedRoom)) {\n                return this.messaging.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                    error: { message: \"This widget does not have permission for this action (denied).\" },\n                });\n            }\n\n            // at this point we can change rooms, so do that\n            defaultDispatcher.dispatch<ViewRoomPayload>({\n                action: Action.ViewRoom,\n                room_id: targetRoomId,\n                metricsTrigger: \"Widget\",\n            });\n\n            // acknowledge so the widget doesn't freak out\n            this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\n        });\n\n        // Populate the map of \"read up to\" events for this widget with the current event in every room.\n        // This is a bit inefficient, but should be okay. We do this for all rooms in case the widget\n        // requests timeline capabilities in other rooms down the road. It's just easier to manage here.\n        for (const room of this.client.getRooms()) {\n            // Timelines are most recent last\n            const events = room.getLiveTimeline()?.getEvents() || [];\n            const roomEvent = events[events.length - 1];\n            if (!roomEvent) continue; // force later code to think the room is fresh\n            this.readUpToMap[room.roomId] = roomEvent.getId();\n        }\n\n        // Attach listeners for feeding events - the underlying widget classes handle permissions for us\n        this.client.on(ClientEvent.Event, this.onEvent);\n        this.client.on(MatrixEventEvent.Decrypted, this.onEventDecrypted);\n        this.client.on(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\n\n        this.messaging.on(`action:${WidgetApiFromWidgetAction.UpdateAlwaysOnScreen}`,\n            (ev: CustomEvent<IStickyActionRequest>) => {\n                if (this.messaging.hasCapability(MatrixCapabilities.AlwaysOnScreen)) {\n                    ActiveWidgetStore.instance.setWidgetPersistence(\n                        this.mockWidget.id, this.roomId, ev.detail.data.value,\n                    );\n                    ev.preventDefault();\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack\n                }\n            },\n        );\n\n        // TODO: Replace this event listener with appropriate driver functionality once the API\n        // establishes a sane way to send events back and forth.\n        this.messaging.on(`action:${WidgetApiFromWidgetAction.SendSticker}`,\n            (ev: CustomEvent<IStickerActionRequest>) => {\n                if (this.messaging.hasCapability(MatrixCapabilities.StickerSending)) {\n                    // Acknowledge first\n                    ev.preventDefault();\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\n\n                    // Send the sticker\n                    defaultDispatcher.dispatch({\n                        action: 'm.sticker',\n                        data: ev.detail.data,\n                        widgetId: this.mockWidget.id,\n                    });\n                }\n            },\n        );\n\n        if (WidgetType.STICKERPICKER.matches(this.mockWidget.type)) {\n            this.messaging.on(`action:${ElementWidgetActions.OpenIntegrationManager}`,\n                (ev: CustomEvent<IWidgetApiRequest>) => {\n                    // Acknowledge first\n                    ev.preventDefault();\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\n\n                    // First close the stickerpicker\n                    defaultDispatcher.dispatch({ action: \"stickerpicker_close\" });\n\n                    // Now open the integration manager\n                    // TODO: Spec this interaction.\n                    const data = ev.detail.data;\n                    const integType = data?.integType;\n                    const integId = <string>data?.integId;\n\n                    // noinspection JSIgnoredPromiseFromCall\n                    IntegrationManagers.sharedInstance().getPrimaryManager().open(\n                        this.client.getRoom(RoomViewStore.instance.getRoomId()),\n                        `type_${integType}`,\n                        integId,\n                    );\n                },\n            );\n        }\n\n        if (WidgetType.JITSI.matches(this.mockWidget.type)) {\n            this.messaging.on(`action:${ElementWidgetActions.HangupCall}`,\n                (ev: CustomEvent<IHangupCallApiRequest>) => {\n                    ev.preventDefault();\n                    if (ev.detail.data?.errorMessage) {\n                        Modal.createDialog(ErrorDialog, {\n                            title: _t(\"Connection lost\"),\n                            description: _t(\"You were disconnected from the call. (Error: %(message)s)\", {\n                                message: ev.detail.data.errorMessage,\n                            }),\n                        });\n                    }\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\n                },\n            );\n        }\n    }\n\n    public async prepare(): Promise<void> {\n        // Ensure the variables are ready for us to be rendered before continuing\n        await (WidgetVariableCustomisations?.isReady?.() ?? Promise.resolve());\n\n        if (this.scalarToken) return;\n        const existingMessaging = WidgetMessagingStore.instance.getMessaging(this.mockWidget, this.roomId);\n        if (existingMessaging) this.messaging = existingMessaging;\n        try {\n            if (WidgetUtils.isScalarUrl(this.mockWidget.templateUrl)) {\n                const managers = IntegrationManagers.sharedInstance();\n                if (managers.hasManager()) {\n                    // TODO: Pick the right manager for the widget\n                    const defaultManager = managers.getPrimaryManager();\n                    if (WidgetUtils.isScalarUrl(defaultManager.apiUrl)) {\n                        const scalar = defaultManager.getScalarClient();\n                        this.scalarToken = await scalar.getScalarToken();\n                    }\n                }\n            }\n        } catch (e) {\n            // All errors are non-fatal\n            logger.error(\"Error preparing widget communications: \", e);\n        }\n    }\n\n    /**\n     * Stops the widget messaging for if it is started. Skips stopping if it is an active\n     * widget.\n     * @param opts\n     */\n    public stopMessaging(opts = { forceDestroy: false }) {\n        if (!opts?.forceDestroy && ActiveWidgetStore.instance.getWidgetPersistence(this.mockWidget.id, this.roomId)) {\n            logger.log(\"Skipping destroy - persistent widget\");\n            return;\n        }\n        if (!this.started) return;\n        WidgetMessagingStore.instance.stopMessaging(this.mockWidget, this.roomId);\n        this.messaging = null;\n\n        this.client.off(ClientEvent.Event, this.onEvent);\n        this.client.off(MatrixEventEvent.Decrypted, this.onEventDecrypted);\n        this.client.off(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\n    }\n\n    private onEvent = (ev: MatrixEvent) => {\n        this.client.decryptEventIfNeeded(ev);\n        if (ev.isBeingDecrypted() || ev.isDecryptionFailure()) return;\n        this.feedEvent(ev);\n    };\n\n    private onEventDecrypted = (ev: MatrixEvent) => {\n        if (ev.isDecryptionFailure()) return;\n        this.feedEvent(ev);\n    };\n\n    private onToDeviceEvent = async (ev: MatrixEvent) => {\n        await this.client.decryptEventIfNeeded(ev);\n        if (ev.isDecryptionFailure()) return;\n        await this.messaging.feedToDevice(ev.getEffectiveEvent(), ev.isEncrypted());\n    };\n\n    private feedEvent(ev: MatrixEvent) {\n        if (!this.messaging) return;\n\n        // Check to see if this event would be before or after our \"read up to\" marker. If it's\n        // before, or we can't decide, then we assume the widget will have already seen the event.\n        // If the event is after, or we don't have a marker for the room, then we'll send it through.\n        //\n        // This approach of \"read up to\" prevents widgets receiving decryption spam from startup or\n        // receiving out-of-order events from backfill and such.\n        const upToEventId = this.readUpToMap[ev.getRoomId()];\n        if (upToEventId) {\n            // Small optimization for exact match (prevent search)\n            if (upToEventId === ev.getId()) {\n                return;\n            }\n\n            let isBeforeMark = true;\n\n            // Timelines are most recent last, so reverse the order and limit ourselves to 100 events\n            // to avoid overusing the CPU.\n            const timeline = this.client.getRoom(ev.getRoomId()).getLiveTimeline();\n            const events = arrayFastClone(timeline.getEvents()).reverse().slice(0, 100);\n\n            for (const timelineEvent of events) {\n                if (timelineEvent.getId() === upToEventId) {\n                    break;\n                } else if (timelineEvent.getId() === ev.getId()) {\n                    isBeforeMark = false;\n                    break;\n                }\n            }\n\n            if (isBeforeMark) {\n                // Ignore the event: it is before our interest.\n                return;\n            }\n        }\n\n        this.readUpToMap[ev.getRoomId()] = ev.getId();\n\n        const raw = ev.getEffectiveEvent();\n        this.messaging.feedEvent(raw, this.eventListenerRoomId).catch(e => {\n            logger.error(\"Error sending event to widget: \", e);\n        });\n    }\n}\n"],"mappings":"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"}