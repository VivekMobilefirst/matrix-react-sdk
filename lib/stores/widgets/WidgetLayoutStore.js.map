{"version":3,"file":"WidgetLayoutStore.js","names":["WIDGET_LAYOUT_EVENT_TYPE","Container","MAX_PINNED","MIN_WIDGET_WIDTH_PCT","MIN_WIDGET_HEIGHT_PCT","WidgetLayoutStore","ReadyWatchingStore","constructor","defaultDispatcher","byRoom","room","matrixClient","getVisibleRooms","recalculateRoom","roomId","getRoom","updateAllRooms","ev","getType","getRoomId","settingName","instance","internalInstance","emissionForRoom","emitFor","emit","onReady","on","RoomStateEvent","Events","updateRoomFromState","pinnedRef","SettingsStore","watchSetting","updateFromSettings","layoutRef","WidgetStore","UPDATE_EVENT","updateFromWidgetStore","onNotReady","off","unwatchSetting","widgets","getApps","length","beforeChanges","JSON","stringify","layoutEv","currentState","getStateEvents","legacyPinned","getValue","userLayout","overrides","getId","roomLayout","getContent","topWidgets","rightWidgets","centerWidgets","widget","stateContainer","id","container","manualContainer","isLegacyPinned","defaultContainer","WidgetType","JITSI","matches","type","Top","Right","Center","console","error","push","targetContainer","runoff","slice","sort","a","b","layoutA","layoutB","userLayoutA","userLayoutB","defaultA","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","defaultB","orderA","defaultNumber","index","orderB","compare","widths","maxHeight","doAutobalance","i","widgetLayout","userWidgetLayout","isFinite","width","val","normalized","clamp","height","defRoomHeight","h","Math","max","difference","sum","abs","toReclaim","largeIndices","map","v","filter","p","idx","ordered","distributions","afterChanges","getContainerWidgets","isInContainer","some","w","canAddToContainer","getResizerDistributions","d","toFixed","setResizerDistributions","numbers","substring","remaining","splice","localLayout","forEach","updateUserLayout","getContainerHeight","setContainerHeight","moveWithinContainer","delta","arrayFastClone","currentIdx","findIndex","newIdx","moveToContainer","toContainer","allWidgets","getAllWidgets","newLayout","hasMaximisedWidget","centerWidget","hasPinnedWidgets","canCopyLayoutToRoom","maySendStateEvent","getUserId","copyLayoutToRoom","evContent","containerWidgets","round","sendStateEvent","containers","ret","Object","keys","setValue","SettingLevel","ROOM_ACCOUNT","catch","window","mxWidgetLayoutStore"],"sources":["../../../src/stores/widgets/WidgetLayoutStore.ts"],"sourcesContent":["/*\n * Copyright 2021 - 2022 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\nimport { RoomStateEvent } from \"matrix-js-sdk/src/models/room-state\";\nimport { Optional } from \"matrix-events-sdk\";\n\nimport SettingsStore from \"../../settings/SettingsStore\";\nimport WidgetStore, { IApp } from \"../WidgetStore\";\nimport { WidgetType } from \"../../widgets/WidgetType\";\nimport { clamp, defaultNumber, sum } from \"../../utils/numbers\";\nimport defaultDispatcher from \"../../dispatcher/dispatcher\";\nimport { ReadyWatchingStore } from \"../ReadyWatchingStore\";\nimport { SettingLevel } from \"../../settings/SettingLevel\";\nimport { arrayFastClone } from \"../../utils/arrays\";\nimport { UPDATE_EVENT } from \"../AsyncStore\";\nimport { compare } from \"../../utils/strings\";\n\nexport const WIDGET_LAYOUT_EVENT_TYPE = \"io.element.widgets.layout\";\n\nexport enum Container {\n    // \"Top\" is the app drawer, and currently the only sensible value.\n    Top = \"top\",\n\n    // \"Right\" is the right panel, and the default for widgets. Setting\n    // this as a container on a widget is essentially like saying \"no\n    // changes needed\", though this may change in the future.\n    Right = \"right\",\n\n    Center = \"center\"\n}\n\nexport interface IStoredLayout {\n    // Where to store the widget. Required.\n    container: Container;\n\n    // The index (order) to position the widgets in. Only applies for\n    // ordered containers (like the top container). Smaller numbers first,\n    // and conflicts resolved by comparing widget IDs.\n    index?: number;\n\n    // Percentage (integer) for relative width of the container to consume.\n    // Clamped to 0-100 and may have minimums imposed upon it. Only applies\n    // to containers which support inner resizing (currently only the top\n    // container).\n    width?: number;\n\n    // Percentage (integer) for relative height of the container. Note that\n    // this only applies to the top container currently, and that container\n    // will take the highest value among widgets in the container. Clamped\n    // to 0-100 and may have minimums imposed on it.\n    height?: number;\n\n    // TODO: [Deferred] Maximizing (fullscreen) widgets by default.\n}\n\ninterface IWidgetLayouts {\n    [widgetId: string]: IStoredLayout;\n}\n\ninterface ILayoutStateEvent {\n    // TODO: [Deferred] Forced layout (fixed with no changes)\n\n    // The widget layouts.\n    widgets: IWidgetLayouts;\n}\n\ninterface ILayoutSettings extends ILayoutStateEvent {\n    overrides?: string; // event ID for layout state event, if present\n}\n\n// Dev note: \"Pinned\" widgets are ones in the top container.\nexport const MAX_PINNED = 3;\n\n// These two are whole percentages and don't really mean anything. Later values will decide\n// minimum, but these help determine proportions during our calculations here. In fact, these\n// values should be *smaller* than the actual minimums imposed by later components.\nconst MIN_WIDGET_WIDTH_PCT = 10; // 10%\nconst MIN_WIDGET_HEIGHT_PCT = 2; // 2%\n\nexport class WidgetLayoutStore extends ReadyWatchingStore {\n    private static internalInstance: WidgetLayoutStore;\n\n    private byRoom: {\n        [roomId: string]: {\n            // @ts-ignore - TS wants a string key, but we know better\n            [container: Container]: {\n                ordered: IApp[];\n                height?: number;\n                distributions?: number[];\n            };\n        };\n    } = {};\n\n    private pinnedRef: string;\n    private layoutRef: string;\n\n    private constructor() {\n        super(defaultDispatcher);\n    }\n\n    public static get instance(): WidgetLayoutStore {\n        if (!WidgetLayoutStore.internalInstance) {\n            WidgetLayoutStore.internalInstance = new WidgetLayoutStore();\n        }\n        return WidgetLayoutStore.internalInstance;\n    }\n\n    public static emissionForRoom(room: Room): string {\n        return `update_${room.roomId}`;\n    }\n\n    private emitFor(room: Room) {\n        this.emit(WidgetLayoutStore.emissionForRoom(room));\n    }\n\n    protected async onReady(): Promise<any> {\n        this.updateAllRooms();\n\n        this.matrixClient.on(RoomStateEvent.Events, this.updateRoomFromState);\n        this.pinnedRef = SettingsStore.watchSetting(\"Widgets.pinned\", null, this.updateFromSettings);\n        this.layoutRef = SettingsStore.watchSetting(\"Widgets.layout\", null, this.updateFromSettings);\n        WidgetStore.instance.on(UPDATE_EVENT, this.updateFromWidgetStore);\n    }\n\n    protected async onNotReady(): Promise<any> {\n        this.byRoom = {};\n\n        this.matrixClient?.off(RoomStateEvent.Events, this.updateRoomFromState);\n        SettingsStore.unwatchSetting(this.pinnedRef);\n        SettingsStore.unwatchSetting(this.layoutRef);\n        WidgetStore.instance.off(UPDATE_EVENT, this.updateFromWidgetStore);\n    }\n\n    private updateAllRooms = () => {\n        this.byRoom = {};\n        for (const room of this.matrixClient.getVisibleRooms()) {\n            this.recalculateRoom(room);\n        }\n    };\n\n    private updateFromWidgetStore = (roomId?: string) => {\n        if (roomId) {\n            const room = this.matrixClient.getRoom(roomId);\n            if (room) this.recalculateRoom(room);\n        } else {\n            this.updateAllRooms();\n        }\n    };\n\n    private updateRoomFromState = (ev: MatrixEvent) => {\n        if (ev.getType() !== WIDGET_LAYOUT_EVENT_TYPE) return;\n        const room = this.matrixClient.getRoom(ev.getRoomId());\n        if (room) this.recalculateRoom(room);\n    };\n\n    private updateFromSettings = (settingName: string, roomId: string /* and other stuff */) => {\n        if (roomId) {\n            const room = this.matrixClient.getRoom(roomId);\n            if (room) this.recalculateRoom(room);\n        } else {\n            this.updateAllRooms();\n        }\n    };\n\n    public recalculateRoom(room: Room) {\n        const widgets = WidgetStore.instance.getApps(room.roomId);\n        if (!widgets?.length) {\n            this.byRoom[room.roomId] = {};\n            this.emitFor(room);\n            return;\n        }\n\n        const beforeChanges = JSON.stringify(this.byRoom[room.roomId]);\n\n        const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, \"\");\n        const legacyPinned = SettingsStore.getValue(\"Widgets.pinned\", room.roomId);\n        let userLayout = SettingsStore.getValue<ILayoutSettings>(\"Widgets.layout\", room.roomId);\n\n        if (layoutEv && userLayout && userLayout.overrides !== layoutEv.getId()) {\n            // For some other layout that we don't really care about. The user can reset this\n            // by updating their personal layout.\n            userLayout = null;\n        }\n\n        const roomLayout: ILayoutStateEvent = layoutEv ? layoutEv.getContent() : null;\n        // We filter for the center container first.\n        // (An error is raised, if there are multiple widgets marked for the center container)\n        // For the right and top container multiple widgets are allowed.\n        const topWidgets: IApp[] = [];\n        const rightWidgets: IApp[] = [];\n        const centerWidgets: IApp[] = [];\n        for (const widget of widgets) {\n            const stateContainer = roomLayout?.widgets?.[widget.id]?.container;\n            const manualContainer = userLayout?.widgets?.[widget.id]?.container;\n            const isLegacyPinned = !!legacyPinned?.[widget.id];\n            const defaultContainer = WidgetType.JITSI.matches(widget.type) ? Container.Top : Container.Right;\n            if ((manualContainer) ? manualContainer === Container.Center : stateContainer === Container.Center) {\n                if (centerWidgets.length) {\n                    console.error(\"Tried to push a second widget into the center container\");\n                } else {\n                    centerWidgets.push(widget);\n                }\n                // The widget won't need to be put in any other container.\n                continue;\n            }\n            let targetContainer = defaultContainer;\n            if (!!manualContainer || !!stateContainer) {\n                targetContainer = (manualContainer) ? manualContainer : stateContainer;\n            } else if (isLegacyPinned && !stateContainer) {\n                // Special legacy case\n                targetContainer = Container.Top;\n            }\n            (targetContainer === Container.Top ? topWidgets : rightWidgets).push(widget);\n        }\n\n        // Trim to MAX_PINNED\n        const runoff = topWidgets.slice(MAX_PINNED);\n        rightWidgets.push(...runoff);\n\n        // Order the widgets in the top container, putting autopinned Jitsi widgets first\n        // unless they have a specific order in mind\n        topWidgets.sort((a, b) => {\n            const layoutA = roomLayout?.widgets?.[a.id];\n            const layoutB = roomLayout?.widgets?.[b.id];\n\n            const userLayoutA = userLayout?.widgets?.[a.id];\n            const userLayoutB = userLayout?.widgets?.[b.id];\n\n            // Jitsi widgets are defaulted to be the leftmost widget whereas other widgets\n            // default to the right side.\n            const defaultA = WidgetType.JITSI.matches(a.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\n            const defaultB = WidgetType.JITSI.matches(b.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\n\n            const orderA = defaultNumber(userLayoutA?.index, defaultNumber(layoutA?.index, defaultA));\n            const orderB = defaultNumber(userLayoutB?.index, defaultNumber(layoutB?.index, defaultB));\n\n            if (orderA === orderB) {\n                // We just need a tiebreak\n                return compare(a.id, b.id);\n            }\n\n            return orderA - orderB;\n        });\n\n        // Determine width distribution and height of the top container now (the only relevant one)\n        const widths: number[] = [];\n        let maxHeight = null; // null == default\n        let doAutobalance = true;\n        for (let i = 0; i < topWidgets.length; i++) {\n            const widget = topWidgets[i];\n            const widgetLayout = roomLayout?.widgets?.[widget.id];\n            const userWidgetLayout = userLayout?.widgets?.[widget.id];\n\n            if (Number.isFinite(userWidgetLayout?.width) || Number.isFinite(widgetLayout?.width)) {\n                const val = userWidgetLayout?.width || widgetLayout?.width;\n                const normalized = clamp(val, MIN_WIDGET_WIDTH_PCT, 100);\n                widths.push(normalized);\n                doAutobalance = false; // a manual width was specified\n            } else {\n                widths.push(100); // we'll figure this out later\n            }\n\n            if (widgetLayout?.height || userWidgetLayout?.height) {\n                const defRoomHeight = defaultNumber(widgetLayout?.height, MIN_WIDGET_HEIGHT_PCT);\n                const h = defaultNumber(userWidgetLayout?.height, defRoomHeight);\n                maxHeight = Math.max(maxHeight, clamp(h, MIN_WIDGET_HEIGHT_PCT, 100));\n            }\n        }\n        if (doAutobalance) {\n            for (let i = 0; i < widths.length; i++) {\n                widths[i] = 100 / widths.length;\n            }\n        } else {\n            // If we're not autobalancing then it means that we're trying to make\n            // sure that widgets make up exactly 100% of space (not over, not under)\n            const difference = sum(...widths) - 100; // positive = over, negative = under\n            if (difference < 0) {\n                // For a deficit we just fill everything in equally\n                for (let i = 0; i < widths.length; i++) {\n                    widths[i] += Math.abs(difference) / widths.length;\n                }\n            } else if (difference > 0) {\n                // When we're over, we try to scale all the widgets within range first.\n                // We clamp values to try and keep ourselves sane and within range.\n                for (let i = 0; i < widths.length; i++) {\n                    widths[i] = clamp(widths[i] - (difference / widths.length), MIN_WIDGET_WIDTH_PCT, 100);\n                }\n\n                // If we're still over, find the widgets which have more width than the minimum\n                // and balance them out until we're at 100%. This should keep us as close as possible\n                // to the intended distributions.\n                //\n                // Note: if we ever decide to set a minimum which is larger than 100%/MAX_WIDGETS then\n                // we probably have other issues - this code assumes we don't do that.\n                const toReclaim = sum(...widths) - 100;\n                if (toReclaim > 0) {\n                    const largeIndices = widths\n                        .map((v, i) => ([i, v]))\n                        .filter(p => p[1] > MIN_WIDGET_WIDTH_PCT)\n                        .map(p => p[0]);\n                    for (const idx of largeIndices) {\n                        widths[idx] -= toReclaim / largeIndices.length;\n                    }\n                }\n            }\n        }\n\n        // Finally, fill in our cache and update\n        this.byRoom[room.roomId] = {};\n        if (topWidgets.length) {\n            this.byRoom[room.roomId][Container.Top] = {\n                ordered: topWidgets,\n                distributions: widths,\n                height: maxHeight,\n            };\n        }\n        if (rightWidgets.length) {\n            this.byRoom[room.roomId][Container.Right] = {\n                ordered: rightWidgets,\n            };\n        }\n        if (centerWidgets.length) {\n            this.byRoom[room.roomId][Container.Center] = {\n                ordered: centerWidgets,\n            };\n        }\n\n        const afterChanges = JSON.stringify(this.byRoom[room.roomId]);\n        if (afterChanges !== beforeChanges) {\n            this.emitFor(room);\n        }\n    }\n\n    public getContainerWidgets(room: Optional<Room>, container: Container): IApp[] {\n        return this.byRoom[room?.roomId]?.[container]?.ordered || [];\n    }\n\n    public isInContainer(room: Optional<Room>, widget: IApp, container: Container): boolean {\n        return this.getContainerWidgets(room, container).some(w => w.id === widget.id);\n    }\n\n    public canAddToContainer(room: Room, container: Container): boolean {\n        switch (container) {\n            case Container.Top: return this.getContainerWidgets(room, container).length < MAX_PINNED;\n            case Container.Right: return this.getContainerWidgets(room, container).length < MAX_PINNED;\n            case Container.Center: return this.getContainerWidgets(room, container).length < 1;\n        }\n    }\n\n    public getResizerDistributions(room: Room, container: Container): string[] { // yes, string.\n        let distributions = this.byRoom[room.roomId]?.[container]?.distributions;\n        if (!distributions || distributions.length < 2) return [];\n\n        // The distributor actually expects to be fed N-1 sizes and expands the middle section\n        // instead of the edges. Therefore, we need to return [0] when there's two widgets or\n        // [0, 2] when there's three (skipping [1] because it's irrelevant).\n\n        if (distributions.length === 2) distributions = [distributions[0]];\n        if (distributions.length === 3) distributions = [distributions[0], distributions[2]];\n        return distributions.map(d => `${d.toFixed(1)}%`); // actual percents - these are decoded later\n    }\n\n    public setResizerDistributions(room: Room, container: Container, distributions: string[]) {\n        if (container !== Container.Top) return; // ignore - not relevant\n\n        const numbers = distributions.map(d => Number(Number(d.substring(0, d.length - 1)).toFixed(1)));\n        const widgets = this.getContainerWidgets(room, container);\n\n        // From getResizerDistributions, we need to fill in the middle size if applicable.\n        const remaining = 100 - sum(...numbers);\n        if (numbers.length === 2) numbers.splice(1, 0, remaining);\n        if (numbers.length === 1) numbers.push(remaining);\n\n        const localLayout = {};\n        widgets.forEach((w, i) => {\n            localLayout[w.id] = {\n                container: container,\n                width: numbers[i],\n                index: i,\n                height: this.byRoom[room.roomId]?.[container]?.height || MIN_WIDGET_HEIGHT_PCT,\n            };\n        });\n        this.updateUserLayout(room, localLayout);\n    }\n\n    public getContainerHeight(room: Room, container: Container): number {\n        return this.byRoom[room.roomId]?.[container]?.height; // let the default get returned if needed\n    }\n\n    public setContainerHeight(room: Room, container: Container, height: number) {\n        const widgets = this.getContainerWidgets(room, container);\n        const widths = this.byRoom[room.roomId]?.[container]?.distributions;\n        const localLayout = {};\n        widgets.forEach((w, i) => {\n            localLayout[w.id] = {\n                container: container,\n                width: widths[i],\n                index: i,\n                height: height,\n            };\n        });\n        this.updateUserLayout(room, localLayout);\n    }\n\n    public moveWithinContainer(room: Room, container: Container, widget: IApp, delta: number) {\n        const widgets = arrayFastClone(this.getContainerWidgets(room, container));\n        const currentIdx = widgets.findIndex(w => w.id === widget.id);\n        if (currentIdx < 0) return; // no change needed\n\n        widgets.splice(currentIdx, 1); // remove existing widget\n        const newIdx = clamp(currentIdx + delta, 0, widgets.length);\n        widgets.splice(newIdx, 0, widget);\n\n        const widths = this.byRoom[room.roomId]?.[container]?.distributions;\n        const height = this.byRoom[room.roomId]?.[container]?.height;\n        const localLayout = {};\n        widgets.forEach((w, i) => {\n            localLayout[w.id] = {\n                container: container,\n                width: widths[i],\n                index: i,\n                height: height,\n            };\n        });\n        this.updateUserLayout(room, localLayout);\n    }\n\n    public moveToContainer(room: Room, widget: IApp, toContainer: Container) {\n        const allWidgets = this.getAllWidgets(room);\n        if (!allWidgets.some(([w]) => w.id === widget.id)) return; // invalid\n        // Prepare other containers (potentially move widgets to obey the following rules)\n        const newLayout = {};\n        switch (toContainer) {\n            case Container.Right:\n                // new \"right\" widget\n                break;\n            case Container.Center:\n                // new \"center\" widget => all other widgets go into \"right\"\n                for (const w of this.getContainerWidgets(room, Container.Top)) {\n                    newLayout[w.id] = { container: Container.Right };\n                }\n                for (const w of this.getContainerWidgets(room, Container.Center)) {\n                    newLayout[w.id] = { container: Container.Right };\n                }\n                break;\n            case Container.Top:\n                // new \"top\" widget => the center widget moves into \"right\"\n                if (this.hasMaximisedWidget(room)) {\n                    const centerWidget = this.getContainerWidgets(room, Container.Center)[0];\n                    newLayout[centerWidget.id] = { container: Container.Right };\n                }\n                break;\n        }\n\n        newLayout[widget.id] = { container: toContainer };\n\n        // move widgets into requested containers.\n        this.updateUserLayout(room, newLayout);\n    }\n\n    public hasMaximisedWidget(room: Room) {\n        return this.getContainerWidgets(room, Container.Center).length > 0;\n    }\n\n    public hasPinnedWidgets(room: Room) {\n        return this.getContainerWidgets(room, Container.Top).length > 0;\n    }\n\n    public canCopyLayoutToRoom(room: Room): boolean {\n        if (!this.matrixClient) return false; // not ready yet\n        return room.currentState.maySendStateEvent(WIDGET_LAYOUT_EVENT_TYPE, this.matrixClient.getUserId());\n    }\n\n    public copyLayoutToRoom(room: Room) {\n        const allWidgets = this.getAllWidgets(room);\n        const evContent: ILayoutStateEvent = { widgets: {} };\n        for (const [widget, container] of allWidgets) {\n            evContent.widgets[widget.id] = { container };\n            if (container === Container.Top) {\n                const containerWidgets = this.getContainerWidgets(room, container);\n                const idx = containerWidgets.findIndex(w => w.id === widget.id);\n                const widths = this.byRoom[room.roomId]?.[container]?.distributions;\n                const height = this.byRoom[room.roomId]?.[container]?.height;\n                evContent.widgets[widget.id] = {\n                    ...evContent.widgets[widget.id],\n                    height: height ? Math.round(height) : null,\n                    width: widths[idx] ? Math.round(widths[idx]) : null,\n                    index: idx,\n                };\n            }\n        }\n        this.matrixClient.sendStateEvent(room.roomId, WIDGET_LAYOUT_EVENT_TYPE, evContent, \"\");\n    }\n\n    private getAllWidgets(room: Room): [IApp, Container][] {\n        const containers = this.byRoom[room.roomId];\n        if (!containers) return [];\n\n        const ret = [];\n        for (const container of Object.keys(containers)) {\n            const widgets = containers[container].ordered;\n            for (const widget of widgets) {\n                ret.push([widget, container]);\n            }\n        }\n        return ret;\n    }\n\n    private updateUserLayout(room: Room, newLayout: IWidgetLayouts) {\n        // Polyfill any missing widgets\n        const allWidgets = this.getAllWidgets(room);\n        for (const [widget, container] of allWidgets) {\n            const containerWidgets = this.getContainerWidgets(room, container);\n            const idx = containerWidgets.findIndex(w => w.id === widget.id);\n            const widths = this.byRoom[room.roomId]?.[container]?.distributions;\n            if (!newLayout[widget.id]) {\n                newLayout[widget.id] = {\n                    container: container,\n                    index: idx,\n                    height: this.byRoom[room.roomId]?.[container]?.height,\n                    width: widths?.[idx],\n                };\n            }\n        }\n\n        const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, \"\");\n        SettingsStore.setValue(\"Widgets.layout\", room.roomId, SettingLevel.ROOM_ACCOUNT, {\n            overrides: layoutEv?.getId(),\n            widgets: newLayout,\n        }).catch(() => this.recalculateRoom(room));\n        this.recalculateRoom(room); // call to try local echo on changes (the catch above undoes any errors)\n    }\n}\n\nwindow.mxWidgetLayoutStore = WidgetLayoutStore.instance;\n"],"mappings":"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"}