{"version":3,"file":"StopGapWidgetDriver.js","names":["getRememberedCapabilitiesForWidget","widget","JSON","parse","localStorage","getItem","id","setRememberedCapabilitiesForWidget","caps","setItem","stringify","normalizeTurnServer","urls","username","credential","uris","password","StopGapWidgetDriver","WidgetDriver","constructor","allowedCapabilities","forWidget","forWidgetKind","inRoomId","Set","MatrixCapabilities","Screenshots","ElementWidgetCapabilities","RequiresClient","WidgetType","JITSI","matches","type","WidgetKind","Room","add","AlwaysOnScreen","STICKERPICKER","Account","stickerSendingCap","WidgetEventCapability","forRoomEvent","EventDirection","Send","EventType","Sticker","raw","StickerSending","validateCapabilities","requested","diff","iterableDiff","missing","removed","allowedSoFar","forEach","cap","delete","WidgetPermissionCustomisations","preapproveCapabilities","approved","rememberApproved","size","result","Modal","createDialog","WidgetCapabilitiesPromptDialog","requestedCapabilities","widgetKind","finished","remember","e","logger","error","allAllowed","iterableIntersection","Array","from","sendEvent","eventType","content","stateKey","targetRoomId","client","MatrixClientPeg","get","roomId","RoomViewStore","instance","getRoomId","Error","r","sendStateEvent","RoomRedaction","redactEvent","RoomMessage","CHAT_EFFECTS","effect","containsEmoji","emojis","isNotThread","rel_type","THREAD_RELATION_TYPE","name","SettingsStore","getValue","dis","dispatch","action","command","eventId","event_id","sendToDevice","encrypted","contentMap","deviceInfoMap","crypto","deviceList","downloadKeys","Object","keys","Promise","all","entries","flatMap","userId","userContentMap","map","deviceId","encryptAndSendToDevices","values","deviceInfo","queueToDevice","batch","payload","pickRooms","roomIds","targetRooms","includes","Symbols","AnyRoom","getVisibleRooms","getRoom","filter","readRoomEvents","msgtype","limitPerRoom","Math","min","Number","MAX_SAFE_INTEGER","rooms","allResults","room","results","events","getLiveTimeline","getEvents","i","length","ev","getType","isState","getContent","push","getEffectiveEvent","readStateEvents","state","currentState","forKey","slice","askOpenID","observer","oidcState","WidgetPermissionStore","getOIDCState","getToken","getOpenIdToken","OIDCState","Denied","update","OpenIDRequestState","Blocked","Allowed","token","PendingUserConfirmation","WidgetOpenIDPermissionsDialog","onFinished","confirm","navigate","uri","navigateToPermalink","getTurnServers","pollingTurnServers","setTurnServer","setError","onTurnServers","server","onTurnServersError","fatal","on","ClientEvent","TurnServers","TurnServersError","initialTurnServer","resolve","reject","off"],"sources":["../../../src/stores/widgets/StopGapWidgetDriver.ts"],"sourcesContent":["/*\n * Copyright 2020 - 2022 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Capability,\n    EventDirection,\n    IOpenIDCredentials,\n    IOpenIDUpdate,\n    ISendEventDetails,\n    ITurnServer,\n    IRoomEvent,\n    MatrixCapabilities,\n    OpenIDRequestState,\n    SimpleObservable,\n    Symbols,\n    Widget,\n    WidgetDriver,\n    WidgetEventCapability,\n    WidgetKind,\n} from \"matrix-widget-api\";\nimport { ClientEvent, ITurnServer as IClientTurnServer } from \"matrix-js-sdk/src/client\";\nimport { EventType } from \"matrix-js-sdk/src/@types/event\";\nimport { IContent, IEvent, MatrixEvent } from \"matrix-js-sdk/src/models/event\";\nimport { Room } from \"matrix-js-sdk/src/models/room\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { THREAD_RELATION_TYPE } from \"matrix-js-sdk/src/models/thread\";\n\nimport { iterableDiff, iterableIntersection } from \"../../utils/iterables\";\nimport { MatrixClientPeg } from \"../../MatrixClientPeg\";\nimport Modal from \"../../Modal\";\nimport WidgetOpenIDPermissionsDialog from \"../../components/views/dialogs/WidgetOpenIDPermissionsDialog\";\nimport WidgetCapabilitiesPromptDialog from \"../../components/views/dialogs/WidgetCapabilitiesPromptDialog\";\nimport { WidgetPermissionCustomisations } from \"../../customisations/WidgetPermissions\";\nimport { OIDCState, WidgetPermissionStore } from \"./WidgetPermissionStore\";\nimport { WidgetType } from \"../../widgets/WidgetType\";\nimport { CHAT_EFFECTS } from \"../../effects\";\nimport { containsEmoji } from \"../../effects/utils\";\nimport dis from \"../../dispatcher/dispatcher\";\nimport SettingsStore from \"../../settings/SettingsStore\";\nimport { RoomViewStore } from \"../RoomViewStore\";\nimport { ElementWidgetCapabilities } from \"./ElementWidgetCapabilities\";\nimport { navigateToPermalink } from \"../../utils/permalinks/navigator\";\n\n// TODO: Purge this from the universe\n\nfunction getRememberedCapabilitiesForWidget(widget: Widget): Capability[] {\n    return JSON.parse(localStorage.getItem(`widget_${widget.id}_approved_caps`) || \"[]\");\n}\n\nfunction setRememberedCapabilitiesForWidget(widget: Widget, caps: Capability[]) {\n    localStorage.setItem(`widget_${widget.id}_approved_caps`, JSON.stringify(caps));\n}\n\nconst normalizeTurnServer = ({ urls, username, credential }: IClientTurnServer): ITurnServer => ({\n    uris: urls,\n    username,\n    password: credential,\n});\n\nexport class StopGapWidgetDriver extends WidgetDriver {\n    private allowedCapabilities: Set<Capability>;\n\n    // TODO: Refactor widgetKind into the Widget class\n    constructor(\n        allowedCapabilities: Capability[],\n        private forWidget: Widget,\n        private forWidgetKind: WidgetKind,\n        private inRoomId?: string,\n    ) {\n        super();\n\n        // Always allow screenshots to be taken because it's a client-induced flow. The widget can't\n        // spew screenshots at us and can't request screenshots of us, so it's up to us to provide the\n        // button if the widget says it supports screenshots.\n        this.allowedCapabilities = new Set([...allowedCapabilities,\n            MatrixCapabilities.Screenshots,\n            ElementWidgetCapabilities.RequiresClient]);\n\n        // Grant the permissions that are specific to given widget types\n        if (WidgetType.JITSI.matches(this.forWidget.type) && forWidgetKind === WidgetKind.Room) {\n            this.allowedCapabilities.add(MatrixCapabilities.AlwaysOnScreen);\n        } else if (WidgetType.STICKERPICKER.matches(this.forWidget.type) && forWidgetKind === WidgetKind.Account) {\n            const stickerSendingCap = WidgetEventCapability.forRoomEvent(EventDirection.Send, EventType.Sticker).raw;\n            this.allowedCapabilities.add(MatrixCapabilities.StickerSending); // legacy as far as MSC2762 is concerned\n            this.allowedCapabilities.add(stickerSendingCap);\n\n            // Auto-approve the legacy visibility capability. We send it regardless of capability.\n            // Widgets don't technically need to request this capability, but Scalar still does.\n            this.allowedCapabilities.add(\"visibility\");\n        }\n    }\n\n    public async validateCapabilities(requested: Set<Capability>): Promise<Set<Capability>> {\n        // Check to see if any capabilities aren't automatically accepted (such as sticker pickers\n        // allowing stickers to be sent). If there are excess capabilities to be approved, the user\n        // will be prompted to accept them.\n        const diff = iterableDiff(requested, this.allowedCapabilities);\n        const missing = new Set(diff.removed); // \"removed\" is \"in A (requested) but not in B (allowed)\"\n        const allowedSoFar = new Set(this.allowedCapabilities);\n        getRememberedCapabilitiesForWidget(this.forWidget).forEach(cap => {\n            allowedSoFar.add(cap);\n            missing.delete(cap);\n        });\n        if (WidgetPermissionCustomisations.preapproveCapabilities) {\n            const approved = await WidgetPermissionCustomisations.preapproveCapabilities(this.forWidget, requested);\n            if (approved) {\n                approved.forEach(cap => {\n                    allowedSoFar.add(cap);\n                    missing.delete(cap);\n                });\n            }\n        }\n        // TODO: Do something when the widget requests new capabilities not yet asked for\n        let rememberApproved = false;\n        if (missing.size > 0) {\n            try {\n                const [result] = await Modal.createDialog(\n                    WidgetCapabilitiesPromptDialog,\n                    {\n                        requestedCapabilities: missing,\n                        widget: this.forWidget,\n                        widgetKind: this.forWidgetKind,\n                    }).finished;\n                (result.approved || []).forEach(cap => allowedSoFar.add(cap));\n                rememberApproved = result.remember;\n            } catch (e) {\n                logger.error(\"Non-fatal error getting capabilities: \", e);\n            }\n        }\n\n        // discard all previously allowed capabilities if they are not requested\n        // TODO: this results in an unexpected behavior when this function is called during the capabilities renegotiation of MSC2974 that will be resolved later.\n        const allAllowed = new Set(iterableIntersection(allowedSoFar, requested));\n\n        if (rememberApproved) {\n            setRememberedCapabilitiesForWidget(this.forWidget, Array.from(allAllowed));\n        }\n\n        return allAllowed;\n    }\n\n    public async sendEvent(\n        eventType: string,\n        content: IContent,\n        stateKey: string = null,\n        targetRoomId: string = null,\n    ): Promise<ISendEventDetails> {\n        const client = MatrixClientPeg.get();\n        const roomId = targetRoomId || RoomViewStore.instance.getRoomId();\n\n        if (!client || !roomId) throw new Error(\"Not in a room or not attached to a client\");\n\n        let r: { event_id: string } = null; // eslint-disable-line camelcase\n        if (stateKey !== null) {\n            // state event\n            r = await client.sendStateEvent(roomId, eventType, content, stateKey);\n        } else if (eventType === EventType.RoomRedaction) {\n            // special case: extract the `redacts` property and call redact\n            r = await client.redactEvent(roomId, content['redacts']);\n        } else {\n            // message event\n            r = await client.sendEvent(roomId, eventType, content);\n\n            if (eventType === EventType.RoomMessage) {\n                CHAT_EFFECTS.forEach((effect) => {\n                    if (containsEmoji(content, effect.emojis)) {\n                        // For initial threads launch, chat effects are disabled\n                        // see #19731\n                        const isNotThread = content[\"m.relates_to\"].rel_type !== THREAD_RELATION_TYPE.name;\n                        if (!SettingsStore.getValue(\"feature_thread\") || isNotThread) {\n                            dis.dispatch({ action: `effects.${effect.command}` });\n                        }\n                    }\n                });\n            }\n        }\n\n        return { roomId, eventId: r.event_id };\n    }\n\n    public async sendToDevice(\n        eventType: string,\n        encrypted: boolean,\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\n    ): Promise<void> {\n        const client = MatrixClientPeg.get();\n\n        if (encrypted) {\n            const deviceInfoMap = await client.crypto.deviceList.downloadKeys(Object.keys(contentMap), false);\n\n            await Promise.all(\n                Object.entries(contentMap).flatMap(([userId, userContentMap]) =>\n                    Object.entries(userContentMap).map(async ([deviceId, content]) => {\n                        if (deviceId === \"*\") {\n                            // Send the message to all devices we have keys for\n                            await client.encryptAndSendToDevices(\n                                Object.values(deviceInfoMap[userId]).map(deviceInfo => ({\n                                    userId, deviceInfo,\n                                })),\n                                content,\n                            );\n                        } else {\n                            // Send the message to a specific device\n                            await client.encryptAndSendToDevices(\n                                [{ userId, deviceInfo: deviceInfoMap[userId][deviceId] }],\n                                content,\n                            );\n                        }\n                    }),\n                ),\n            );\n        } else {\n            await client.queueToDevice({\n                eventType,\n                batch: Object.entries(contentMap).flatMap(([userId, userContentMap]) =>\n                    Object.entries(userContentMap).map(([deviceId, content]) =>\n                        ({ userId, deviceId, payload: content }),\n                    ),\n                ),\n            });\n        }\n    }\n\n    private pickRooms(roomIds: (string | Symbols.AnyRoom)[] = null): Room[] {\n        const client = MatrixClientPeg.get();\n        if (!client) throw new Error(\"Not attached to a client\");\n\n        const targetRooms = roomIds\n            ? (roomIds.includes(Symbols.AnyRoom) ? client.getVisibleRooms() : roomIds.map(r => client.getRoom(r)))\n            : [client.getRoom(RoomViewStore.instance.getRoomId())];\n        return targetRooms.filter(r => !!r);\n    }\n\n    public async readRoomEvents(\n        eventType: string,\n        msgtype: string | undefined,\n        limitPerRoom: number,\n        roomIds: (string | Symbols.AnyRoom)[] = null,\n    ): Promise<IRoomEvent[]> {\n        limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary\n\n        const rooms = this.pickRooms(roomIds);\n        const allResults: IEvent[] = [];\n        for (const room of rooms) {\n            const results: MatrixEvent[] = [];\n            const events = room.getLiveTimeline().getEvents(); // timelines are most recent last\n            for (let i = events.length - 1; i > 0; i--) {\n                if (results.length >= limitPerRoom) break;\n\n                const ev = events[i];\n                if (ev.getType() !== eventType || ev.isState()) continue;\n                if (eventType === EventType.RoomMessage && msgtype && msgtype !== ev.getContent()['msgtype']) continue;\n                results.push(ev);\n            }\n\n            results.forEach(e => allResults.push(e.getEffectiveEvent()));\n        }\n        return allResults;\n    }\n\n    public async readStateEvents(\n        eventType: string,\n        stateKey: string | undefined,\n        limitPerRoom: number,\n        roomIds: (string | Symbols.AnyRoom)[] = null,\n    ): Promise<IRoomEvent[]> {\n        limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary\n\n        const rooms = this.pickRooms(roomIds);\n        const allResults: IEvent[] = [];\n        for (const room of rooms) {\n            const results: MatrixEvent[] = [];\n            const state: Map<string, MatrixEvent> = room.currentState.events.get(eventType);\n            if (state) {\n                if (stateKey === \"\" || !!stateKey) {\n                    const forKey = state.get(stateKey);\n                    if (forKey) results.push(forKey);\n                } else {\n                    results.push(...Array.from(state.values()));\n                }\n            }\n\n            results.slice(0, limitPerRoom).forEach(e => allResults.push(e.getEffectiveEvent()));\n        }\n        return allResults;\n    }\n\n    public async askOpenID(observer: SimpleObservable<IOpenIDUpdate>) {\n        const oidcState = WidgetPermissionStore.instance.getOIDCState(\n            this.forWidget, this.forWidgetKind, this.inRoomId,\n        );\n\n        const getToken = (): Promise<IOpenIDCredentials> => {\n            return MatrixClientPeg.get().getOpenIdToken();\n        };\n\n        if (oidcState === OIDCState.Denied) {\n            return observer.update({ state: OpenIDRequestState.Blocked });\n        }\n        if (oidcState === OIDCState.Allowed) {\n            return observer.update({ state: OpenIDRequestState.Allowed, token: await getToken() });\n        }\n\n        observer.update({ state: OpenIDRequestState.PendingUserConfirmation });\n\n        Modal.createDialog(WidgetOpenIDPermissionsDialog, {\n            widget: this.forWidget,\n            widgetKind: this.forWidgetKind,\n            inRoomId: this.inRoomId,\n\n            onFinished: async (confirm) => {\n                if (!confirm) {\n                    return observer.update({ state: OpenIDRequestState.Blocked });\n                }\n\n                return observer.update({ state: OpenIDRequestState.Allowed, token: await getToken() });\n            },\n        });\n    }\n\n    public async navigate(uri: string): Promise<void> {\n        navigateToPermalink(uri);\n    }\n\n    public async* getTurnServers(): AsyncGenerator<ITurnServer> {\n        const client = MatrixClientPeg.get();\n        if (!client.pollingTurnServers || !client.getTurnServers().length) return;\n\n        let setTurnServer: (server: ITurnServer) => void;\n        let setError: (error: Error) => void;\n\n        const onTurnServers = ([server]: IClientTurnServer[]) => setTurnServer(normalizeTurnServer(server));\n        const onTurnServersError = (error: Error, fatal: boolean) => { if (fatal) setError(error); };\n\n        client.on(ClientEvent.TurnServers, onTurnServers);\n        client.on(ClientEvent.TurnServersError, onTurnServersError);\n\n        try {\n            const initialTurnServer = client.getTurnServers()[0];\n            yield normalizeTurnServer(initialTurnServer);\n\n            // Repeatedly listen for new TURN servers until an error occurs or\n            // the caller stops this generator\n            while (true) {\n                yield await new Promise<ITurnServer>((resolve, reject) => {\n                    setTurnServer = resolve;\n                    setError = reject;\n                });\n            }\n        } finally {\n            // The loop was broken - clean up\n            client.off(ClientEvent.TurnServers, onTurnServers);\n            client.off(ClientEvent.TurnServersError, onTurnServersError);\n        }\n    }\n}\n"],"mappings":"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"}